# eCos saved configuration

# ---- commands --------------------------------------------------------
# This section contains information about the savefile format.
# It should not be edited. Any modifications made to this section
# may make it impossible for the configuration tools to read
# the savefile.

cdl_savefile_version 1;
cdl_savefile_command cdl_savefile_version {};
cdl_savefile_command cdl_savefile_command {};
cdl_savefile_command cdl_configuration { description hardware template package };
cdl_savefile_command cdl_package { value_source user_value wizard_value inferred_value };
cdl_savefile_command cdl_component { value_source user_value wizard_value inferred_value };
cdl_savefile_command cdl_option { value_source user_value wizard_value inferred_value };
cdl_savefile_command cdl_interface { value_source user_value wizard_value inferred_value };

# ---- toplevel --------------------------------------------------------
# This section defines the toplevel configuration object. The only
# values that can be changed are the name of the configuration and
# the description field. It is not possible to modify the target,
# the template or the set of packages simply by editing the lines
# below because these changes have wide-ranging effects. Instead
# the appropriate tools should be used to make such modifications.

cdl_configuration eCos {
    description "" ;

    # These fields should not be modified.
    hardware    avnet_s6lx9_mmu_tiny_13_1 ;
    template    lwip_eth ;
    package -hardware CYGPKG_HAL_MICROBLAZE current ;
    package -hardware CYGPKG_HAL_MICROBLAZE_MB4A current ;
    package -hardware CYGPKG_HAL_MICROBLAZE_GENERIC current ;
    package -hardware CYGPKG_HAL_MICROBLAZE_AVNET_S6LX9_MMU_TINY_13_1 current ;
    package -hardware CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE current ;
    package -hardware CYGPKG_IO_ETH_DRIVERS current ;
    package -hardware CYGPKG_DEVS_ETH_MICROBLAZE_EMACLITE current ;
    package -template CYGPKG_HAL current ;
    package -template CYGPKG_IO current ;
    package -template CYGPKG_INFRA current ;
    package -template CYGPKG_KERNEL current ;
    package -template CYGPKG_MEMALLOC current ;
    package -template CYGPKG_LIBC_STRING current ;
    package -template CYGPKG_ERROR current ;
    package -template CYGPKG_ISOINFRA current ;
    package -template CYGPKG_NET_LWIP current ;
};

# ---- conflicts -------------------------------------------------------
# There are no conflicts.

# ---- contents --------------------------------------------------------
# >
# >
# Global build options
# Global build options including control over
# compiler flags, linker flags and choice of toolchain.
#
cdl_component CYGBLD_GLOBAL_OPTIONS {
    # There is no associated value.

    # The following properties are affected by this value
};

# >
# Global command prefix
# This option specifies the command prefix used when
# invoking the build tools.
#
cdl_option CYGBLD_GLOBAL_COMMAND_PREFIX {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value microblazeel-unknown-linux-gnu
    # value_source default
    # Default value: microblazeel-unknown-linux-gnu
};

# Global compiler flags
# This option controls the global compiler flags which
# are used to compile all packages by
# default. Individual packages may define
# options which override these global flags.
#
cdl_option CYGBLD_GLOBAL_CFLAGS {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "-Wall -Wpointer-arith -Wstrict-prototypes -Wundef -Woverloaded-virtual -Wno-write-strings -D__LITTLE_ENDIAN__ -fmessage-length=0 -mlittle-endian -mxl-barrel-shift -mno-xl-soft-mul  -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -I. -I\$(PREFIX)/include/cyg/hal/ "
    # value_source default
    # Default value:  CYGBLD_GLOBAL_WARNFLAGS . "-D__LITTLE_ENDIAN__ -fmessage-length=0 -mlittle-endian -mxl-barrel-shift -mno-xl-soft-mul  -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -I. -I$(PREFIX)/include/cyg/hal/ " 
    #     CYGBLD_GLOBAL_WARNFLAGS == "-Wall -Wpointer-arith -Wstrict-prototypes -Wundef -Woverloaded-virtual -Wno-write-strings "
    #   --> "-Wall -Wpointer-arith -Wstrict-prototypes -Wundef -Woverloaded-virtual -Wno-write-strings -D__LITTLE_ENDIAN__ -fmessage-length=0 -mlittle-endian -mxl-barrel-shift -mno-xl-soft-mul  -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -I. -I\$(PREFIX)/include/cyg/hal/ "

    # The following properties are affected by this value
    # option CYGBLD_INFRA_CFLAGS_WARNINGS_AS_ERRORS
    #     Requires:  is_substr(CYGBLD_GLOBAL_CFLAGS, " -Werror") 
    # option CYGBLD_INFRA_CFLAGS_PIPE
    #     Requires:  is_substr(CYGBLD_GLOBAL_CFLAGS, " -pipe") 
};

# Global linker flags
# This option controls the global linker flags. Individual
# packages may define options which override these global flags.
#
cdl_option CYGBLD_GLOBAL_LDFLAGS {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "-fmessage-length=0 -mlittle-endian -mxl-barrel-shift -mno-xl-soft-mul -g -nostdlib -Wl,--gc-sections -Wl,-static"
    # value_source default
    # Default value: "-fmessage-length=0 -mlittle-endian -mxl-barrel-shift -mno-xl-soft-mul -g -nostdlib -Wl,--gc-sections -Wl,-static"
};

# Build GDB stub ROM image
# This option enables the building of the GDB stubs for the
# board. The common HAL controls takes care of most of the
# build process, but the platform CDL takes care of creating
# an S-Record data file suitable for programming using
# the board's EPPC-Bug firmware monitor.
#
cdl_option CYGBLD_BUILD_GDB_STUBS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  CYG_HAL_STARTUP == "ROM" 
    #     CYG_HAL_STARTUP == RAM
    #   --> 0
    # Requires: CYGSEM_HAL_ROM_MONITOR
    #     CYGSEM_HAL_ROM_MONITOR == 0
    #   --> 0
    # Requires: CYGBLD_BUILD_COMMON_GDB_STUBS
    #     CYGBLD_BUILD_COMMON_GDB_STUBS == 0
    #   --> 0
    # Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #   --> 1
    # Requires: CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    #     CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT == 1
    #   --> 1
    # Requires: CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
    #     CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT == 1
    #   --> 1
    # Requires: ! CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT
    #     CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT == 0
    #   --> 1
    # Requires: ! CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM
    #     CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM == 0
    #   --> 1
};

# Standard compiler warning flags
# This option specifies the default warning-related compiler flags used
# on all eCos platforms.
#
cdl_option CYGBLD_GLOBAL_WARNFLAGS {
    # Calculated value:  "-Wall -Wpointer-arith -Wstrict-prototypes -Wundef -Woverloaded-virtual -Wno-write-strings " 
    # Flavor: data
    # Current_value: -Wall -Wpointer-arith -Wstrict-prototypes -Wundef -Woverloaded-virtual -Wno-write-strings 

    # The following properties are affected by this value
    # option CYGBLD_GLOBAL_CFLAGS
    #     DefaultValue:  CYGBLD_GLOBAL_WARNFLAGS . "-D__LITTLE_ENDIAN__ -fmessage-length=0 -mlittle-endian -mxl-barrel-shift -mno-xl-soft-mul  -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -I. -I$(PREFIX)/include/cyg/hal/ " 
};

# Build common GDB stub ROM image
# Unless a target board has specific requirements to the
# stub implementation, it can use a simple common stub.
# This option, which gets enabled by platform HALs as
# appropriate, controls the building of the common stub.
#
cdl_option CYGBLD_BUILD_COMMON_GDB_STUBS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: CYGBLD_BUILD_COMMON_GDB_STUBS
};

# <
# Redboot HAL options
# This option lists the target's requirements for a valid Redboot
# configuration.
#
cdl_component CYGPKG_REDBOOT_HAL_OPTIONS {
    # This option is not active
    # ActiveIf constraint: CYGPKG_REDBOOT
    #     CYGPKG_REDBOOT (unknown) == 0
    #   --> 0

    # There is no associated value.
};

# >
# Build Redboot ROM binary image
# This option enables the conversion of the Redboot ELF
# image to a binary image suitable for ROM programming.
#
cdl_option CYGBLD_BUILD_REDBOOT_BIN {
    # This option is not active
    # The parent CYGPKG_REDBOOT_HAL_OPTIONS is not active
    # ActiveIf constraint: CYGBLD_BUILD_REDBOOT
    #     CYGBLD_BUILD_REDBOOT (unknown) == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# Uartlite serial device drivers
# This option enables uartlite serial device drivers for the
# Xilinx platform.
#
cdl_package CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This option is not active
    # ActiveIf constraint: CYGPKG_IO_SERIAL
    #     CYGPKG_IO_SERIAL (unknown) == 0
    #   --> 0
    # ActiveIf constraint: CYGPKG_HAL_MICROBLAZE_GENERIC
    #     CYGPKG_HAL_MICROBLAZE_GENERIC == current
    #   --> 1
    # ActiveIf constraint: MON_UARTLITE_0
    #     MON_UARTLITE_0 == 1
    #   --> 1

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires: CYGPKG_ERROR
    #     CYGPKG_ERROR == current
    #   --> 1
};

# >
# Generic 16x5x serial driver required
#
cdl_interface CYGINT_IO_SERIAL_GENERIC_16X5X_REQUIRED {
    # No options implement this inferface
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE is not active

    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
};

# Serial 0 for uartlite
# This option includes the serial device driver for the 
# uartlite port 0.
#
cdl_component CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0 {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # component CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE_TESTING
    #     ActiveIf: CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0
};

# >
# Device name for uartlite serial driver
# This option specifies the name of the serial device.
#
cdl_option CYGDAT_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0_NAME {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0 is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"/dev/ser0\""
    # value_source default
    # Default value: "\"/dev/ser0\""

    # The following properties are affected by this value
    # option CYGPRI_SER_TEST_SER_DEV
    #     DefaultValue:  CYGDAT_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0_NAME 
};

# Baud rate for uartlite driver
# This option specifies the default baud rate (speed).
#
cdl_option CYGNUM_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0_BAUD {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0 is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 115200
    # value_source default
    # Default value: 115200
    # Legal values:  50 75 110 "134_5" 150 200 300 600 1200 1800 2400
    #                                 3600 4800 7200 9600 14400 19200 38400
    #                                 57600 115200 
};

# Buffer size for uartlite serial port 0
# This option specifies the size of the internal buffers.
#
cdl_option CYGNUM_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0_BUFSIZE {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0 is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 128
    # value_source default
    # Default value: 128
    # Legal values: 0 to 8192
};

# <
# Testing parameters
#
cdl_component CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE_TESTING {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE is not active
    # ActiveIf constraint: CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0
    #     CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0 == 0
    #   --> 0

    # Calculated value: 1
    # Flavor: bool
    # Current value: 1
};

# >
# Serial device used for testing
#
cdl_option CYGPRI_SER_TEST_SER_DEV {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE_TESTING is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  CYGDAT_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0_NAME 
    #     CYGDAT_IO_SERIAL_MICROBLAZE_UARTLITE_SERIAL0_NAME == 0
    #   --> 0
};

# <
# <
# ISO C library string functions
# doc: ref/libc.html
# This package provides string functions specified by the
# ISO C standard - ISO/IEC 9899:1990.
#
cdl_package CYGPKG_LIBC_STRING {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires:  CYGBLD_ISO_STRING_LOCALE_FUNCS_HEADER ==  "<cyg/libc/string/string.h>" 
    #     CYGBLD_ISO_STRING_LOCALE_FUNCS_HEADER == <cyg/libc/string/string.h>
    #   --> 1
    # Requires:  CYGBLD_ISO_STRING_MEMFUNCS_HEADER ==  "<cyg/libc/string/string.h>" 
    #     CYGBLD_ISO_STRING_MEMFUNCS_HEADER == <cyg/libc/string/string.h>
    #   --> 1
    # Requires:  CYGBLD_ISO_STRING_STRFUNCS_HEADER ==  "<cyg/libc/string/string.h>" 
    #     CYGBLD_ISO_STRING_STRFUNCS_HEADER == <cyg/libc/string/string.h>
    #   --> 1
    # Requires:  CYGBLD_ISO_STRTOK_R_HEADER ==  "<cyg/libc/string/string.h>" 
    #     CYGBLD_ISO_STRTOK_R_HEADER == <cyg/libc/string/string.h>
    #   --> 1
    # Requires: CYGPKG_ISOINFRA
    #     CYGPKG_ISOINFRA == current
    #   --> 1
};

# >
# Inline versions of <string.h> functions
# This option chooses whether some of the
# particularly simple string functions from
# <string.h> are available as inline
# functions. This may improve performance, and as
# the functions are small, may even improve code
# size.
#
cdl_option CYGIMP_LIBC_STRING_INLINES {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Optimize string functions for code size
# This option tries to reduce string function
# code size at the expense of execution speed. The
# same effect can be produced if the code is
# compiled with the -Os option to the compiler.
#
cdl_option CYGIMP_LIBC_STRING_PREFER_SMALL_TO_FAST {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Provide BSD compatibility functions
# Enabling this option causes various compatibility functions
# commonly found in the BSD UNIX operating system to be included.
# These are functions such as bzero, bcmp, bcopy, bzero, strcasecmp,
# strncasecmp, index, rindex and swab.
#
cdl_option CYGFUN_LIBC_STRING_BSD_FUNCS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # The inferred value should not be edited directly.
    inferred_value 0
    # value_source inferred
    # Default value: 1
    # Requires:  CYGBLD_ISO_STRING_BSD_FUNCS_HEADER ==  "<cyg/libc/string/bsdstring.h>" 
    #     CYGBLD_ISO_STRING_BSD_FUNCS_HEADER == <cyg/libc/string/bsdstring.h>
    #   --> 1
    # Requires: CYGINT_ISO_CTYPE
    #     CYGINT_ISO_CTYPE == 0
    #   --> 0
};

# strtok
# These options control the behaviour of the
# strtok() and strtok_r() string tokenization
# functions.
#
cdl_component CYGPKG_LIBC_STRING_STRTOK {
    # There is no associated value.
};

# >
# Per-thread strtok()
# This option controls whether the string function
# strtok() has its state recorded on a per-thread
# basis rather than global. If this option is
# disabled, some per-thread space can be saved.
# Note there is also a POSIX-standard strtok_r()
# function to achieve a similar effect with user
# support. Enabling this option will use one slot
# of kernel per-thread data. You should ensure you
# have enough slots configured for all your
# per-thread data.
#
cdl_option CYGSEM_LIBC_STRING_PER_THREAD_STRTOK {
    # ActiveIf constraint: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: CYGVAR_KERNEL_THREADS_DATA
    #     CYGVAR_KERNEL_THREADS_DATA == 1
    #   --> 1
    # Requires: CYGVAR_KERNEL_THREADS_DATA
    #     CYGVAR_KERNEL_THREADS_DATA == 1
    #   --> 1
};

# Tracing level
# Trace verbosity level for debugging the <string.h>
# functions strtok() and strtok_r(). Increase this
# value to get additional trace output.
#
cdl_option CYGNUM_LIBC_STRING_STRTOK_TRACE_LEVEL {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Legal values: 0 to 1
};

# <
# strdup
# This option indicates whether strdup() is to be supported.
#
cdl_option CYGFUN_LIBC_STRING_STRDUP {
    # ActiveIf constraint: CYGINT_ISO_MALLOC
    #     CYGINT_ISO_MALLOC == 1
    #   --> 1

    # Calculated value: 1
    # Flavor: bool
    # Current value: 1
};

# Provide strnlen() GNU extension
# This option controls support for the strnlen() function.
# (This is a GNU extension, not part of ANSI C.)
#
cdl_option CYGFUN_LIBC_STRING_GNU_STRNLEN {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# C library string functions build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_LIBC_STRING_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the C library. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_LIBC_STRING_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the C library. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_LIBC_STRING_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# C library string function tests
# This option specifies the set of tests for the C library
# string functions.
#
cdl_option CYGPKG_LIBC_STRING_TESTS {
    # Calculated value:  "tests/memchr tests/memcmp1 tests/memcmp2 tests/memcpy1 tests/memcpy2 tests/memmove1 tests/memmove2 tests/memset tests/strcat1 tests/strcat2 tests/strchr tests/strcmp1 tests/strcmp2 tests/strcoll1 tests/strcoll2 tests/strcpy1 tests/strcpy2 tests/strcspn tests/strcspn tests/strlen tests/strncat1 tests/strncat2 tests/strncpy1 tests/strncpy2 tests/strpbrk tests/strrchr tests/strspn tests/strstr tests/strtok tests/strxfrm1 tests/strxfrm2 tests/strnlen" 
    # Flavor: data
    # Current_value: tests/memchr tests/memcmp1 tests/memcmp2 tests/memcpy1 tests/memcpy2 tests/memmove1 tests/memmove2 tests/memset tests/strcat1 tests/strcat2 tests/strchr tests/strcmp1 tests/strcmp2 tests/strcoll1 tests/strcoll2 tests/strcpy1 tests/strcpy2 tests/strcspn tests/strcspn tests/strlen tests/strncat1 tests/strncat2 tests/strncpy1 tests/strncpy2 tests/strpbrk tests/strrchr tests/strspn tests/strstr tests/strtok tests/strxfrm1 tests/strxfrm2 tests/strnlen
};

# <
# <
# <
# eCos HAL
# doc: ref/the-ecos-hardware-abstraction-layer.html
# The eCos HAL package provide a porting layer for
# higher-level parts of the system such as the kernel and the
# C library. Each installation should have HAL packages for
# one or more architectures, and for each architecture there
# may be one or more supported platforms. It is necessary to
# select one target architecture and one platform for that
# architecture. There are also a number of configuration
# options that are common to all HAL packages.
#
cdl_package CYGPKG_HAL {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires: CYGPKG_INFRA
    #     CYGPKG_INFRA == current
    #   --> 1

    # The following properties are affected by this value
};

# >
# Platform-independent HAL options
# A number of configuration options are common to most or all
# HAL packages, for example options controlling how much state
# should be saved during a context switch. The implementations
# of these options will vary from architecture to architecture.
#
cdl_component CYGPKG_HAL_COMMON {
    # There is no associated value.
};

# >
# Provide eCos kernel support
# The HAL can be configured to either support the full eCos
# kernel, or to support only very simple applications which do
# not require a full kernel. If kernel support is not required
# then some of the startup, exception, and interrupt handling
# code can be eliminated.
#
cdl_option CYGFUN_HAL_COMMON_KERNEL_SUPPORT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1
    # Requires: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1
};

# HAL exception support
# When a processor exception occurs, for example an attempt to
# execute an illegal instruction or to perform a divide by
# zero, this exception may be handled in a number of different
# ways. If the target system has gdb support then typically
# the exception will be handled by gdb code. Otherwise if the
# HAL exception support is enabled then the HAL will invoke a
# routine deliver_exception(). Typically this routine will be
# provided by the eCos kernel, but it is possible for
# application code to provide its own implementation. If the
# HAL exception support is not enabled and a processor
# exception occurs then the behaviour of the system is
# undefined.
#
cdl_option CYGPKG_HAL_EXCEPTIONS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: CYGPKG_KERNEL_EXCEPTIONS
    #     CYGPKG_KERNEL_EXCEPTIONS == 1
    #   --> 1
    # Requires: CYGPKG_KERNEL_EXCEPTIONS
    #     CYGPKG_KERNEL_EXCEPTIONS == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGPKG_KERNEL_EXCEPTIONS
    #     Requires: CYGPKG_HAL_EXCEPTIONS
};

# Stop calling constructors early
# This option supports environments where some constructors
# must be run in the context of a thread rather than at
# simple system startup time. A boolean flag named
# cyg_hal_stop_constructors is set to 1 when constructors
# should no longer be invoked. It is up to some other
# package to deal with the rest of the constructors.
# In the current version this is only possible with the
# C library.
#
cdl_option CYGSEM_HAL_STOP_CONSTRUCTORS_ON_FLAG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGSEM_LIBC_INVOKE_DEFAULT_STATIC_CONSTRUCTORS
    #     CYGSEM_LIBC_INVOKE_DEFAULT_STATIC_CONSTRUCTORS (unknown) == 0
    #   --> 0
};

# HAL uses the MMU and allows for CDL manipulation of it's use
#
cdl_interface CYGINT_HAL_SUPPORTS_MMU_TABLES {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0

    # The following properties are affected by this value
    # option CYGSEM_HAL_INSTALL_MMU_TABLES
    #     ActiveIf: CYGINT_HAL_SUPPORTS_MMU_TABLES
};

# Install MMU tables.
# This option controls whether this application installs
# its own Memory Management Unit (MMU) tables, or relies on the
# existing environment to run.
#
cdl_option CYGSEM_HAL_INSTALL_MMU_TABLES {
    # This option is not active
    # ActiveIf constraint: CYGINT_HAL_SUPPORTS_MMU_TABLES
    #     CYGINT_HAL_SUPPORTS_MMU_TABLES == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  CYG_HAL_STARTUP != "RAM" 
    #     CYG_HAL_STARTUP == RAM
    #   --> 0

    # The following properties are affected by this value
    # option CYGSEM_HAL_STATIC_MMU_TABLES
    #     Requires: CYGSEM_HAL_INSTALL_MMU_TABLES
};

# Use static MMU tables.
# This option defines an environment where any Memory
# Management Unit (MMU) tables are constant.  Normally used by ROM
# based environments, this provides a way to save RAM usage which
# would otherwise be required for these tables.
#
cdl_option CYGSEM_HAL_STATIC_MMU_TABLES {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGSEM_HAL_INSTALL_MMU_TABLES
    #     CYGSEM_HAL_INSTALL_MMU_TABLES == 0
    #   --> 0
};

# Route diagnostic output to debug channel
# If not inheriting the console setup from the ROM monitor,
# it is possible to redirect diagnostic output to the debug
# channel by enabling this option. Depending on the debugger
# used it may also be necessary to select a mangler for the
# output to be displayed by the debugger.
#
cdl_component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN {
    # ActiveIf constraint: !CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE == 0
    #   --> 1
    # ActiveIf constraint:  CYGPKG_HAL_ARM || CYGPKG_HAL_POWERPC_MPC8xx  || CYGPKG_HAL_V85X_V850 || CYGSEM_HAL_VIRTUAL_VECTOR_DIAG 
    #     CYGPKG_HAL_ARM (unknown) == 0
    #     CYGPKG_HAL_POWERPC_MPC8xx (unknown) == 0
    #     CYGPKG_HAL_V85X_V850 (unknown) == 0
    #     CYGSEM_HAL_VIRTUAL_VECTOR_DIAG == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  (CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS  || CYG_HAL_STARTUP == "RAM") ? 1 : 0
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #     CYG_HAL_STARTUP == RAM
    #   --> 1

    # The following properties are affected by this value
    # option CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE
    #     Calculated:  !CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE  && !CYGDBG_HAL_DIAG_TO_DEBUG_CHAN 
};

# >
# Mangler used on diag output
# It is sometimes necessary to mangle (encode) the
# diag ASCII text output in order for it to show up at the
# other end. In particular, GDB may silently ignore raw
# ASCII text.
#
cdl_option CYGSEM_HAL_DIAG_MANGLER {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value None
    # value_source default
    # Default value: None
    # Legal values: "GDB" "None"
};

# <
# Grouped libraries for linking
# This option provides a list of libraries used to satisfy
# linker dependencies, but necessary for building eCos. It is passed
# to a GROUP() directive in the linker script, which is analogous
# to using the "-(" aka "--start-group", and "-)" aka
# "--end-group" options on the linker command line.
# It provides a similar function to adding "-llibname" to the
# linker, but with the added feature that each library in the group
# is scanned in turn for unresolved symbols, and this process is
# repeated until there are no more unresolved symbols. This is important
# for system libraries as there are often mutual dependencies.
# This option should not be used for adding application specific
# libraries. That should be done in the application's own makefile
# or link line.
# Users wishing to use the GNU Compiler prior to GCC 3.0 will
# need to remove libsupc++.a from this option.
# Note that libtarget.a is always required to build eCos.
#
cdl_component CYGBLD_HAL_LINKER_GROUPED_LIBS {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "libtarget.a libgcc.a libsupc++.a"
    # value_source default
    # Default value: CYGBLD_HAL_LINKER_GROUPED_LIBS_DEFAULT
    #     CYGBLD_HAL_LINKER_GROUPED_LIBS_DEFAULT == "libtarget.a libgcc.a libsupc++.a"
    #   --> "libtarget.a libgcc.a libsupc++.a"
    # Requires:  is_substr(CYGBLD_HAL_LINKER_GROUPED_LIBS, "libtarget.a") 
    #     CYGBLD_HAL_LINKER_GROUPED_LIBS == "libtarget.a libgcc.a libsupc++.a"
    #   --> 1

    # The following properties are affected by this value
    # component CYGBLD_HAL_LINKER_GROUPED_LIBS
    #     Requires:  is_substr(CYGBLD_HAL_LINKER_GROUPED_LIBS, "libtarget.a") 
};

# >
# Default setting
# This option is intended to be used by other eCos packages (including
# HAL packages) to provide a different default value for
# CYGBLD_HAL_LINKER_GROUPED_LIBS.
# This is separated into its own option to continue to
# allow the user to make customisations to the grouped library
# list.
#
cdl_option CYGBLD_HAL_LINKER_GROUPED_LIBS_DEFAULT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "libtarget.a libgcc.a libsupc++.a"
    # value_source default
    # Default value: "libtarget.a libgcc.a libsupc++.a"

    # The following properties are affected by this value
    # component CYGBLD_HAL_LINKER_GROUPED_LIBS
    #     DefaultValue: CYGBLD_HAL_LINKER_GROUPED_LIBS_DEFAULT
};

# <
# <
# HAL interrupt handling
# A number of configuration options related to interrupt
# handling are common to most or all HAL packages, even though
# the implementations will vary from architecture to
# architecture.
#
cdl_component CYGPKG_HAL_COMMON_INTERRUPTS {
    # There is no associated value.
};

# >
# Use separate stack for interrupts
# When an interrupt occurs this interrupt can be handled either
# on the current stack or on a separate stack maintained by the
# HAL. Using a separate stack requires a small number of extra
# instructions in the interrupt handling code, but it has the
# advantage that it is no longer necessary to allow extra space
# in every thread stack for the interrupt handlers. The amount
# of extra space required depends on the interrupt handlers
# that are being used.
#
cdl_option CYGIMP_HAL_COMMON_INTERRUPTS_USE_INTERRUPT_STACK {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Interrupt stack size
# This configuration option specifies the stack size in bytes
# for the interrupt stack. Typically this should be a multiple
# of 16, but the exact requirements will vary from architecture
# to architecture. The interrupt stack serves two separate
# purposes. It is used as the stack during system
# initialization. In addition, if the interrupt system is
# configured to use a separate stack then all interrupts will
# be processed on this stack. The exact memory requirements
# will vary from application to application, and will depend
# heavily on whether or not other interrupt-related options,
# for example nested interrupts, are enabled. On most targets,
# in a configuration with no kernel this stack will also be
# the stack used to invoke the application, and must obviously
# be appropriately large in that case.
#
cdl_option CYGNUM_HAL_COMMON_INTERRUPTS_STACK_SIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 4096
    # value_source default
    # Default value:  CYGPKG_KERNEL ? 4096 : 32768 
    #     CYGPKG_KERNEL == current
    #   --> 4096
    # Legal values: 128 to 1048576
};

# Allow nested interrupts
# When an interrupt occurs the HAL interrupt handling code can
# either leave interrupts disabled for the duration of the
# interrupt handling code, or by doing some extra work it can
# reenable interrupts before invoking the interrupt handler and
# thus allow nested interrupts to happen. If all the interrupt
# handlers being used are small and do not involve any loops
# then it is usually better to disallow nested interrupts.
# However if any of the interrupt handlers are more complicated
# than nested interrupts will usually be required.
#
cdl_option CYGSEM_HAL_COMMON_INTERRUPTS_ALLOW_NESTING {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Save minimum context on interrupt
# The HAL interrupt handling code can exploit the calling conventions
# defined for a given architecture to reduce the amount of state
# that has to be saved. Generally this improves performance and
# reduces code size. However it can make source-level debugging
# more difficult.
#
cdl_option CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     Requires: ! CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: ! CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT
};

# Chain all interrupts together
# Interrupts can be attached to vectors either singly, or be
# chained together. The latter is necessary if there is no way
# of discovering which device has interrupted without
# inspecting the device itself. It can also reduce the amount
# of RAM needed for interrupt decoding tables and code.
#
cdl_option CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGIMP_KERNEL_INTERRUPTS_CHAIN
    #     Requires: CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN
};

# Ignore spurious [fleeting] interrupts
# On some hardware, interrupt sources may not be de-bounced or
# de-glitched.  Rather than try to handle these interrupts (no
# handling may be possible), this option allows the HAL to simply
# ignore them.  In most cases, if the interrupt is real it will
# reoccur in a detectable form.
#
cdl_option CYGIMP_HAL_COMMON_INTERRUPTS_IGNORE_SPURIOUS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# HAL context switch support
# A number of configuration options related to thread contexts
# are common to most or all HAL packages, even though the
# implementations will vary from architecture to architecture.
#
cdl_component CYGPKG_HAL_COMMON_CONTEXT {
    # There is no associated value.

    # The following properties are affected by this value
};

# >
# Use minimum thread context
# The thread context switch code can exploit the calling
# conventions defined for a given architecture to reduce the
# amount of state that has to be saved during a context
# switch. Generally this improves performance and reduces
# code size. However it can make source-level debugging more
# difficult.
#
cdl_option CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     Requires: ! CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: ! CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM
};

# <
# Explicit control over cache behaviour
# These options let the default behaviour of the caches 
# be easily configurable.
#
cdl_component CYGPKG_HAL_CACHE_CONTROL {
    # There is no associated value.
};

# >
# Enable DATA cache on startup
# Enabling this option will cause the data cache to be enabled
# as soon as practicable when eCos starts up.  One would choose
# to disable this if the data cache cannot safely be turned on,
# such as a case where the cache(s) require additional platform
# specific setup.
#
cdl_component CYGSEM_HAL_ENABLE_DCACHE_ON_STARTUP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# DATA cache mode on startup
# This option controls the mode the cache will be set to
# when enabled on startup.
#
cdl_option CYGSEM_HAL_DCACHE_STARTUP_MODE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value COPYBACK
    # value_source default
    # Default value: COPYBACK
    # Legal values:  "COPYBACK" "WRITETHRU" 
};

# <
# Enable INSTRUCTION cache on startup
# Enabling this option will cause the instruction cache to be enabled
# as soon as practicable when eCos starts up.  One would choose
# to disable this if the instruction cache cannot safely be turned on,
# such as a case where the cache(s) require additional platform
# specific setup.
#
cdl_option CYGSEM_HAL_ENABLE_ICACHE_ON_STARTUP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Source-level debugging support
# If the source level debugger gdb is to be used for debugging
# application code then it may be necessary to configure in support
# for this in the HAL.
#
cdl_component CYGPKG_HAL_DEBUG {
    # There is no associated value.
};

# >
# Support for GDB stubs
# The HAL implements GDB stubs for the target.
#
cdl_interface CYGINT_HAL_DEBUG_GDB_STUBS {
    # Implemented by CYGPKG_HAL_MICROBLAZE_GENERIC, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     ActiveIf: CYGINT_HAL_DEBUG_GDB_STUBS
};

# Include GDB stubs in HAL
# This option causes a set of GDB stubs to be included into the
# system. On some target systems the GDB support will be
# provided by other means, for example by a ROM monitor. On
# other targets, especially when building a ROM-booting system,
# the necessary support has to go into the target library
# itself. When GDB stubs are include in a configuration, HAL
# serial drivers must also be included.
#
cdl_option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS {
    # ActiveIf constraint: CYGINT_HAL_DEBUG_GDB_STUBS
    #     CYGINT_HAL_DEBUG_GDB_STUBS == 1
    #   --> 1

    # Flavor: bool
    user_value 1
    # value_source user
    # Default value: 0
    # Requires: ! CYGSEM_HAL_USE_ROM_MONITOR
    #     CYGSEM_HAL_USE_ROM_MONITOR == 0
    #   --> 1
    # Requires: ! CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT
    #     CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT == 0
    #   --> 1
    # Requires: ! CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM
    #     CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM == 0
    #   --> 1
    # Requires:  !CYGSEM_HAL_VIRTUAL_VECTOR_DIAG  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_DIAG == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN
    #     DefaultValue:  (CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS  || CYG_HAL_STARTUP == "RAM") ? 1 : 0
    # option CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    #     Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    # option CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    #     DefaultValue: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    # option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT
    #     ActiveIf:  CYGSEM_HAL_USE_ROM_MONITOR || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    # option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT
    #     DefaultValue:  !CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    # option CYGBLD_BUILD_COMMON_GDB_STUBS
    #     Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    # option CYGPKG_HAL_GDB_FILEIO
    #     Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    # option CYGSEM_HAL_USE_ROM_MONITOR
    #     Requires: ! CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    # option CYGSEM_HAL_USE_ROM_MONITOR
    #     DefaultValue:  (CYG_HAL_STARTUP == "RAM" &&
    #     				!CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS &&
    #     				!CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED &&
    #     				!CYGSEM_HAL_MICROBLAZE_COPY_VECTORS) ? 1 : 0 
    # option CYGSEM_HAL_MICROBLAZE_COPY_VECTORS
    #     DefaultValue:  (CYG_HAL_STARTUP != "RAM" ||
    #                              CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS) ? 1 : 0 
};

# Support for external break support in GDB stubs
# The HAL implements external break (or asynchronous interrupt)
# in the GDB stubs for the target.
#
cdl_interface CYGINT_HAL_DEBUG_GDB_STUBS_BREAK {
    # Implemented by CYGPKG_HAL_MICROBLAZE_GENERIC, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    #     ActiveIf: CYGINT_HAL_DEBUG_GDB_STUBS_BREAK
};

# Include GDB external break support for stubs
# This option causes the GDB stub to add a serial interrupt handler
# which will listen for GDB break packets. This lets you stop the
# target asynchronously when using GDB, usually by hitting Control+C
# or pressing the STOP button. This option differs from
# CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT in that it is used when
# GDB stubs are present.
#
cdl_option CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT {
    # ActiveIf constraint: CYGINT_HAL_DEBUG_GDB_STUBS_BREAK
    #     CYGINT_HAL_DEBUG_GDB_STUBS_BREAK == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #   --> 1
    # Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT
    #     Requires: !CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
};

# Platform does not support CTRLC
#
cdl_interface CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT
    #     ActiveIf:  CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED == 0 
};

# Include GDB external break support when no stubs
# This option adds an interrupt handler for the GDB serial line
# which will listen for GDB break packets. This lets you stop the
# target asynchronously when using GDB, usually by hitting Control+C
# or pressing the STOP button. This option differs from
# CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT in that it is used when the GDB
# stubs are NOT present.
#
cdl_option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT {
    # ActiveIf constraint:  CYGSEM_HAL_USE_ROM_MONITOR || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    #     CYGSEM_HAL_USE_ROM_MONITOR == 0
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #   --> 1
    # ActiveIf constraint:  CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED == 0 
    #     CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED == 0
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  !CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #   --> 0
    # Requires: !CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    #     CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT == 1
    #   --> 0
};

# Include GDB multi-threading debug support
# This option enables some extra HAL code which is needed
# to support multi-threaded source level debugging.
#
cdl_option CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT {
    # ActiveIf constraint:  CYGSEM_HAL_ROM_MONITOR || CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT 
    #     CYGSEM_HAL_ROM_MONITOR == 0
    #     CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
    # option CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT
    #     Requires: CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
};

# Number of times to retry sending a $O packet
# This option controls the number of attempts that eCos programs
# will make to send a $O packet to a host GDB process.  If it is
# set non-zero, then the target process will attempt to resend the
# $O packet data up to this number of retries.  Caution: use of
# this option is not recommended as it can thoroughly confuse the
# host GDB process.
#
cdl_option CYGNUM_HAL_DEBUG_GDB_PROTOCOL_RETRIES {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Timeout period for GDB packets
# This option controls the time (in milliseconds) that eCos programs
# will wait for a response when sending packets to a host GDB process.
# If this time elapses, then the packet will be resent, up to some
# maximum number of times (CYGNUM_HAL_DEBUG_GDB_PROTOCOL_RETRIES).
#
cdl_option CYGNUM_HAL_DEBUG_GDB_PROTOCOL_TIMEOUT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 500
    # value_source default
    # Default value: 500
};

# Location of CRC32 table
# The stubs use a 1 kilobyte CRC table that can either be pregenerated
# and placed in ROM, or generated at runtime in RAM. Depending on
# your memory constraints, one of these options may be better.
#
cdl_option CYGDBG_HAL_CRCTABLE_LOCATION {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value RAM
    # value_source default
    # Default value: RAM
    # Legal values: "ROM" "RAM"
};

# <
# ROM monitor support
# Support for ROM monitors can be built in to your application. 
# It may also be relevant to build your application as a ROM monitor
# itself. Such options are contained here if relevant for your chosen
# platform. The options and ROM monitors available to choose are
# platform-dependent.
#
cdl_component CYGPKG_HAL_ROM_MONITOR {
    # There is no associated value.

    # The following properties are affected by this value
};

# >
# Target has virtual vector support
#
cdl_interface CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT {
    # Implemented by CYGPKG_HAL_MICROBLAZE_GENERIC, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
    # component CYGSEM_HAL_VIRTUAL_VECTOR_SUPPORT
    #     ActiveIf: CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT
};

# Target supports baud rate control via vectors
# Whether this target supports the __COMMCTL_GETBAUD
# and __COMMCTL_SETBAUD virtual vector comm control operations.
#
cdl_interface CYGINT_HAL_VIRTUAL_VECTOR_COMM_BAUD_SUPPORT {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
};

# Enable use of virtual vector calling interface
# Virtual vector support allows the HAL to let the ROM
# monitor handle certain operations. The virtual vector table
# defines a calling interface between applications running in
# RAM and the ROM monitor.
#
cdl_component CYGSEM_HAL_VIRTUAL_VECTOR_SUPPORT {
    # ActiveIf constraint: CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT
    #     CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT == 1
    #   --> 1

    # Calculated value: 1
    # Flavor: bool
    # Current value: 1
};

# >
# Inherit console settings from ROM monitor
# When this option is set, the application will inherit
# the console as set up by the ROM monitor. This means
# that the application will use whatever channel and
# mangling style was used by the ROM monitor when
# the application was launched.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE {
    # This option is not active
    # ActiveIf constraint: CYGSEM_HAL_USE_ROM_MONITOR
    #     CYGSEM_HAL_USE_ROM_MONITOR == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  !CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS == 1
    #   --> 0

    # The following properties are affected by this value
    # component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN
    #     ActiveIf: !CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE
    # option CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE
    #     Calculated:  !CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE  && !CYGDBG_HAL_DIAG_TO_DEBUG_CHAN 
};

# Debug channel is configurable
# This option is a configuration hint - it is enabled
# when the HAL initialization code will make use
# of the debug channel configuration option.
#
cdl_option CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE {
    # Calculated value:  CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS == 1
    # Flavor: bool
    # Current value: 1

    # The following properties are affected by this value
    # option CYGNUM_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL
    #     ActiveIf: CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE
};

# Console channel is configurable
# This option is a configuration hint - it is enabled
# when the HAL initialization code will make use
# of the console channel configuration option.
#
cdl_option CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE {
    # Calculated value:  !CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE  && !CYGDBG_HAL_DIAG_TO_DEBUG_CHAN 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE == 0
    #     CYGDBG_HAL_DIAG_TO_DEBUG_CHAN == 1
    # Flavor: bool
    # Current value: 0

    # The following properties are affected by this value
    # option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL
    #     ActiveIf: CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE
};

# Initialize whole of virtual vector table
# This option will cause the whole of the virtual
# vector table to be initialized with dummy values on
# startup. When this option is enabled, all the
# options below must also be enabled - or the
# table would be empty when the application
# launches.
# On targets where older ROM monitors without
# virtual vector support may still be in use, it is
# necessary for RAM applictions to initialize the
# table (since all HAL diagnostics and debug IO
# happens via the table).
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYG_HAL_STARTUP != "RAM" || !CYGSEM_HAL_USE_ROM_MONITOR 
    #     CYG_HAL_STARTUP == RAM
    #     CYGSEM_HAL_USE_ROM_MONITOR == 0
    #   --> 1
    # Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET == 1
    #   --> 1
    # Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US == 1
    #   --> 1
    # Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA == 1
    #   --> 1
    # Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT
    #     ActiveIf: !CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_VERSION
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
};

# Claim virtual vector table entries by default
# By default most virtual vectors will be claimed by
# RAM startup configurations, meaning that the RAM
# application will provide the services. The
# exception is COMMS support (HAL
# diagnostics/debugging IO) which is left in the
# control of the ROM monitor.
# The reasoning behind this is to get as much of the
# code exercised during regular development so it
# is known to be working the few times a new ROM
# monitor or a ROM production configuration is used
# - COMMS are excluded only by necessity in order to
# avoid breaking an existing debugger connections
# (there may be ways around this).
# For production RAM configurations this option can
# be switched off, causing the appliction to rely on
# the ROM monitor for these services, thus
# saving some space.
# Individual vectors may also be left unclaimed,
# controlled by the below options (meaning that the
# associated service provided by the ROM monitor
# will be used).
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT {
    # This option is not active
    # ActiveIf constraint: !CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
};

# Claim reset virtual vectors
# This option will cause the reset and kill_by_reset
# virtual vectors to be claimed.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET
};

# Claim version virtual vectors
# This option will cause the version
# virtual vectors to be claimed.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_VERSION {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #   --> 1
};

# Claim delay_us virtual vector
# This option will cause the delay_us
# virtual vector to be claimed.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US
};

# Claim data virtual vectors
# This option will cause the data virtual vectors
# to be claimed. At present there is only one, used
# by the RedBoot ethernet driver to share diag output.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA
};

# Claim comms virtual vectors
# This option will cause the communication tables
# that are part of the virtual vectors mechanism to
# be claimed. Note that doing this may cause an
# existing ROM monitor communication connection to
# be closed. For this reason, the option is disabled
# per default for normal application
# configurations.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     Requires:  !CYGSEM_HAL_VIRTUAL_VECTOR_DIAG  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE
    #     DefaultValue:  !CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    # option CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE
    #     Calculated:  CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS
};

# Do diagnostic IO via virtual vector table
# All HAL IO happens via the virtual vector table / comm
# tables when those tables are supported by the HAL.
# If so desired, the low-level IO functions can
# still be provided by the RAM application by
# enabling the CLAIM_COMMS option.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_DIAG {
    # Calculated value: 1
    # Flavor: bool
    # Current value: 1

    # The following properties are affected by this value
    # component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN
    #     ActiveIf:  CYGPKG_HAL_ARM || CYGPKG_HAL_POWERPC_MPC8xx  || CYGPKG_HAL_V85X_V850 || CYGSEM_HAL_VIRTUAL_VECTOR_DIAG 
    # option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     Requires:  !CYGSEM_HAL_VIRTUAL_VECTOR_DIAG  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
};

# <
# Behave as a ROM monitor
# Enable this option if this program is to be used as a ROM monitor,
# i.e. applications will be loaded into RAM on the board, and this
# ROM monitor may process exceptions or interrupts generated from the
# application. This enables features such as utilizing a separate
# interrupt stack when exceptions are generated.
#
cdl_option CYGSEM_HAL_ROM_MONITOR {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  CYG_HAL_STARTUP == "ROM" || CYG_HAL_STARTUP == "ROMRAM" 
    #     CYG_HAL_STARTUP == RAM
    #     CYG_HAL_STARTUP == RAM
    #   --> 0

    # The following properties are affected by this value
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: CYGSEM_HAL_ROM_MONITOR
    # option CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
    #     ActiveIf:  CYGSEM_HAL_ROM_MONITOR || CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT 
};

# Work with a ROM monitor
# Allow coexistence with ROM monitor (CygMon or GDB stubs) by
# only initializing interrupt vectors on startup, thus leaving
# exception handling to the ROM monitor.
#
cdl_option CYGSEM_HAL_USE_ROM_MONITOR {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  (CYG_HAL_STARTUP == "RAM" &&
    #     				!CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS &&
    #     				!CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED &&
    #     				!CYGSEM_HAL_MICROBLAZE_COPY_VECTORS) ? 1 : 0 
    #     CYG_HAL_STARTUP == RAM
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #     CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED == 0
    #     CYGSEM_HAL_MICROBLAZE_COPY_VECTORS == 1
    #   --> 0
    # Requires:  CYG_HAL_STARTUP == "RAM" 
    #     CYG_HAL_STARTUP == RAM
    #   --> 1
    # Requires: ! CYGSEM_HAL_MICROBLAZE_COPY_VECTORS
    #     CYGSEM_HAL_MICROBLAZE_COPY_VECTORS == 1
    #   --> 0
    # Requires: ! CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #   --> 0
    # Requires: ! CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED
    #     CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_MICROBLAZE_COPY_VECTORS
    #     Requires: ! CYGSEM_HAL_USE_ROM_MONITOR
    # option CYGHWR_HAL_MICROBLAZE_NEED_VECTORS
    #     Calculated:  ((CYGHWR_HAL_MICROBLAZE_FORCE_VECTORS ||
    #                            CYG_HAL_STARTUP != "RAM" ||
    #                            CYGSEM_HAL_MICROBLAZE_COPY_VECTORS) &&
    #                           ! CYGSEM_HAL_USE_ROM_MONITOR)
    #                           ? 1 : 0 
    # option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     Requires: ! CYGSEM_HAL_USE_ROM_MONITOR
    # option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT
    #     ActiveIf:  CYGSEM_HAL_USE_ROM_MONITOR || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE
    #     ActiveIf: CYGSEM_HAL_USE_ROM_MONITOR
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     DefaultValue:  CYG_HAL_STARTUP != "RAM" || !CYGSEM_HAL_USE_ROM_MONITOR 
};

# <
# Platform defined I/O channels
# Platforms which provide additional I/O channels can implement
# this interface, indicating that the function plf_if_init()
# needs to be called.
#
cdl_interface CYGINT_HAL_PLF_IF_INIT {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
};

# Platform IDE I/O support
# Platforms which provide IDE controllers can implement
# this interface, indicating that IDE I/O macros are
# available.
#
cdl_interface CYGINT_HAL_PLF_IF_IDE {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
};

# Saved interrupt state required
# Components requiring access to saved interrupt state via the
# hal_saved_interrupt_state symbol should implement this
# interface.
#
cdl_interface CYGINT_HAL_COMMON_SAVED_INTERRUPT_STATE_REQUIRED {
    # Implemented by CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT, active, enabled
    # Implemented by CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT, active, disabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
};

# File I/O operations via GDB
# This option enables support for various file I/O
# operations using the GDB remote protocol to communicate
# with GDB. The operations are then performed on the
# debugging host by proxy. These operations are only
# currently available by using a system call interface
# to RedBoot. This may change in the future.
#
cdl_option CYGPKG_HAL_GDB_FILEIO {
    # This option is not active
    # ActiveIf constraint: CYGSEM_REDBOOT_BSP_SYSCALLS
    #     CYGSEM_REDBOOT_BSP_SYSCALLS (unknown) == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #   --> 1
};

# Build Compiler sanity checking tests
# Enabling this option causes compiler tests to be built.
#
cdl_option CYGPKG_HAL_BUILD_COMPILER_TESTS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # component CYGPKG_HAL_TESTS
    #     Calculated:   "tests/context tests/basic"
    #                           . ((!CYGINT_HAL_TESTS_NO_CACHES) ? " tests/cache" : "")
    #                           . ((CYGPKG_HAL_BUILD_COMPILER_TESTS) ? " tests/cpp1 tests/vaargs" : "")
    #                           . ((!CYGVAR_KERNEL_COUNTERS_CLOCK) ?   " tests/intr" : "") 
};

# Common HAL tests
# This option specifies the set of tests for the common HAL.
#
cdl_component CYGPKG_HAL_TESTS {
    # Calculated value:   "tests/context tests/basic"
    #                           . ((!CYGINT_HAL_TESTS_NO_CACHES) ? " tests/cache" : "")
    #                           . ((CYGPKG_HAL_BUILD_COMPILER_TESTS) ? " tests/cpp1 tests/vaargs" : "")
    #                           . ((!CYGVAR_KERNEL_COUNTERS_CLOCK) ?   " tests/intr" : "") 
    #     CYGINT_HAL_TESTS_NO_CACHES == 0
    #     CYGPKG_HAL_BUILD_COMPILER_TESTS == 0
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    # Flavor: data
    # Current_value: tests/context tests/basic tests/cache
};

# >
# Interface for cache presence
# Some architectures and/or platforms do not have caches. By
# implementing this interface, these can disable the various
# cache-related tests.
#
cdl_interface CYGINT_HAL_TESTS_NO_CACHES {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0

    # The following properties are affected by this value
    # component CYGPKG_HAL_TESTS
    #     Calculated:   "tests/context tests/basic"
    #                           . ((!CYGINT_HAL_TESTS_NO_CACHES) ? " tests/cache" : "")
    #                           . ((CYGPKG_HAL_BUILD_COMPILER_TESTS) ? " tests/cpp1 tests/vaargs" : "")
    #                           . ((!CYGVAR_KERNEL_COUNTERS_CLOCK) ?   " tests/intr" : "") 
    # option CYGPKG_KERNEL_TESTS
    #     Calculated:  
    #                     "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2" 
    #                     . ((CYGFUN_KERNEL_API_C) ? " tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0" : "")
    #                     . ((!CYGPKG_INFRA_DEBUG && !CYGPKG_KERNEL_INSTRUMENT && CYGFUN_KERNEL_API_C) ? " tests/dhrystone" : "")
    #                     . ((CYGPKG_KERNEL_SMP_SUPPORT && CYGFUN_KERNEL_API_C) ? " tests/smp" : "")
    #                     . ((!CYGINT_HAL_TESTS_NO_CACHES && CYGFUN_KERNEL_API_C) ? " tests/kcache1 tests/kcache2" : "")
    #                 
};

# <
# Microblaze architecture
# The Microblaze architecture HAL package provides generic
# support for this processor architecture. It is also
# necessary to select a specific target platform HAL
# package.
#
cdl_package CYGPKG_HAL_MICROBLAZE {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # package CYGPKG_DEVS_ETH_MICROBLAZE_EMACLITE
    #     ActiveIf: CYGPKG_HAL_MICROBLAZE
};

# >
# RESET vector jumps to startup
# Some platforms may need this for ROMRAM startup.
#
cdl_option CYGSEM_HAL_MICROBLAZE_RESET_USES_JUMP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Copy exception vectors to RAM
# Enable this option to force exception vectors to be copied
# to the vector base on startup. For RAM startup this is normally
# disabled since the vectors would already have been provided
# by the GDB stubs - but it's possible to override, thus taking
# full control of the target. For ROM startup it is desirable to
# enable this option if the vector base is set to RAM since
# accessing vectors in ROM is normally slower. But if memory is
# tight the vectors can be left in ROM.
#
cdl_option CYGSEM_HAL_MICROBLAZE_COPY_VECTORS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  (CYG_HAL_STARTUP != "RAM" ||
    #                              CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS) ? 1 : 0 
    #     CYG_HAL_STARTUP == RAM
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 1
    #   --> 1
    # Requires: ! CYGSEM_HAL_USE_ROM_MONITOR
    #     CYGSEM_HAL_USE_ROM_MONITOR == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGHWR_HAL_MICROBLAZE_NEED_VECTORS
    #     Calculated:  ((CYGHWR_HAL_MICROBLAZE_FORCE_VECTORS ||
    #                            CYG_HAL_STARTUP != "RAM" ||
    #                            CYGSEM_HAL_MICROBLAZE_COPY_VECTORS) &&
    #                           ! CYGSEM_HAL_USE_ROM_MONITOR)
    #                           ? 1 : 0 
    # option CYGSEM_HAL_USE_ROM_MONITOR
    #     DefaultValue:  (CYG_HAL_STARTUP == "RAM" &&
    #     				!CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS &&
    #     				!CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED &&
    #     				!CYGSEM_HAL_MICROBLAZE_COPY_VECTORS) ? 1 : 0 
    # option CYGSEM_HAL_USE_ROM_MONITOR
    #     Requires: ! CYGSEM_HAL_MICROBLAZE_COPY_VECTORS
};

# Exception vectors inclusion
# If eCos can rely on the target environment to provide
# eCos compatible vector code, there is no reason to include
# the additional data in application images. This option controls
# the inclusion of the vector code.
#
cdl_option CYGHWR_HAL_MICROBLAZE_NEED_VECTORS {
    # Calculated value:  ((CYGHWR_HAL_MICROBLAZE_FORCE_VECTORS ||
    #                            CYG_HAL_STARTUP != "RAM" ||
    #                            CYGSEM_HAL_MICROBLAZE_COPY_VECTORS) &&
    #                           ! CYGSEM_HAL_USE_ROM_MONITOR)
    #                           ? 1 : 0 
    #     CYGHWR_HAL_MICROBLAZE_FORCE_VECTORS (unknown) == 0
    #     CYG_HAL_STARTUP == RAM
    #     CYGSEM_HAL_MICROBLAZE_COPY_VECTORS == 1
    #     CYGSEM_HAL_USE_ROM_MONITOR == 0
    # Flavor: bool
    # Current value: 1
};

# Microblaze build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_HAL_MICROBLAZE_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the MicroBlaze HAL. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_HAL_MICROBLAZE_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the MicroBlaze HAL. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_HAL_MICROBLAZE_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Microblaze tests
# This option specifies the set of tests for the MicroBlaze HAL.
#
cdl_option CYGPKG_HAL_MICROBLAZE_TESTS {
    # Calculated value:  "" 
    # Flavor: data
    # Current_value: 
};

# <
# Linker script
#
cdl_option CYGBLD_LINKER_SCRIPT {
    # Calculated value:  "src/microblaze.ld" 
    # Flavor: data
    # Current_value: src/microblaze.ld
};

# Microblaze CPU v4.00.a variant HAL
# The Microblaze v4.0a variant HAL package provides generic support
# for this processor variant. It is also necessary to
# select a specific target platform HAL package.
#
cdl_package CYGPKG_HAL_MICROBLAZE_MB4A {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # package CYGPKG_HAL_MICROBLAZE_AVNET_S6LX9_MMU_TINY_13_1
    #     Requires: CYGPKG_HAL_MICROBLAZE_MB4A
};

# >
# ROM monitor configuration is unsupported
#
cdl_interface CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0

    # The following properties are affected by this value
    # option CYGSEM_HAL_USE_ROM_MONITOR
    #     DefaultValue:  (CYG_HAL_STARTUP == "RAM" &&
    #     				!CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS &&
    #     				!CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED &&
    #     				!CYGSEM_HAL_MICROBLAZE_COPY_VECTORS) ? 1 : 0 
    # option CYGSEM_HAL_USE_ROM_MONITOR
    #     Requires: ! CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED
};

# Variant FPU support
# Allow using FPU but FPU must be enabled in Microblaze options.
#
cdl_option CYGHWR_HAL_MICROBLAZE_FPU {
    # This option is not active
    # ActiveIf constraint: MON_CPU_FPU
    #     MON_CPU_FPU (unknown) == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Variant use HW exception registers
# Allow HW exception registers. Any HW exception must be enabled in Microblaze options.
#
cdl_option CYGHWR_HAL_MICROBLAZE_HWEXCEPTION_REGS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# Platform generic support
# Generic support.
#
cdl_package CYGPKG_HAL_MICROBLAZE_GENERIC {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # package CYGPKG_HAL_MICROBLAZE_AVNET_S6LX9_MMU_TINY_13_1
    #     Requires: CYGPKG_HAL_MICROBLAZE_GENERIC
    # package CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE
    #     ActiveIf: CYGPKG_HAL_MICROBLAZE_GENERIC
    # package CYGPKG_DEVS_ETH_MICROBLAZE_EMACLITE
    #     Requires: CYGPKG_HAL_MICROBLAZE_GENERIC
};

# >
# Serial port of UART Lite
#
cdl_option CYGNUM_HAL_UARTLITE {
    # ActiveIf constraint:  MON_UARTLITE_0 == 1 
    #     MON_UARTLITE_0 == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Serial port of UART 16550
#
cdl_option CYGNUM_HAL_UART16550 {
    # This option is not active
    # ActiveIf constraint:  MON_UART16550_0 == 1 
    #     MON_UART16550_0 (unknown) == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Startup type
# This option is used to control where the application program will
# run, either from RAM or ROM (flash) memory.  ROM based applications
# must be self contained, while RAM applications will typically assume
# the existence of a debug environment, such as GDB stubs.
#
cdl_component CYG_HAL_STARTUP {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value RAM
    # value_source default
    # Default value: RAM
    # Legal values: "RAM" "ROM" "ROMRAM"

    # The following properties are affected by this value
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires:  CYG_HAL_STARTUP == "ROM" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  CYG_HAL_STARTUP == "RAM" ? "microblaze_generic_ram" :
    #                                                     "microblaze_generic_rom" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_microblaze_generic_ram.ldi>" :
    #                                                         "<pkgconf/mlt_microblaze_generic_rom.ldi>" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated:  CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_microblaze_generic_ram.h>" :
    #                                                         "<pkgconf/mlt_microblaze_generic_rom.h>" 
    # option CYGSEM_HAL_ROM_MONITOR
    #     Requires:  CYG_HAL_STARTUP == "ROM" || CYG_HAL_STARTUP == "ROMRAM" 
    # option CYGSEM_HAL_ROM_MONITOR
    #     Requires:  CYG_HAL_STARTUP == "ROM" || CYG_HAL_STARTUP == "ROMRAM" 
    # option CYGSEM_HAL_MICROBLAZE_COPY_VECTORS
    #     DefaultValue:  (CYG_HAL_STARTUP != "RAM" ||
    #                              CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS) ? 1 : 0 
    # option CYGHWR_HAL_MICROBLAZE_NEED_VECTORS
    #     Calculated:  ((CYGHWR_HAL_MICROBLAZE_FORCE_VECTORS ||
    #                            CYG_HAL_STARTUP != "RAM" ||
    #                            CYGSEM_HAL_MICROBLAZE_COPY_VECTORS) &&
    #                           ! CYGSEM_HAL_USE_ROM_MONITOR)
    #                           ? 1 : 0 
    # option CYGSEM_HAL_USE_ROM_MONITOR
    #     DefaultValue:  (CYG_HAL_STARTUP == "RAM" &&
    #     				!CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS &&
    #     				!CYGINT_HAL_USE_ROM_MONITOR_UNSUPPORTED &&
    #     				!CYGSEM_HAL_MICROBLAZE_COPY_VECTORS) ? 1 : 0 
    # option CYGSEM_HAL_USE_ROM_MONITOR
    #     Requires:  CYG_HAL_STARTUP == "RAM" 
    # option CYGSEM_HAL_INSTALL_MMU_TABLES
    #     DefaultValue:  CYG_HAL_STARTUP != "RAM" 
    # component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN
    #     DefaultValue:  (CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS  || CYG_HAL_STARTUP == "RAM") ? 1 : 0
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     DefaultValue:  CYG_HAL_STARTUP != "RAM" || !CYGSEM_HAL_USE_ROM_MONITOR 
};

# Number of communication channels on the board
#
cdl_option CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS {
    # Calculated value: 1
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
    # option CYGNUM_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL
    #     LegalValues: 0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1
    # option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL
    #     LegalValues: 0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1
};

# Debug serial port
# The board has only one serial port. This option
# chooses which port will be used to connect to a host
# running GDB.
#
cdl_option CYGNUM_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL {
    # ActiveIf constraint: CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE
    #     CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Legal values: 0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1
    #     CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS == 1
};

# Diagnostic serial port
# The board has only one serial port.  This option
# chooses which port will be used for diagnostic output.
#
cdl_option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL {
    # This option is not active
    # ActiveIf constraint: CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE
    #     CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE == 0
    #   --> 0

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Legal values: 0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1
    #     CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS == 1
};

# Baud rate for the HAL diagnostic port
# This option specifies the default baud rate (speed) for the 
# HAL diagnostic port.
#
cdl_option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_BAUD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 115200
    # value_source default
    # Default value: 115200
    # Legal values:  50 75 110 "134_5" 150 200 300 600 1200 1800 2400 3600
    #                           4800 7200 9600 14400 19200 38400 57600 115200 230400
    #             
};

# Real-time clock constants.
# Period is busclock/100.
#
cdl_component CYGNUM_HAL_RTC_CONSTANTS {
    # There is no associated value.
};

# >
# Real-time clock numerator
#
cdl_option CYGNUM_HAL_RTC_NUMERATOR {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1000000000
    # value_source default
    # Default value: 1000000000
};

# Real-time clock denominator
#
cdl_option CYGNUM_HAL_RTC_DENOMINATOR {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 100
    # value_source default
    # Default value: 100
};

# Real-time clock period
#
cdl_option CYGNUM_HAL_RTC_PERIOD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 666666
    # value_source default
    # Default value:  (MON_SYSTEM_CLK / 100) 
    #     MON_SYSTEM_CLK == 66666667
    #   --> 666666
};

# Real-time clock timer use autoreset
# This is best for precise time counting. If is autoreset true
# hal_clock_reset function do nothing if timer is running.
#
cdl_option CYGHWR_HAL_RTC_USE_AUTO_RESET {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Memory layout
#
cdl_component CYGHWR_MEMORY_LAYOUT {
    # Calculated value:  CYG_HAL_STARTUP == "RAM" ? "microblaze_generic_ram" :
    #                                                     "microblaze_generic_rom" 
    #     CYG_HAL_STARTUP == RAM
    # Flavor: data
    # Current_value: microblaze_generic_ram
};

# >
# Memory layout linker script fragment
#
cdl_option CYGHWR_MEMORY_LAYOUT_LDI {
    # Calculated value:  CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_microblaze_generic_ram.ldi>" :
    #                                                         "<pkgconf/mlt_microblaze_generic_rom.ldi>" 
    #     CYG_HAL_STARTUP == RAM
    # Flavor: data
    # Current_value: <pkgconf/mlt_microblaze_generic_ram.ldi>
};

# Memory layout header file
#
cdl_option CYGHWR_MEMORY_LAYOUT_H {
    # Calculated value:  CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_microblaze_generic_ram.h>" :
    #                                                         "<pkgconf/mlt_microblaze_generic_rom.h>" 
    #     CYG_HAL_STARTUP == RAM
    # Flavor: data
    # Current_value: <pkgconf/mlt_microblaze_generic_ram.h>
};

# <
# <
# Avnet S6LX9 MMU tiny 13.1
# Avnet S6LX9 MMU tiny 13.1 HAL package
#
cdl_package CYGPKG_HAL_MICROBLAZE_AVNET_S6LX9_MMU_TINY_13_1 {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires: CYGPKG_HAL_MICROBLAZE_MB4A
    #     CYGPKG_HAL_MICROBLAZE_MB4A == current
    #   --> 1
    # Requires: CYGPKG_HAL_MICROBLAZE_GENERIC
    #     CYGPKG_HAL_MICROBLAZE_GENERIC == current
    #   --> 1
};

# >
# SYSTEM_CLK IP core support
# System CLK.
#
cdl_option MON_SYSTEM_CLK {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 66666667
    # value_source default
    # Default value: 66666667

    # The following properties are affected by this value
    # option CYGNUM_HAL_RTC_PERIOD
    #     DefaultValue:  (MON_SYSTEM_CLK / 100) 
};

# UARTLITE_0 IP core support
# Enabling this option adds support to USB_Uart.
#
cdl_option MON_UARTLITE_0 {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGNUM_HAL_UARTLITE
    #     ActiveIf:  MON_UARTLITE_0 == 1 
    # package CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE
    #     ActiveIf: MON_UARTLITE_0
};

# EMACLITE_0 IP core support
# Enabling this option adds support to Ethernet_MAC.
#
cdl_option MON_EMACLITE_0 {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # package CYGPKG_DEVS_ETH_MICROBLAZE_EMACLITE
    #     ActiveIf: MON_EMACLITE_0
};

# SPI_0 IP core support
# Enabling this option adds support to SPI_FLASH.
#
cdl_option MON_SPI_0 {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# <
# <
# I/O sub-system
# doc: ref/io.html
# The eCos system is supplied with a number of different
# device drivers.  This option enables the basic I/O system
# support which is the basis for all drivers.
#
cdl_package CYGPKG_IO {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires: CYGPKG_ERROR
    #     CYGPKG_ERROR == current
    #   --> 1

    # The following properties are affected by this value
    # component CYGPKG_LWIP_ETH
    #     Requires: CYGPKG_IO
};

# >
# Debug I/O sub-system
# This option enables verbose messages to be displayed on the
# system 'diag' device during I/O system initialization.
#
cdl_option CYGDBG_IO_INIT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Basic support for file based I/O
# This option control support for simple file I/O primitives. It is only
# present if the FILEIO package is not included.
#
cdl_component CYGPKG_IO_FILE_SUPPORT {
    # ActiveIf constraint: !CYGPKG_IO_FILEIO
    #     CYGPKG_IO_FILEIO (unknown) == 0
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Number of open files
# This option controls the number of open files.
#
cdl_option CYGPKG_IO_NFILE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 16
    # value_source default
    # Default value: 16
};

# <
# Common ethernet support
# doc: ref/io-eth-drv-generic.html
# Platform independent ethernet drivers
#
cdl_package CYGPKG_IO_ETH_DRIVERS {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # package CYGPKG_DEVS_ETH_MICROBLAZE_EMACLITE
    #     ActiveIf: CYGPKG_IO_ETH_DRIVERS
    # component CYGPKG_LWIP_ETH
    #     Requires: CYGPKG_IO_ETH_DRIVERS
    # component CYGPKG_LWIP_ETH
    #     DefaultValue: CYGPKG_IO_ETH_DRIVERS
};

# >
# Network drivers
#
cdl_interface CYGHWR_NET_DRIVERS {
    # Implemented by CYGPKG_DEVS_ETH_MICROBLAZE_EMACLITE, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
};

# Driver supports multicast addressing
# This interface defines whether or not a driver can handle
# requests for multicast addressing.
#
cdl_interface CYGINT_IO_ETH_MULTICAST {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
};

# Support printing driver debug information
# Selecting this option will include code to allow the driver to
# print lots of information on diagnostic output such as full
# packet dumps.
#
cdl_component CYGDBG_IO_ETH_DRIVERS_DEBUG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Driver debug output verbosity
# The value of this option indicates the default verbosity
# level of debugging output. 0 means no debugging output
# is made by default. Higher values indicate higher verbosity.
# The verbosity level may also be changed at run time by
# changing the variable cyg_io_eth_net_debug.
#
cdl_option CYGDBG_IO_ETH_DRIVERS_DEBUG_VERBOSITY {
    # This option is not active
    # The parent CYGDBG_IO_ETH_DRIVERS_DEBUG is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# Size of scatter-gather I/O lists
# A scatter-gather list is used to pass requests to/from
# the physical device driver.  This list can typically be
# small, as the data is normally already packed into reasonable
# chunks.
#
cdl_option CYGNUM_IO_ETH_DRIVERS_SG_LIST_SIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 32
    # value_source default
    # Default value: 32
};

# Support for standard eCos TCP/IP stack.
#
cdl_component CYGPKG_IO_ETH_DRIVERS_NET {
    # This option is not active
    # ActiveIf constraint: CYGPKG_NET
    #     CYGPKG_NET (unknown) == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGINT_ISO_STRING_STRFUNCS
    #     CYGINT_ISO_STRING_STRFUNCS == 1
    #   --> 1
};

# >
# Warn when there are no more mbufs
# Warnings about running out of mbufs are printed to the
# diagnostic output channel via diag_printf() if this option
# is enabled.  Mbufs are the network stack's basic dynamic
# memory objects that hold all packets in transit; running
# out is bad for performance but not fatal, not a crash.
# You might want to turn off the warnings to preserve realtime
# properties of the system even in extremis.
#
cdl_component CYGPKG_IO_ETH_DRIVERS_WARN_NO_MBUFS {
    # This option is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_NET is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Simulate network failures for testing
# This package contains a suite of simulated failure modes
# for the ethernet device layer, including dropping and/or
# corrupting received packets, dropping packets queued for
# transmission, and simulating a complete network break.
# It requires the kernel as a source of time information.
#
cdl_component CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES {
    # This option is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_NET is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Drop incoming packets (percentage)
#
cdl_option CYGPKG_IO_ETH_DRIVERS_SIMULATE_DROP_RX {
    # This option is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES is disabled

    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 1 10
    # value_source default
    # Default value: 1 10
    # Legal values: 10 50 80
};

# Corrupt incoming packets (percentage)
#
cdl_option CYGPKG_IO_ETH_DRIVERS_SIMULATE_CORRUPT_RX {
    # This option is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES is disabled

    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 1 10
    # value_source default
    # Default value: 1 10
    # Legal values: 10 50 80
};

# Drop outgoing packets (percentage)
#
cdl_option CYGPKG_IO_ETH_DRIVERS_SIMULATE_DROP_TX {
    # This option is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES is disabled

    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 1 10
    # value_source default
    # Default value: 1 10
    # Legal values: 10 50 80
};

# Simulate a line cut from time to time
# This option causes the system to drop all packets for a
# short random period (10s of seconds), and then act
# normally for up to 4 times that long.  This simulates your
# sysadmin fiddling with plugs in the network switch
# cupboard.
#
cdl_option CYGPKG_IO_ETH_DRIVERS_SIMULATE_LINE_CUT {
    # This option is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# <
# Support for stand-alone network stack.
#
cdl_component CYGPKG_IO_ETH_DRIVERS_STAND_ALONE {
    # This option is not active
    # ActiveIf constraint:  !CYGPKG_NET && !CYGPKG_NET_LWIP 
    #     CYGPKG_NET (unknown) == 0
    #     CYGPKG_NET_LWIP == current
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # The inferred value should not be edited directly.
    inferred_value 0
    # value_source inferred
    # Default value: 1
    # Requires: CYGINT_ISO_STRING_MEMFUNCS
    #     CYGINT_ISO_STRING_MEMFUNCS == 1
    #   --> 1
};

# >
# Pass packets to an alternate stack
# Define this to allow packets seen by this layer to be
# passed on to the previous logical layer, i.e. when
# stand-alone processing replaces system (eCos) processing.
#
cdl_option CYGSEM_IO_ETH_DRIVERS_PASS_PACKETS {
    # This option is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_STAND_ALONE is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_STAND_ALONE is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  0 != CYGPKG_REDBOOT_NETWORKING 
    #     CYGPKG_REDBOOT_NETWORKING (unknown) == 0
    #   --> 0
};

# Number of [network] buffers
# This option is used to allocate space to buffer incoming network
# packets.  These buffers are used to hold data until they can be
# logically processed by higher layers.
#
cdl_option CYGNUM_IO_ETH_DRIVERS_NUM_PKT {
    # This option is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_STAND_ALONE is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_STAND_ALONE is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 4
    # value_source default
    # Default value: 4
    # Legal values: 2 to 32
};

# Show driver warnings
# Selecting this option will allows the stand-alone ethernet driver
# to display warnings on the system console when incoming network
# packets are being discarded due to lack of buffer space.
#
cdl_option CYGSEM_IO_ETH_DRIVERS_WARN {
    # This option is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_STAND_ALONE is not active
    # The parent CYGPKG_IO_ETH_DRIVERS_STAND_ALONE is disabled
    # ActiveIf constraint: CYGPKG_REDBOOT
    #     CYGPKG_REDBOOT (unknown) == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# Support for lwIP network stack.
#
cdl_component CYGPKG_IO_ETH_DRIVERS_LWIP {
    # ActiveIf constraint: CYGPKG_NET_LWIP
    #     CYGPKG_NET_LWIP == current
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: !CYGPKG_NET
    #     CYGPKG_NET (unknown) == 0
    #   --> 1
};

# Interrupt support required
# This interface is used to indicate to the low
# level device drivers that interrupt driven operation
# is required by higher layers.
#
cdl_interface CYGINT_IO_ETH_INT_SUPPORT_REQUIRED {
    # Implemented by CYGPKG_IO_ETH_DRIVERS_NET, inactive, enabled
    # Implemented by CYGPKG_IO_ETH_DRIVERS_LWIP, active, enabled
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 1

    # The following properties are affected by this value
};

# Common ethernet support build options
#
cdl_component CYGPKG_IO_ETH_DRIVERS_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the common ethernet support package. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_IO_ETH_DRIVERS_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "-D_KERNEL -D__ECOS"
    # value_source default
    # Default value: "-D_KERNEL -D__ECOS"
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the common ethernet support package. These flags
# are removed from the set of global flags if present.
#
cdl_option CYGPKG_IO_ETH_DRIVERS_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# <
# Emaclite support
# Emaclite support.
#
cdl_package CYGPKG_DEVS_ETH_MICROBLAZE_EMACLITE {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # ActiveIf constraint: CYGPKG_IO_ETH_DRIVERS
    #     CYGPKG_IO_ETH_DRIVERS == current
    #   --> 1
    # ActiveIf constraint: CYGPKG_HAL_MICROBLAZE
    #     CYGPKG_HAL_MICROBLAZE == current
    #   --> 1
    # ActiveIf constraint: MON_EMACLITE_0
    #     MON_EMACLITE_0 == 1
    #   --> 1

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires: CYGPKG_HAL_MICROBLAZE_GENERIC
    #     CYGPKG_HAL_MICROBLAZE_GENERIC == current
    #   --> 1
};

# >
# Emaclite build options
#
cdl_component CYGPKG_DEVS_ETH_MICROBLAZE_EMACLITE_OPTIONS {
    # There is no associated value.
};

# >
# Emaclite compiler flags
# This option modifies the set of compiler flags for
# building the Spartan3E Starter Kit ethernet driver package. 
# These flags are used in addition to the set of global 
# flags.
#
cdl_option CYGPKG_DEVS_ETH_MICROBLAZE_EMACLITE_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "-D_KERNEL -D__ECOS"
    # value_source default
    # Default value: "-D_KERNEL -D__ECOS"
};

# <
# <
# <
# <
# Infrastructure
# Common types and useful macros.
# Tracing and assertion facilities.
# Package startup options.
#
cdl_package CYGPKG_INFRA {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # package CYGPKG_HAL
    #     Requires: CYGPKG_INFRA
};

# >
# Asserts & Tracing
# The eCos source code contains a significant amount of
# internal debugging support, in the form of assertions and
# tracing.
# Assertions check at runtime that various conditions are as
# expected; if not, execution is halted.
# Tracing takes the form of text messages that are output
# whenever certain events occur, or whenever functions are
# called or return.
# The most important property of these checks and messages is
# that they are not required for the program to run.
# It is prudent to develop software with assertions enabled,
# but disable them when making a product release, thus
# removing the overhead of that checking.
# It is possible to enable assertions and tracing
# independently.
# There are also options controlling the exact behaviour of
# the assertion and tracing facilities, thus giving users
# finer control over the code and data size requirements.
#
cdl_component CYGPKG_INFRA_DEBUG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGNUM_INFRA_EMPTY_DELETE_THRESHOLD
    #     ActiveIf: CYGPKG_INFRA_DEBUG
    # component CYGFUN_KERNEL_THREADS_STACK_CHECKING
    #     ActiveIf: CYGPKG_INFRA_DEBUG
    # component CYGFUN_KERNEL_THREADS_STACK_MEASUREMENT
    #     DefaultValue:  0 != CYGPKG_INFRA_DEBUG 
    # option CYGPKG_KERNEL_TESTS
    #     Calculated:  
    #                     "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2" 
    #                     . ((CYGFUN_KERNEL_API_C) ? " tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0" : "")
    #                     . ((!CYGPKG_INFRA_DEBUG && !CYGPKG_KERNEL_INSTRUMENT && CYGFUN_KERNEL_API_C) ? " tests/dhrystone" : "")
    #                     . ((CYGPKG_KERNEL_SMP_SUPPORT && CYGFUN_KERNEL_API_C) ? " tests/smp" : "")
    #                     . ((!CYGINT_HAL_TESTS_NO_CACHES && CYGFUN_KERNEL_API_C) ? " tests/kcache1 tests/kcache2" : "")
    #                 
};

# >
# Use asserts
# If this option is defined, asserts in the code are tested.
# Assert functions (CYG_ASSERT()) are defined in
# 'include/cyg/infra/cyg_ass.h' within the 'install' tree.
# If it is not defined, these result in no additional
# object code and no checking of the asserted conditions.
#
cdl_component CYGDBG_USE_ASSERTS {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires:  1 == CYGINT_INFRA_DEBUG_TRACE_IMPL 
    #     CYGINT_INFRA_DEBUG_TRACE_IMPL == 0
    #   --> 0

    # The following properties are affected by this value
    # component CYGFUN_KERNEL_THREADS_STACK_CHECKING
    #     ActiveIf: CYGDBG_USE_ASSERTS
    # option CYGDBG_MEMALLOC_ALLOCATOR_DLMALLOC_DEBUG
    #     Requires: CYGDBG_USE_ASSERTS
    # option CYGDBG_MEMALLOC_ALLOCATOR_DLMALLOC_DEBUG
    #     DefaultValue:  0 != CYGDBG_USE_ASSERTS 
};

# >
# Preconditions
# This option allows individual control of preconditions.
# A precondition is one type of assert, which it is
# useful to control separately from more general asserts.
# The function is CYG_PRECONDITION(condition,msg).
#
cdl_option CYGDBG_INFRA_DEBUG_PRECONDITIONS {
    # This option is not active
    # The parent CYGDBG_USE_ASSERTS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Postconditions
# This option allows individual control of postconditions.
# A postcondition is one type of assert, which it is
# useful to control separately from more general asserts.
# The function is CYG_POSTCONDITION(condition,msg).
#
cdl_option CYGDBG_INFRA_DEBUG_POSTCONDITIONS {
    # This option is not active
    # The parent CYGDBG_USE_ASSERTS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Loop invariants
# This option allows individual control of loop invariants.
# A loop invariant is one type of assert, which it is
# useful to control separately from more general asserts,
# particularly since a loop invariant is typically evaluated
# a great many times when used correctly.
# The function is CYG_LOOP_INVARIANT(condition,msg).
#
cdl_option CYGDBG_INFRA_DEBUG_LOOP_INVARIANTS {
    # This option is not active
    # The parent CYGDBG_USE_ASSERTS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Use assert text
# All assertions within eCos contain a text message
# which should give some information about the condition
# being tested.
# These text messages will end up being embedded in the
# application image and hence there is a significant penalty
# in terms of image size.
# It is possible to suppress the use of these messages by
# disabling this option.
# This results in smaller code size, but there is less
# human-readable information if an assertion actually gets
# triggered.
#
cdl_option CYGDBG_INFRA_DEBUG_ASSERT_MESSAGE {
    # This option is not active
    # The parent CYGDBG_USE_ASSERTS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Use tracing
# If this option is defined, tracing operations
# result in output or logging, depending on other options.
# This may have adverse effects on performance, if the time
# taken to output message overwhelms the available CPU
# power or output bandwidth.
# Trace functions (CYG_TRACE()) are defined in
# 'include/cyg/infra/cyg_trac.h' within the 'install' tree.
# If it is not defined, these result in no additional
# object code and no trace information.
#
cdl_component CYGDBG_USE_TRACING {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  1 == CYGINT_INFRA_DEBUG_TRACE_IMPL 
    #     CYGINT_INFRA_DEBUG_TRACE_IMPL == 0
    #   --> 0

    # The following properties are affected by this value
    # option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE
    #     ActiveIf: CYGDBG_USE_TRACING
    # option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_WRAP
    #     ActiveIf: CYGDBG_USE_TRACING
    # option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_HALT
    #     ActiveIf: CYGDBG_USE_TRACING
    # option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT
    #     ActiveIf: CYGDBG_USE_TRACING
    # option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT_ON_ASSERT
    #     ActiveIf: CYGDBG_USE_TRACING
    # option CYGDBG_KERNEL_TRACE_TIMESLICE
    #     ActiveIf: CYGDBG_USE_TRACING
};

# >
# Trace function reports
# This option allows individual control of
# function entry/exit tracing, independent of
# more general tracing output.
# This may be useful to remove clutter from a
# trace log.
#
cdl_option CYGDBG_INFRA_DEBUG_FUNCTION_REPORTS {
    # This option is not active
    # The parent CYGDBG_USE_TRACING is not active
    # The parent CYGDBG_USE_TRACING is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Use trace text
# All trace calls within eCos contain a text message
# which should give some information about the circumstances.
# These text messages will end up being embedded in the
# application image and hence there is a significant penalty
# in terms of image size.
# It is possible to suppress the use of these messages by
# disabling this option.
# This results in smaller code size, but there is less
# human-readable information available in the trace output,
# possibly only filenames and line numbers.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_MESSAGE {
    # This option is not active
    # The parent CYGDBG_USE_TRACING is not active
    # The parent CYGDBG_USE_TRACING is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Trace output implementations
#
cdl_interface CYGINT_INFRA_DEBUG_TRACE_IMPL {
    # Implemented by CYGDBG_INFRA_DEBUG_TRACE_ASSERT_NULL, inactive, disabled
    # Implemented by CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE, inactive, disabled
    # Implemented by CYGDBG_INFRA_DEBUG_TRACE_ASSERT_FANCY, inactive, disabled
    # Implemented by CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER, inactive, enabled
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0

    # The following properties are affected by this value
    # component CYGDBG_USE_ASSERTS
    #     Requires:  1 == CYGINT_INFRA_DEBUG_TRACE_IMPL 
    # component CYGDBG_USE_TRACING
    #     Requires:  1 == CYGINT_INFRA_DEBUG_TRACE_IMPL 
};

# Null output
# A null output module which is useful when
# debugging interactively; the output routines
# can be breakpointed rather than have them actually
# 'print' something.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_NULL {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Simple output
# An output module which produces simple output
# from tracing and assertion events.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_TRACE_TIMESLICE
    #     Requires: !CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE
};

# Fancy output
# An output module which produces fancy output
# from tracing and assertion events.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_FANCY {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_TRACE_TIMESLICE
    #     Requires: !CYGDBG_INFRA_DEBUG_TRACE_ASSERT_FANCY
};

# Buffered tracing
# An output module which buffers output
# from tracing and assertion events. The stored
# messages are output when an assert fires, or
# CYG_TRACE_PRINT() (defined in <cyg/infra/cyg_trac.h>)
# is called.
# Of course, there will only be stored messages
# if tracing per se (CYGDBG_USE_TRACING)
# is enabled above.
#
cdl_component CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Trace buffer size
# The size of the trace buffer. This counts the number
# of trace records stored. When the buffer fills it
# either wraps, stops recording, or generates output.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE {
    # This option is not active
    # The parent CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 32
    # value_source default
    # Default value: 32
    # Legal values: 5 to 65535
};

# Wrap trace buffer when full
# When the trace buffer has filled with records it
# starts again at the beginning. Hence only the last
# CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE messages will
# be recorded.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_WRAP {
    # This option is not active
    # The parent CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Halt trace buffer when full
# When the trace buffer has filled with records it
# stops recording. Hence only the first
# CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE messages will
# be recorded.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_HALT {
    # This option is not active
    # The parent CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Print trace buffer when full
# When the trace buffer has filled with records it
# prints the contents of the buffer. The buffer is then
# emptied and the system continues.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT {
    # This option is not active
    # The parent CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Print trace buffer on assert fail
# When an assertion fails the trace buffer will be 
# printed to the default diagnostic device.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT_ON_ASSERT {
    # This option is not active
    # The parent CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Use function names
# All trace and assert calls within eCos contain a
# reference to the builtin macro '__PRETTY_FUNCTION__',
# which evaluates to a string containing
# the name of the current function.
# This is useful when reading a trace log.
# It is possible to suppress the use of the function name
# by disabling this option.
# This results in smaller code size, but there is less
# human-readable information available in the trace output,
# possibly only filenames and line numbers.
#
cdl_option CYGDBG_INFRA_DEBUG_FUNCTION_PSEUDOMACRO {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Startup options
# Some packages require a startup routine to be called.
# This can be carried out by application code, by supplying
# a routine called cyg_package_start() which calls the
# appropriate package startup routine(s).
# Alternatively, this routine can be constructed automatically
# and configured to call the startup routines of your choice.
#
cdl_component CYGPKG_INFRA_STARTUP {
    # There is no associated value.
};

# >
# Start uITRON subsystem
# Generate a call to initialize the
# uITRON compatibility subsystem
# within the system version of cyg_package_start().
# This enables compatibility with uITRON.
# You must configure uITRON with the correct tasks before
# starting the uItron subsystem.
# If this is disabled, and you want to use uITRON,
# you must call cyg_uitron_start() from your own
# cyg_package_start() or cyg_userstart().
#
cdl_option CYGSEM_START_UITRON_COMPATIBILITY {
    # This option is not active
    # ActiveIf constraint: CYGPKG_UITRON
    #     CYGPKG_UITRON (unknown) == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGPKG_UITRON
    #     CYGPKG_UITRON (unknown) == 0
    #   --> 0
};

# <
# Smaller slower memcpy()
# Enabling this option causes the implementation of
# the standard memcpy() routine to reduce code
# size at the expense of execution speed. This
# option is automatically enabled with the use of
# the -Os option to the compiler. Also note that
# the compiler will try to use its own builtin
# version of memcpy() if possible, ignoring the
# implementation in this package, unless given
# the -fno-builtin compiler option.
#
cdl_option CYGIMP_INFRA_PREFER_SMALL_TO_FAST_MEMCPY {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Smaller slower memset()
# Enabling this option causes the implementation of
# the standard memset() routine to reduce code
# size at the expense of execution speed. This
# option is automatically enabled with the use of
# the -Os option to the compiler. Also note that
# the compiler will try to use its own builtin
# version of memset() if possible, ignoring the
# implementation in this package, unless given
# the -fno-builtin compiler option.
#
cdl_option CYGIMP_INFRA_PREFER_SMALL_TO_FAST_MEMSET {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Provide empty C++ delete functions
# To deal with virtual destructors, where the correct delete()
# function must be called for the derived class in question, the
# underlying delete is called when needed, from destructors.  This
# is regardless of whether the destructor is called by delete itself.
# So there is a reference to delete() from all destructors.  The
# default builtin delete() attempts to call free() if there is
# one defined.  So, if you have destructors, and you have free(),
# as in malloc() and free(), any destructor counts as a reference
# to free().  So the dynamic memory allocation code is linked
# in regardless of whether it gets explicitly called. This
# increases code and data size needlessly.
# To defeat this undesirable behaviour, we define empty versions
# of delete and delete[].  But doing this prevents proper use
# of dynamic memory in C++ programs via C++'s new and delete
# operators.
# Therefore, this option is provided
# for explicitly disabling the provision of these empty functions,
# so that new and delete can be used, if that is what is required.
#
cdl_option CYGFUN_INFRA_EMPTY_DELETE_FUNCTIONS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Threshold for valid number of delete calls
# Some users don't know about the empty delete function and then
# wonder why their C++ classes are leaking memory. If
# INFRA_DEBUG is enabled we keep a counter for the number of
# times delete is called. If it goes above this threshold we throw
# an assertion failure. This should point heavy users of
# delete in the right direction without upsetting those who want
# an empty delete function. 
#
cdl_option CYGNUM_INFRA_EMPTY_DELETE_THRESHOLD {
    # This option is not active
    # ActiveIf constraint: CYGPKG_INFRA_DEBUG
    #     CYGPKG_INFRA_DEBUG == 0
    #   --> 0

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 100
    # value_source default
    # Default value: 100
};

# Provide dummy abort() function
# This option controls the inclusion of a dummy abort() function.
# Parts of the C and C++ compiler runtime systems contain references
# to abort(), particulary in the C++ exception handling code. It is
# not possible to eliminate these references, so this dummy function
# in included to satisfy them. It is not expected that this function
# will ever be called, so its current behaviour is to simply loop.
#
cdl_option CYGFUN_INFRA_DUMMY_ABORT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGINT_ISO_EXIT == 0 
    #     CYGINT_ISO_EXIT == 0
    #   --> 1
    # Requires: !CYGINT_ISO_EXIT
    #     CYGINT_ISO_EXIT == 0
    #   --> 1
};

# Reset platform at end of test case execution
# If this option is set then test case programs will reset the platform
# when they terminate, as opposed to the default which is to just hang
# in a loop.
#
cdl_option CYGSEM_INFRA_RESET_ON_TEST_EXIT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Provide dummy strlen() function
# This option controls the inclusion of a dummy strlen() function.
# Parts of the C and C++ compiler runtime systems contain references
# to strlen(), particulary in the C++ exception handling code. It is
# not possible to eliminate these references, so this dummy function
# in included to satisfy them. While it is not expected that this function
# will ever be called, it is functional but uses the simplest, smallest
# algorithm. There is a faster version of strlen() in the C library.
#
cdl_option CYGFUN_INFRA_DUMMY_STRLEN {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  CYGINT_ISO_STRING_STRFUNCS == 0 
    #     CYGINT_ISO_STRING_STRFUNCS == 1
    #   --> 0
    # Requires: !CYGINT_ISO_STRING_STRFUNCS
    #     CYGINT_ISO_STRING_STRFUNCS == 1
    #   --> 0
};

# Make all compiler warnings show as errors
# Enabling this option will cause all compiler warnings to show
# as errors and bring the library build to a halt. This is used
# to ensure that the code base is warning free, and thus ensure
# that newly introduced warnings stand out and get fixed before
# they show up as weird run-time behavior.
#
cdl_option CYGBLD_INFRA_CFLAGS_WARNINGS_AS_ERRORS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  is_substr(CYGBLD_GLOBAL_CFLAGS, " -Werror") 
    #     CYGBLD_GLOBAL_CFLAGS == "-Wall -Wpointer-arith -Wstrict-prototypes -Wundef -Woverloaded-virtual -Wno-write-strings -D__LITTLE_ENDIAN__ -fmessage-length=0 -mlittle-endian -mxl-barrel-shift -mno-xl-soft-mul  -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -I. -I\$(PREFIX)/include/cyg/hal/ "
    #   --> 0
};

# Make compiler and assembler communicate by pipe
# Enabling this option will cause the compiler to feed the
# assembly output the the assembler via a pipe instead of
# via a temporary file. This normally reduces the build
# time.
#
cdl_option CYGBLD_INFRA_CFLAGS_PIPE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  is_substr(CYGBLD_GLOBAL_CFLAGS, " -pipe") 
    #     CYGBLD_GLOBAL_CFLAGS == "-Wall -Wpointer-arith -Wstrict-prototypes -Wundef -Woverloaded-virtual -Wno-write-strings -D__LITTLE_ENDIAN__ -fmessage-length=0 -mlittle-endian -mxl-barrel-shift -mno-xl-soft-mul  -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -I. -I\$(PREFIX)/include/cyg/hal/ "
    #   --> 0
};

# Infra build options
# Package specific build options including control over
# compiler flags used only in building this package.
#
cdl_component CYGPKG_INFRA_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the eCos infra package. These flags are used
# in addition to the set of global flags.
#
cdl_option CYGPKG_INFRA_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the eCos infra package. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_INFRA_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed linker flags
# This option modifies the set of linker flags for
# building the eCos infra package tests. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_INFRA_LDFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value -Wl,--gc-sections
    # value_source default
    # Default value: -Wl,--gc-sections
};

# Additional linker flags
# This option modifies the set of linker flags for
# building the eCos infra package tests. These flags are added to
# the set of global flags if present.
#
cdl_option CYGPKG_INFRA_LDFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Infra package tests
#
cdl_component CYGPKG_INFRA_TESTS {
    # Calculated value:  "tests/cxxsupp tests/diag_sprintf1 tests/diag_sprintf2" 
    # Flavor: data
    # Current_value: tests/cxxsupp tests/diag_sprintf1 tests/diag_sprintf2
};

# >
# Number of times a test runs
# This option controls the number of times tests will execute their
# basic function.  Not all tests will honor this setting, but those
# that do will execute the test N times before terminating.  A value
# less than 0 indicates to run forever.
#
cdl_option CYGNUM_TESTS_RUN_COUNT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# <
# <
# eCos kernel
# doc: ref/kernel.html
# This package contains the core functionality of the eCos
# kernel. It relies on functionality provided by various HAL
# packages and by the eCos infrastructure. In turn the eCos
# kernel provides support for other packages such as the device
# drivers and the uITRON compatibility layer.
#
cdl_package CYGPKG_KERNEL {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # option CYGFUN_HAL_COMMON_KERNEL_SUPPORT
    #     Requires: CYGPKG_KERNEL
    # option CYGFUN_HAL_COMMON_KERNEL_SUPPORT
    #     DefaultValue: CYGPKG_KERNEL
    # option CYGNUM_HAL_COMMON_INTERRUPTS_STACK_SIZE
    #     DefaultValue:  CYGPKG_KERNEL ? 4096 : 32768 
    # option CYGSEM_MEMALLOC_ALLOCATOR_FIXED_THREADAWARE
    #     ActiveIf: CYGPKG_KERNEL
    # option CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_THREADAWARE
    #     ActiveIf: CYGPKG_KERNEL
    # option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_THREADAWARE
    #     ActiveIf: CYGPKG_KERNEL
    # option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_THREADAWARE
    #     Requires: CYGPKG_KERNEL
    # option CYGSEM_MEMALLOC_ALLOCATOR_SEPMETA_THREADAWARE
    #     ActiveIf: CYGPKG_KERNEL
    # option CYGFUN_MEMALLOC_KAPI
    #     ActiveIf: CYGPKG_KERNEL
    # option CYGSEM_LIBC_STRING_PER_THREAD_STRTOK
    #     ActiveIf: CYGPKG_KERNEL
};

# >
# Kernel interrupt handling
# doc: ref/kernel-interrupts.html
# The majority of configuration options related to interrupt
# handling are in the HAL packages, since usually the code has
# to be platform-specific. There are a number of options
# provided within the kernel related to slightly higher-level
# concepts, for example Delayed Service Routines.
#
cdl_component CYGPKG_KERNEL_INTERRUPTS {
    # There is no associated value.

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_INSTRUMENT_INTR
    #     ActiveIf: CYGPKG_KERNEL_INTERRUPTS
};

# >
# Use delayed service routines (DSRs)
# In eCos the recommended way to handle device interrupts is to
# do a minimum amount of work inside the low level interrupt
# handler itself, and instead do as much as possible in a
# Delayed Service Routine or DSR. If an application does not
# make use of DSRs directly or indirectly then it is possible
# to disable the DSR support completely, which reduces the
# overheads of context switches and interrupt handling. Note
# that the kernel real-time clock makes use of DSRs, as do many
# of the device drivers. 
#
cdl_component CYGIMP_KERNEL_INTERRUPTS_DSRS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGVAR_KERNEL_COUNTERS_CLOCK
    #     Requires: CYGIMP_KERNEL_INTERRUPTS_DSRS
};

# >
#
cdl_interface CYGINT_KERNEL_INTERRUPTS_DSRS {
    # Implemented by CYGIMP_KERNEL_INTERRUPTS_DSRS_LIST, active, enabled
    # Implemented by CYGIMP_KERNEL_INTERRUPTS_DSRS_TABLE, active, disabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires: 1 == CYGINT_KERNEL_INTERRUPTS_DSRS
    #     CYGINT_KERNEL_INTERRUPTS_DSRS == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_KERNEL_INTERRUPTS_DSRS
    #     Requires: 1 == CYGINT_KERNEL_INTERRUPTS_DSRS
};

# Use linked lists for DSRs
# When DSR support is enabled the kernel must keep track of all
# the DSRs that are pending. This information can be kept in a
# fixed-size table or in a linked list. The list implementation
# requires that the kernel disable interrupts for a very short
# period of time outside interrupt handlers, but there is no
# possibility of a table overflow occurring.
#
cdl_component CYGIMP_KERNEL_INTERRUPTS_DSRS_LIST {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Schedule DSRs in FIFO order
# When this option is set, DSRs are scheduled
# in the natural FIFO (first in, first out) order,
# otherwise they are scheduled in LIFO (last in, first
# out) order. Applications should not rely on any
# particular order of scheduling of DSRs. LIFO
# scheduling is kept for backward compatibility only and
# is not recommended as it may lead to high (up to 2
# times higher then FIFO) IRQ-to-DSR latencies at some
# (typically rare) conditions. If unsure, leave this set.
#
cdl_option CYGSEM_KERNEL_INTERRUPTS_DSRS_LIST_FIFO {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Use fixed-size table for DSRs
# When DSR support is enabled the kernel must keep track of all
# the DSRs that are pending. This information can be kept in a
# fixed-size table or in a linked list. The table
# implementation involves a very small risk of overflow at
# run-time if a given interrupt source is able to have more
# than one pending DSR. However it has the advantage that
# the kernel does not need to disable interrupts outside
# interrupt handlers.
#
cdl_component CYGIMP_KERNEL_INTERRUPTS_DSRS_TABLE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Number of entries in fixed-size DSR table
# When DSR support is enabled the kernel must keep track of all
# the DSRs that are pending. One approach involves a fixed-size
# table, which involves a very small risk of overflow at
# run-time. By increasing the table size it is possible to reduce
# this risk.
#
cdl_option CYGNUM_KERNEL_INTERRUPTS_DSRS_TABLE_SIZE {
    # This option is not active
    # The parent CYGIMP_KERNEL_INTERRUPTS_DSRS_TABLE is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 32
    # value_source default
    # Default value: 32
    # Legal values: 2 to 1024
};

# <
# Chain all interrupts together
# Interrupts can be attached to vectors either singly, or be
# chained together. The latter is necessary if there is no way
# of discovering which device has interrupted without
# inspecting the device itself. It can also reduce the amount
# of RAM needed for interrupt decoding tables and code.
#
cdl_option CYGIMP_KERNEL_INTERRUPTS_CHAIN {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN
    #     CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN == 0
    #   --> 0
};

# <
# <
# Exception handling
# doc: ref/kernel-exceptions.html
# In the context of the eCos kernel exceptions are unexpected
# events detected by the hardware, for example an attempt to
# execute an illegal instruction. There is no relation with
# other forms of exception, for example the catch and throw
# facilities of languages like C++. It is possible to disable
# all support for exceptions and thus save some memory.
#
cdl_component CYGPKG_KERNEL_EXCEPTIONS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGPKG_HAL_EXCEPTIONS
    #     CYGPKG_HAL_EXCEPTIONS == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGPKG_HAL_EXCEPTIONS
    #     Requires: CYGPKG_KERNEL_EXCEPTIONS
    # option CYGPKG_HAL_EXCEPTIONS
    #     DefaultValue: CYGPKG_KERNEL_EXCEPTIONS
};

# >
# Decode exception types in kernel
# On targets where several different types of exception are
# possible, for example executing an illegal instruction and
# division by zero, it is possible for the kernel to do some
# decoding of the exception type and deliver the different
# types of exception to different handlers in the application
# code. Alternatively the kernel can simply pass all
# exceptions directly to application code, leaving the
# decoding to be done by the application
#
cdl_option CYGSEM_KERNEL_EXCEPTIONS_DECODE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Use global exception handlers
# In the context of the eCos kernel exceptions are
# unexpected events detected by the hardware, for
# example an attempt to execute an illegal
# instruction. If the kernel is configured
# to support exceptions then two implementations are
# possible. The default implementation involves a single set
# of exception handlers that are in use for the entire
# system. The alternative implementation allows different
# exception handlers to be specified for each thread.
#
cdl_option CYGSEM_KERNEL_EXCEPTIONS_GLOBAL {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Kernel schedulers
# doc: ref/kernel-overview.html#KERNEL-OVERVIEW-SCHEDULERS
# The eCos kernel provides a choice of schedulers. In addition
# there are a number of configuration options to control the
# detailed behaviour of these schedulers.
#
cdl_component CYGPKG_KERNEL_SCHED {
    # There is no associated value.

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_INSTRUMENT_SCHED
    #     ActiveIf: CYGPKG_KERNEL_SCHED
};

# >
# Number of schedulers in this configuration
#
cdl_interface CYGINT_KERNEL_SCHEDULER {
    # Implemented by CYGSEM_KERNEL_SCHED_MLQUEUE, active, enabled
    # Implemented by CYGSEM_KERNEL_SCHED_BITMAP, active, disabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires: 1 == CYGINT_KERNEL_SCHEDULER
    #     CYGINT_KERNEL_SCHEDULER == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_KERNEL_SCHEDULER
    #     Requires: 1 == CYGINT_KERNEL_SCHEDULER
};

# Non-zero if the active schedule only has unique priorities
# Not all schedulers allow mutiple threads to use the same
# priority. That property is signalled via this option, allowing
# scheduler and tests to behave accordingly.
#
cdl_interface CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES {
    # Implemented by CYGSEM_KERNEL_SCHED_BITMAP, active, disabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0

    # The following properties are affected by this value
    # component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL
    #     Requires:  CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES == 0 
};

# Multi-level queue scheduler
# The multi-level queue scheduler supports multiple priority
# levels and multiple threads at each priority level.
# Preemption between priority levels is automatic. Timeslicing
# within a given priority level is controlled by a separate
# configuration option.
#
cdl_component CYGSEM_KERNEL_SCHED_MLQUEUE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGPRI_KERNEL_SCHED_IMPL_HXX
    #     Calculated:   CYGSEM_KERNEL_SCHED_BITMAP  ? "<cyg/kernel/bitmap.hxx>"  : CYGSEM_KERNEL_SCHED_MLQUEUE ? "<cyg/kernel/mlqueue.hxx>" : CYGSEM_KERNEL_SCHED_LOTTERY ? "<cyg/kernel/lottery.hxx>" : "!!!-- Configuration broken - no scheduler selected --!!!"
    # component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL
    #     ActiveIf:  CYGSEM_KERNEL_SCHED_MLQUEUE 
    # option CYGDBG_KERNEL_INSTRUMENT_MLQ
    #     ActiveIf: CYGSEM_KERNEL_SCHED_MLQUEUE
};

# >
# Output timeslices when tracing
# When tracing is enabled, output trace messages every
# timeslice. This can be quite verbose so is disabled by
# default.
#
cdl_option CYGDBG_KERNEL_TRACE_TIMESLICE {
    # This option is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: !CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE
    #     CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE == 0
    #   --> 1
    # Requires: !CYGDBG_INFRA_DEBUG_TRACE_ASSERT_FANCY
    #     CYGDBG_INFRA_DEBUG_TRACE_ASSERT_FANCY == 0
    #   --> 1
};

# <
# Bitmap scheduler
# The bitmap scheduler supports multiple priority levels but
# only one thread can exist at each priority level. This means
# that scheduling decisions are very simple and hence the
# scheduler is efficient. Preemption between priority levels is
# automatic. Timeslicing within a given priority level is
# irrelevant since there can be only one thread at each
# priority level.
#
cdl_option CYGSEM_KERNEL_SCHED_BITMAP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: !CYGPKG_KERNEL_SMP_SUPPORT
    #     CYGPKG_KERNEL_SMP_SUPPORT == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGPRI_KERNEL_SCHED_IMPL_HXX
    #     Calculated:   CYGSEM_KERNEL_SCHED_BITMAP  ? "<cyg/kernel/bitmap.hxx>"  : CYGSEM_KERNEL_SCHED_MLQUEUE ? "<cyg/kernel/mlqueue.hxx>" : CYGSEM_KERNEL_SCHED_LOTTERY ? "<cyg/kernel/lottery.hxx>" : "!!!-- Configuration broken - no scheduler selected --!!!"
    # component CYGSEM_KERNEL_SCHED_TIMESLICE
    #     Requires: !CYGSEM_KERNEL_SCHED_BITMAP
    # option CYGDBG_KERNEL_INSTRUMENT_BITMAP
    #     ActiveIf: CYGSEM_KERNEL_SCHED_BITMAP
};

# Scheduler header file
# This option sets a preprocessor symbol which names the header
# file for the selected scheduler.  It is used internally by the
# common scheduler code to include the correct header file.
#
cdl_option CYGPRI_KERNEL_SCHED_IMPL_HXX {
    # Calculated value:   CYGSEM_KERNEL_SCHED_BITMAP  ? "<cyg/kernel/bitmap.hxx>"  : CYGSEM_KERNEL_SCHED_MLQUEUE ? "<cyg/kernel/mlqueue.hxx>" : CYGSEM_KERNEL_SCHED_LOTTERY ? "<cyg/kernel/lottery.hxx>" : "!!!-- Configuration broken - no scheduler selected --!!!"
    #     CYGSEM_KERNEL_SCHED_BITMAP == 0
    #     CYGSEM_KERNEL_SCHED_MLQUEUE == 1
    #     CYGSEM_KERNEL_SCHED_LOTTERY (unknown) == 0
    # Flavor: data
    # Current_value: <cyg/kernel/mlqueue.hxx>
};

# Number of priority levels
# This option controls the number of priority levels that are
# available. For some types of scheduler including the bitmap
# scheduler this may impose an upper bound on the number of
# threads in the system. For other schedulers such as the
# mlqueue scheduler the number of threads is independent from
# the number of priority levels. Note that the lowest priority
# level is normally used only by the idle thread, although
# application threads can run at this priority if necessary.
#
cdl_component CYGNUM_KERNEL_SCHED_PRIORITIES {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 32
    # value_source default
    # Default value: 32
    # Legal values: 1 to 32

    # The following properties are affected by this value
    # option CYGIMP_IDLE_THREAD_YIELD
    #     ActiveIf: (CYGNUM_KERNEL_SCHED_PRIORITIES == 1)
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT_PRIORITY
    #     LegalValues: 0 to  CYGNUM_KERNEL_SCHED_PRIORITIES - 1 
};

# >
# Bitmap size
# This option automatically defines the size of bitmap
# used to track occupied priority levels.
#
cdl_option CYGNUM_KERNEL_SCHED_BITMAP_SIZE {
    # Calculated value: "CYGNUM_KERNEL_SCHED_PRIORITIES"
    # Flavor: data
    # Current_value: CYGNUM_KERNEL_SCHED_PRIORITIES
};

# Dequeue highest priority threads first
# With this option enabled, threads queued in a thread queue
# will be dequeued in priority order, rather than first in,
# first out (FIFO). Threads of equal priority are dequeued
# oldest first. The only exception is the scheduler run 
# queues where order is less important as each is already
# sorted by priority. Note that this makes the thread queueing
# less deterministic.
#
cdl_option CYGIMP_KERNEL_SCHED_SORTED_QUEUES {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# Scheduler timeslicing
# Some schedulers including the mlqueue scheduler support
# timeslicing. This means that the kernel will check regularly
# whether or not there is another runnable thread with the
# same priority, and if there is such a thread there will be
# an automatic context switch. Not all applications require
# timeslicing, for example because every thread performs a
# blocking operation regularly. For these applications it is
# possible to disable timeslicing, which reduces the overheads
# associated with timer interrupts.
#
cdl_component CYGSEM_KERNEL_SCHED_TIMESLICE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: !CYGSEM_KERNEL_SCHED_BITMAP
    #     CYGSEM_KERNEL_SCHED_BITMAP == 0
    #   --> 1
    # Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1
};

# >
# Number of clock ticks between timeslices
# Assuming timeslicing is enabled, how frequently should it
# take place? The value of this option corresponds to the
# number of clock ticks that should occur before a timeslice
# takes place, so increasing the value reduces the frequency
# of timeslices.
#
cdl_option CYGNUM_KERNEL_SCHED_TIMESLICE_TICKS {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 5
    # value_source default
    # Default value: 5
    # Legal values: 1 to 65535
};

# Support runtime enable of timeslice per-thread
# This option makes timslicing a per-thread runtime
# option. When enabled, threads may have timeslicing
# turned on or off dynamically. This is generally used
# by higher level APIs (such as POSIX) to implement
# differing scheduling policies.
#
cdl_option CYGSEM_KERNEL_SCHED_TIMESLICE_ENABLE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: false
    #     false (unknown) == 0
    #   --> 0
};

# <
# Enable ASR support
# This component controls support for Asynchronous Service
# Routines (ASRs). This is a function that may be called
# from the scheduler when it has just exited the scheduler
# lock. This is primarily for use by API compatibility layers.
#
cdl_component CYGSEM_KERNEL_SCHED_ASR_SUPPORT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: false
    #     false (unknown) == 0
    #   --> 0
};

# >
# Make ASR function global
# This option controls whether the ASR function is shared by
# all threads, or whether each thread may have its own ASR
# function.
#
cdl_option CYGSEM_KERNEL_SCHED_ASR_GLOBAL {
    # This option is not active
    # The parent CYGSEM_KERNEL_SCHED_ASR_SUPPORT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: true
    #     true (unknown) == 0
    #   --> 0
};

# Make ASR data global
# This option controls whether the ASR data is shared by
# all threads, or whether each thread may have its own ASR
# data. This is independent of the previous option because
# it may be useful to pass per-thread data to a shared ASR
# function.
#
cdl_option CYGSEM_KERNEL_SCHED_ASR_DATA_GLOBAL {
    # This option is not active
    # The parent CYGSEM_KERNEL_SCHED_ASR_SUPPORT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: true
    #     true (unknown) == 0
    #   --> 0
};

# <
# <
# SMP support
#
cdl_component CYGPKG_KERNEL_SMP_SUPPORT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGPKG_HAL_SMP_SUPPORT
    #     CYGPKG_HAL_SMP_SUPPORT (unknown) == 0
    #   --> 0

    # The following properties are affected by this value
    # option CYGSEM_KERNEL_SCHED_BITMAP
    #     Requires: !CYGPKG_KERNEL_SMP_SUPPORT
    # option CYGPKG_KERNEL_TESTS
    #     Calculated:  
    #                     "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2" 
    #                     . ((CYGFUN_KERNEL_API_C) ? " tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0" : "")
    #                     . ((!CYGPKG_INFRA_DEBUG && !CYGPKG_KERNEL_INSTRUMENT && CYGFUN_KERNEL_API_C) ? " tests/dhrystone" : "")
    #                     . ((CYGPKG_KERNEL_SMP_SUPPORT && CYGFUN_KERNEL_API_C) ? " tests/smp" : "")
    #                     . ((!CYGINT_HAL_TESTS_NO_CACHES && CYGFUN_KERNEL_API_C) ? " tests/kcache1 tests/kcache2" : "")
    #                 
};

# Counters and clocks
# doc: ref/kernel-counters.html
# The counter objects provided by the kernel provide an
# abstraction of the clock facility that is generally provided.
# Application code can associate alarms with counters, where an
# alarm is identified by the number of ticks until it triggers,
# the action to be taken on triggering, and whether or not the
# alarm should be repeated.
#
cdl_component CYGPKG_KERNEL_COUNTERS {
    # There is no associated value.
};

# >
# Provide real-time clock
# On all current target systems the kernel can provide a
# real-time clock. This clock serves two purposes. First it is
# necessary to support clock and alarm related functions.
# Second it is needed to implement timeslicing in some of the
# schedulers including the mlqueue scheduler. If the
# application does not require any of these facilities then it
# is possible to disable the real time clock support
# completely.
#
cdl_option CYGVAR_KERNEL_COUNTERS_CLOCK {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGIMP_KERNEL_INTERRUPTS_DSRS
    #     CYGIMP_KERNEL_INTERRUPTS_DSRS == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGSEM_KERNEL_SCHED_TIMESLICE
    #     Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    # option CYGNUM_KERNEL_COUNTERS_CLOCK_ISR_PRIORITY
    #     ActiveIf: CYGVAR_KERNEL_COUNTERS_CLOCK
    # option CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY
    #     Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    # option CYGFUN_KERNEL_THREADS_TIMER
    #     Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    # option CYGDBG_KERNEL_INSTRUMENT_CLOCK
    #     ActiveIf: CYGVAR_KERNEL_COUNTERS_CLOCK
    # option CYGDBG_KERNEL_INSTRUMENT_ALARM
    #     ActiveIf: CYGVAR_KERNEL_COUNTERS_CLOCK
    # option CYGDBG_KERNEL_INSTRUMENT_SMP
    #     ActiveIf: CYGVAR_KERNEL_COUNTERS_CLOCK
    # component CYGPKG_HAL_TESTS
    #     Calculated:   "tests/context tests/basic"
    #                           . ((!CYGINT_HAL_TESTS_NO_CACHES) ? " tests/cache" : "")
    #                           . ((CYGPKG_HAL_BUILD_COMPILER_TESTS) ? " tests/cpp1 tests/vaargs" : "")
    #                           . ((!CYGVAR_KERNEL_COUNTERS_CLOCK) ?   " tests/intr" : "") 
};

# Interrupt priority for the real-time clock
# The implementation of the kernel's real-time clock typically
# involves installing an interrupt handler on a suitable hardware
# timer. This option controls the priority level used for that
# interrupt. On most platforms the value is not important because 
# the clock ISR leaves most of the work to be done by the DSR. 
# However some processors have interrupt controllers with special
# requirements for the interrupt priorities, in which case
# application developers must be able to manipulate the clock's
# priority.
#
cdl_option CYGNUM_KERNEL_COUNTERS_CLOCK_ISR_PRIORITY {
    # ActiveIf constraint: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  is_loaded(CYGNUM_HAL_KERNEL_COUNTERS_CLOCK_ISR_DEFAULT_PRIORITY) ?
    #      	                      CYGNUM_HAL_KERNEL_COUNTERS_CLOCK_ISR_DEFAULT_PRIORITY : 1 
    #     CYGNUM_HAL_KERNEL_COUNTERS_CLOCK_ISR_DEFAULT_PRIORITY (unknown) == 0
    #     CYGNUM_HAL_KERNEL_COUNTERS_CLOCK_ISR_DEFAULT_PRIORITY (unknown) == 0
    #   --> 1
};

#
cdl_interface CYGINT_KERNEL_COUNTERS {
    # Implemented by CYGIMP_KERNEL_COUNTERS_SINGLE_LIST, active, enabled
    # Implemented by CYGIMP_KERNEL_COUNTERS_MULTI_LIST, active, disabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires: 1 == CYGINT_KERNEL_COUNTERS
    #     CYGINT_KERNEL_COUNTERS == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_KERNEL_COUNTERS
    #     Requires: 1 == CYGINT_KERNEL_COUNTERS
};

# Implement counters using a single list
# There are two different implementations of the counter
# objects. The first implementation stores all alarms in a
# single linked list. The alternative implementation uses a
# table of linked lists. A single list is more efficient in
# terms of memory usage and is generally adequate when the
# application only makes use of a small number of alarms.
#
cdl_option CYGIMP_KERNEL_COUNTERS_SINGLE_LIST {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Implement counters using a table of lists
# There are two different implementations of the counter
# objects. The first implementation stores all alarms in a
# single linked list. The alternative implementation uses a
# table of linked lists, with the size of the table being a
# separate configurable option. For more complicated
# operations it is better to have a table of lists since this
# reduces the amount of computation whenever the timer goes
# off. Assuming a table size of 8 (the default value) on
# average the timer code will only need to check 1/8 of the
# pending alarms instead of all of them.
#
cdl_component CYGIMP_KERNEL_COUNTERS_MULTI_LIST {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Size of counter list table
# If counters are implemented using an array of linked lists
# then this option controls the size of the array. A larger
# size reduces the amount of computation that needs to take
# place whenever the timer goes off, but requires extra
# memory.
#
cdl_option CYGNUM_KERNEL_COUNTERS_MULTI_LIST_SIZE {
    # This option is not active
    # The parent CYGIMP_KERNEL_COUNTERS_MULTI_LIST is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8
    # Legal values: 1 to 1024
};

# <
# Sort the counter list
# Sorting the counter lists reduces the amount of work that
# has to be done when a counter tick is processed, since the
# next alarm to expire is always at the front of the list.
# However, it makes adding an alarm to the list more expensive
# since a search must be done for the correct place to put it.
# Many alarms are used to implement timeouts, which seldom trigger,
# so it is worthwhile optimizing this case. For this reason
# sorted list are disabled by default.
#
cdl_option CYGIMP_KERNEL_COUNTERS_SORT_LIST {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Measure real-time [clock] interrupt latency
# Measure the interrupt latency as seen by the real-time clock
# timer interrupt.  This requires hardware support, defined by
# the HAL_CLOCK_LATENCY() macro.
#
cdl_option CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGVAR_KERNEL_COUNTERS_CLOCK_DSR_LATENCY
    #     Requires: CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY
    # option CYGVAR_KERNEL_COUNTERS_CLOCK_DSR_LATENCY
    #     DefaultValue: CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY
};

# Measure real-time [clock] DSR latency
# Measure the DSR latency as seen by the real-time clock
# timer interrupt.  This requires hardware support, defined by
# the HAL_CLOCK_LATENCY() macro.
#
cdl_option CYGVAR_KERNEL_COUNTERS_CLOCK_DSR_LATENCY {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY
    #     CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY == 0
    #   --> 0
    # Requires: CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY
    #     CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY == 0
    #   --> 0
};

# RTC resolution
# This option automatically defines the tuple which is used to
# initialize the RTC resolution, consisting of a numerator and
# denominator. The values of the numerator and denominator are
# defined by the HAL.
#
cdl_option CYGNUM_KERNEL_COUNTERS_RTC_RESOLUTION {
    # Calculated value: "{CYGNUM_HAL_RTC_NUMERATOR, CYGNUM_HAL_RTC_DENOMINATOR}"
    # Flavor: data
    # Current_value: {CYGNUM_HAL_RTC_NUMERATOR, CYGNUM_HAL_RTC_DENOMINATOR}
};

# RTC period
# This option defines the RTC period to be used in
# setting the system clock hardware. It is essentially
# an alias for CYGNUM_HAL_RTC_PERIOD, which is defined
# in the HAL.
#
cdl_option CYGNUM_KERNEL_COUNTERS_RTC_PERIOD {
    # Calculated value: "CYGNUM_HAL_RTC_PERIOD"
    # Flavor: data
    # Current_value: CYGNUM_HAL_RTC_PERIOD
};

# <
# Thread-related options
# There are a number of configuration options related to the
# implementation of threads, for example whether or not the
# eCos kernel supports per-thread data.
#
cdl_component CYGPKG_KERNEL_THREADS {
    # There is no associated value.

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_INSTRUMENT_THREAD
    #     ActiveIf: CYGPKG_KERNEL_THREADS
};

# >
# Allow per-thread timers
# This option controls whether or not the kernel should support
# per-thread clock and alarm related functions. Also some of
# the synchronization primitives such as semaphore and
# condition variable timed wait operations require per-thread
# timer support. If none of these facilities are required then
# the option can be disabled.
#
cdl_option CYGFUN_KERNEL_THREADS_TIMER {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGMFN_KERNEL_SYNCH_CONDVAR_TIMED_WAIT
    #     Requires: CYGFUN_KERNEL_THREADS_TIMER
};

# Support optional name for each thread
# Threads may optionally be supplied with a name string that is
# used to identify them during debugging. This name is only
# present if `this option is defined. Disabling it reduces both
# code and data size.
#
cdl_option CYGVAR_KERNEL_THREADS_NAME {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Keep track of all threads using a linked list
# Threads may optionally be placed on a housekeeping list so
# that all threads may be located easily. This is useful mainly
# in conjunction with source-level debugging.
#
cdl_option CYGVAR_KERNEL_THREADS_LIST {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGFUN_KERNEL_ALL_THREADS_STACK_CHECKING
    #     Requires: CYGVAR_KERNEL_THREADS_LIST
    # option CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT
    #     Requires: CYGVAR_KERNEL_THREADS_LIST
};

# Keep track of the base of each thread's stack
# This option makes the kernel keep track of the lower limit on
# each thread's stack. It allows the kernel to adjust the lower
# limit, thus making space for per-thread data. Note that it
# does not imply any form of run-time stack overflow checking.
#
cdl_option CYGFUN_KERNEL_THREADS_STACK_LIMIT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # component CYGVAR_KERNEL_THREADS_DATA
    #     Requires: CYGFUN_KERNEL_THREADS_STACK_LIMIT
};

# Check thread stacks for overflows
# This option enables a variety of checks for stack overflow
# including signatures at the top and base of thread stacks,
# which are asserted for correctness whenever a thread switches.
#
cdl_component CYGFUN_KERNEL_THREADS_STACK_CHECKING {
    # This option is not active
    # ActiveIf constraint: CYGPKG_INFRA_DEBUG
    #     CYGPKG_INFRA_DEBUG == 0
    #   --> 0
    # ActiveIf constraint: CYGDBG_USE_ASSERTS
    #     CYGDBG_USE_ASSERTS == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Check all threads whenever possible
# This option enables more active checking of all threads for
# wrongdoing.  In theory, checking threads other than the old and new
# executing threads in a thread-switch is pointless, because no other
# thread has run, so no other stack can be exceeded.  But errors such
# as memory scribbling, dangling pointers, overlapping use of store
# or errors accessing objects adjacent to a stack which can be very
# hard to find can be detected this way, saving debug time.
#
cdl_option CYGFUN_KERNEL_ALL_THREADS_STACK_CHECKING {
    # This option is not active
    # The parent CYGFUN_KERNEL_THREADS_STACK_CHECKING is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGVAR_KERNEL_THREADS_LIST
    #     CYGVAR_KERNEL_THREADS_LIST == 1
    #   --> 1
};

# Signature size in bytes, at stack top and bottom
# This is the size of the area reserved for a signature at the top
# and bottom of all stacks.  It also provides a buffer zone for
# detecting overflow before external objects are corrupted, hence the
# ability to vary it here.  But if you are short of stack, increasing
# this value will make the overflow more, not less likely, of course.
#
cdl_option CYGNUM_KERNEL_THREADS_STACK_CHECK_DATA_SIZE {
    # This option is not active
    # The parent CYGFUN_KERNEL_THREADS_STACK_CHECKING is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 32
    # value_source default
    # Default value: 32
    # Legal values: 8 to 512
};

# <
# Measure stack usage
# This option allows measurement of each thread's stack by initializing
# it to a predefined value at thread creation time. Later use of the
# cyg_thread_measure_stack_usage() function allows the maximum stack
# usage of the thread so far to be obtained. Note that this is not
# necessarily the true maximum stack usage that the thread will ever
# use since all that has been measured is the stack usage corresponding
# to the code path followed this time, and not the code path that may
# be followed in future.
#
cdl_component CYGFUN_KERNEL_THREADS_STACK_MEASUREMENT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  0 != CYGPKG_INFRA_DEBUG 
    #     CYGPKG_INFRA_DEBUG == 0
    #   --> 0
};

# >
# Output stack usage on thread exit
# This will output the measured stack usage on the diagnostic
# output when a thread exits.
#
cdl_option CYGDBG_KERNEL_THREADS_STACK_MEASUREMENT_VERBOSE_EXIT {
    # This option is not active
    # The parent CYGFUN_KERNEL_THREADS_STACK_MEASUREMENT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# Support for per-thread data
# doc: ref/kernel-thread-data.html
# It is possible for the kernel to support per-thread data, in
# other words an area of memory specific to each thread which
# can be used to store data for that thread. This per-thread
# data can be used by applications or by other packages such as
# the ISO C library.
#
cdl_component CYGVAR_KERNEL_THREADS_DATA {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGFUN_KERNEL_THREADS_STACK_LIMIT
    #     CYGFUN_KERNEL_THREADS_STACK_LIMIT == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_LIBC_STRING_PER_THREAD_STRTOK
    #     Requires: CYGVAR_KERNEL_THREADS_DATA
    # option CYGSEM_LIBC_STRING_PER_THREAD_STRTOK
    #     DefaultValue: CYGVAR_KERNEL_THREADS_DATA
    # option CYGSEM_ERROR_PER_THREAD_ERRNO
    #     Requires: CYGVAR_KERNEL_THREADS_DATA
};

# >
# Number of words of per-thread data
# It is possible for the kernel to support per-thread data, in
# other words an area of memory specific to each thread which
# can be used to store data for that thread. This per-thread
# data can be used by applications or by other packages such as
# the ISO C library. This configuration option controls the
# number of words of per-thread data that the kernel will
# allow. In the current implementation a bitmask is used to identify
# used per-thread data slots and so the maximum legal value must
# remain 32.
#
cdl_option CYGNUM_KERNEL_THREADS_DATA_MAX {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 6
    # value_source default
    # Default value: 6
    # Legal values: 4 to 32
};

# Bitmap of preallocated slots of thread data
# Per thread data options. Per thread data support is based loosely
# on that defined by POSIX. Each thread has an array of slots, up to
# CYGNUM_KERNEL_THREADS_DATA_MAX, that may contain data. Some of the
# slots have been preallocated to specific packages. Others may be
# allocated dynamically.
#
cdl_component CYGNUM_KERNEL_THREADS_DATA_ALL {
    # Calculated value: 15
    # Flavor: data
    # Current_value: 15
};

# >
# Slot 0 preallocated for the kernel
# This option defines the index of a per-thread data
# slot which is reserved by
# the eCos kernel
# for private use.
#
cdl_option CYGNUM_KERNEL_THREADS_DATA_KERNEL {
    # Calculated value: 0
    # Flavor: data
    # Current_value: 0
};

# Slot 1 preallocated for uITRON
# This option defines the index of a per-thread data
# slot which is reserved by
# the uITRON compatibility layer
# for private use.
#
cdl_option CYGNUM_KERNEL_THREADS_DATA_ITRON {
    # Calculated value: 1
    # Flavor: data
    # Current_value: 1
};

# Slot 2 preallocated for errno
# This option defines the index of a per-thread data
# slot which is reserved for use by an errno variable.
#
cdl_option CYGNUM_KERNEL_THREADS_DATA_ERRNO {
    # Calculated value: 2
    # Flavor: data
    # Current_value: 2
};

# Slot 3 preallocated for POSIX
# This option defines the index of a per-thread data
# slot which is reserved by
# POSIX
# for private use.
#
cdl_option CYGNUM_KERNEL_THREADS_DATA_POSIX {
    # Calculated value: 3
    # Flavor: data
    # Current_value: 3
};

# <
# <
# Thread destructors
# doc: ref/kernel-thread-destructors.html
# This option enables support for registered destructor functions to
# be called on thread exit.
#
cdl_component CYGPKG_KERNEL_THREADS_DESTRUCTORS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Number of possible destructors
# This option gives the number of possible destructors allowed.
# Increasing this will increase the size of every
# thread control structure if per-thread destructors are
# enabled.
#
cdl_option CYGNUM_KERNEL_THREADS_DESTRUCTORS {
    # This option is not active
    # The parent CYGPKG_KERNEL_THREADS_DESTRUCTORS is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8
    # Legal values: 1 to 65535
};

# Per-thread destructors
# Enabling this option makes the thread destructors a per-thread
# property, with each thread having its own list of destructors.
# Disabling this option makes the thread destructor list
# global so all threads have the same destructors.
#
cdl_option CYGSEM_KERNEL_THREADS_DESTRUCTORS_PER_THREAD {
    # This option is not active
    # The parent CYGPKG_KERNEL_THREADS_DESTRUCTORS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Stack size for the idle thread
# This configuration option specifies the stack size in bytes
# for the idle thread. Unless the HAL is configured to use a
# separate interrupt stack this size must be sufficient to meet
# the requirements of all interrupt handlers - these
# requirements are cumulative if nested interrupted are
# enabled. Depending on the target architecture, the stack size
# typically has to be a multiple of eight or sixteen bytes.
# This will be overridden where it is used if the
# architectural HAL requires a minimum stack size
# to handle interrupts correctly.
#
cdl_option CYGNUM_KERNEL_THREADS_IDLE_STACK_SIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 2048
    # value_source default
    # Default value: 2048
    # Legal values: 512 to 65536
};

# Maximal suspend count
# This option provides for an assertion that the count value for
# counted thread suspends do not exceed set limits.  This is to help
# with debugging, to allow a runaway loop, for example, to be
# detected more easily.
# If the option is not defined, no assert is included.  Whether asserts
# are themselves included depends on infrastructure configury in
# infra.h
#
cdl_option CYGNUM_KERNEL_MAX_SUSPEND_COUNT_ASSERT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 500
    # value_source default
    # Default value: 500
};

# Maximal wake count
# This option provides for an assertion that the count value for
# counted thread wakeups do not exceed set limits.  This is to
# help with debugging, to allow a runaaway loop, for example, to
# be detected more easily.
# If the option is not defined, no assert is included.  Whether asserts
# are themselves included depends on infrastructure configury in
# infra.h
#
cdl_option CYGNUM_KERNEL_MAX_COUNTED_WAKE_COUNT_ASSERT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 500
    # value_source default
    # Default value: 500
};

# Idle thread must always yield
# If the scheduler configuration only has a single priority
# level, then the idle thread must yield each time around its loop.
#
cdl_option CYGIMP_IDLE_THREAD_YIELD {
    # This option is not active
    # ActiveIf constraint: (CYGNUM_KERNEL_SCHED_PRIORITIES == 1)
    #     CYGNUM_KERNEL_SCHED_PRIORITIES == 32
    #   --> 0

    # Calculated value: 1
    # Flavor: bool
    # Current value: 1
};

# <
# Synchronization primitives
# The eCos kernel supports a number of different
# synchronization primitives such as mutexes, semaphores,
# condition variables, and message boxes. There are
# configuration options to control the exact behaviour of some
# of these synchronization primitives.
#
cdl_component CYGPKG_KERNEL_SYNCH {
    # There is no associated value.

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_INSTRUMENT_MUTEX
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
    # option CYGDBG_KERNEL_INSTRUMENT_CONDVAR
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
    # option CYGDBG_KERNEL_INSTRUMENT_BINSEM
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
    # option CYGDBG_KERNEL_INSTRUMENT_CNTSEM
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
    # option CYGDBG_KERNEL_INSTRUMENT_MBOXT
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
    # option CYGDBG_KERNEL_INSTRUMENT_FLAG
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
};

# >
# Priority inversion protection protocols
# doc: ref/kernel-mutexes.html
# This component controls the protocols used to protect mutexes against
# priority inversion. If this option is enabled it defines which
# algorithm is used to implement this protection. At present only
# one such algorithm is defined: "SIMPLE". The implementation
# will only work in the mlqueue scheduler, and it does not handle the
# rare case of nested mutexes completely correctly. However it is
# both fast and deterministic.
#
cdl_component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL {
    # ActiveIf constraint:  CYGSEM_KERNEL_SCHED_MLQUEUE 
    #     CYGSEM_KERNEL_SCHED_MLQUEUE == 1
    #   --> 1

    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 1 SIMPLE
    # value_source default
    # Default value: 1 SIMPLE
    # Legal values:  "SIMPLE" 
    # Requires:  CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES == 0 
    #     CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES == 0
    #   --> 1
};

# >
# Enable priority inheritance protocol
# This option enables priority inheritance protocol. This protocol
# causes the owner of a mutex to be executed at the highest priority
# of the threads waiting for access to the mutex.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT
    #     DefaultValue:  CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT ?
    #                             "INHERIT" :
    #                             CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING ?
    #                             "CEILING" : "NONE" 
};

# Enable priority ceiling protocol
# This option enables priority ceiling protocol. This protocol
# causes the owner of a mutex to be executed at a  priority
# associated with the mutex.
#
cdl_component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT_PRIORITY
    #     ActiveIf: CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT
    #     DefaultValue:  CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT ?
    #                             "INHERIT" :
    #                             CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING ?
    #                             "CEILING" : "NONE" 
};

# >
# Default priority ceiling
# This option defines the default priority ceiling to be
# used if the chosen default priority inversion protocol is
# priority ceoptioniling protocol. The default value for this is zero,
# making all such mutexes boost threads to the maximum priority.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT_PRIORITY {
    # ActiveIf constraint: CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING
    #     CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Legal values: 0 to  CYGNUM_KERNEL_SCHED_PRIORITIES - 1 
    #     CYGNUM_KERNEL_SCHED_PRIORITIES == 32
};

# <
# No priority inversion protocol
# This option enables the ability to have no priority inversion protocol.
# It is equivalent to disabling the priority inversion protocol at
# the top level, but is necessary for the runtime and default
# selection options.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_NONE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Default priority inversion protocol
# This option defines the default inversion protocol used for mutexes that
# are created without an explicit protocol being specified. The protocol
# chosen by default is to use priority inheritance if it is present otherwise
# priority ceiling, or none if neither is present.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT {
    # ActiveIf constraint:  CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT > 1 
    #     CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT == 3
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value INHERIT
    # value_source default
    # Default value:  CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT ?
    #                             "INHERIT" :
    #                             CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING ?
    #                             "CEILING" : "NONE" 
    #     CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT == 1
    #     CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING == 1
    #   --> INHERIT
    # Legal values:  "INHERIT" "CEILING" "NONE" 
};

# Specify mutex priority inversion protocol at runtime
# This option controls whether the priority inversion protocol used by
# a mutex can be specified when that mutex is created.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DYNAMIC {
    # ActiveIf constraint:  CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT > 1 
    #     CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT == 3
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Number of protocols selected
#
cdl_interface CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT {
    # Implemented by CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT, active, enabled
    # Implemented by CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING, active, enabled
    # Implemented by CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_NONE, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 3

    # The following properties are affected by this value
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT
    #     ActiveIf:  CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT > 1 
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DYNAMIC
    #     ActiveIf:  CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT > 1 
};

# <
# Use mboxt_plain mbox implementation
# Use the plain mboxt implementation instead of the mboxt2
# implementation. The mboxt2 version is designed to provide
# semantics compatible with UITRON, the plain implementation
# is adquate in most other situations.
#
cdl_option CYGIMP_MBOX_USE_MBOXT_PLAIN {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Message box blocking put support
# doc: ref/kernel-mail-boxes.html
# Message boxes can support three different versions of the
# put-message operation. The first is tryput(), which will fail
# if the message box is already full. The other two are the
# ordinary put() function which will block if the message box
# is full, and a timed put() operation which will block for
# upto a certain length of time if the message box is currently
# full. The blocking versions require extra memory in the
# message box data structure and extra code in the other
# message box functions, so they can be disabled if the
# application does not require them. If this option is enabled
# then the system will always provide the blocking put()
# function, and it will also provide the timed put() function
# if thread timers are enabled.
#
cdl_option CYGMFN_KERNEL_SYNCH_MBOXT_PUT_CAN_WAIT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Message box queue size
# doc: ref/kernel-mail-boxes.html
# This configuration option controls the number of messages
# that can be queued in a message box before a non-blocking
# put() operation will fail or a blocking put() operation will
# block. The cost in memory is one pointer per message box for
# each possible message.
#
cdl_option CYGNUM_KERNEL_SYNCH_MBOX_QUEUE_SIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 10
    # value_source default
    # Default value: 10
    # Legal values: 1 to 65535
};

# Condition variable timed-wait support
# doc: ref/kernel-condition-variables.html
# This option enables the condition variable timed wait
# facility.
#
cdl_option CYGMFN_KERNEL_SYNCH_CONDVAR_TIMED_WAIT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGFUN_KERNEL_THREADS_TIMER
    #     CYGFUN_KERNEL_THREADS_TIMER == 1
    #   --> 1
};

# Condition variable explicit mutex wait support
# doc: ref/kernel-condition-variables.html
# This option enables the condition variable explicit mutex wait
# facility. By default condition variables in eCos are created with
# a statically associated mutex. This option permits wait (and timed wait
# if CYGMFN_KERNEL_SYNCH_CONDVAR_TIMED_WAIT is enabled) to provide a
# different mutex as an argument. This makes no difference to the semantics
# the wait operation except that a different mutex will be used during it.
#
cdl_option CYGMFN_KERNEL_SYNCH_CONDVAR_WAIT_MUTEX {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Avoid inlines in mqueue implementation
# With this option disabled, the 'mqueue' message queue implementation
# provides most of its implementation via inlines. However this can
# adversely affect code size in application that make lots of mqueue
# calls from different places, so enabling this option provides
# non-inline versions to be used instead.
#
cdl_option CYGIMP_KERNEL_SYNCH_MQUEUE_NOT_INLINE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# Kernel instrumentation
# doc: user-guide/kernel-instrumentation.html
# The current release of the kernel contains an initial version
# of instrumentation support. The various parts of the kernel
# will invoke instrumentation routines whenever appropriate
# events occur, and these will be stored in a circular buffer
# for later reference.
#
cdl_component CYGPKG_KERNEL_INSTRUMENT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGPKG_KERNEL_TESTS
    #     Calculated:  
    #                     "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2" 
    #                     . ((CYGFUN_KERNEL_API_C) ? " tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0" : "")
    #                     . ((!CYGPKG_INFRA_DEBUG && !CYGPKG_KERNEL_INSTRUMENT && CYGFUN_KERNEL_API_C) ? " tests/dhrystone" : "")
    #                     . ((CYGPKG_KERNEL_SMP_SUPPORT && CYGFUN_KERNEL_API_C) ? " tests/smp" : "")
    #                     . ((!CYGINT_HAL_TESTS_NO_CACHES && CYGFUN_KERNEL_API_C) ? " tests/kcache1 tests/kcache2" : "")
    #                 
};

# >
# Use buffer provided by the application
# In most circumstances the kernel should provide the
# instrumentation circular buffer itself. Occasionally
# application code may wish to provide the buffer instead,
# giving the application code more convenient access to the
# buffer. This also makes it possible to put the circular
# buffer in special areas of memory, for example a region that
# is shared with the host.
#
cdl_option CYGVAR_KERNEL_INSTRUMENT_EXTERNAL_BUFFER {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Instrumentation buffer size
# If kernel instrumentation is enabled then the instrumentation
# data goes into a circular buffer. A larger buffer allows
# more data to be stored, but at a significant cost in memory.
# The value of this option corresponds to the number of entries
# in the table, and typically each entry will require 16 bytes
# of memory.
#
cdl_option CYGNUM_KERNEL_INSTRUMENT_BUFFER_SIZE {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 256
    # value_source default
    # Default value: 256
    # Legal values: 16 to 0x100000
};

# Wrap instrumentation buffer
# When the instrumentation buffer is full it can either be restarted
# from the beginning, overwriting older data, or it can stop at the
# end. The former is useful if you want to look at the last entries
# made while the latter is useful if you want to look at the first
# few.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_BUFFER_WRAP {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Perform selective instrumentation
# The kernel can either collect all instrumentation events, or
# it can filter out events at runtime based on a set of flags.
# For example it would be possible to decide at runtime that
# only scheduler and interrupt instrumentation flags are of
# interest and that all other flags should be ignored. This
# flag mechanism involves extra code and processor cycle
# overhead in the instrumentation code, so it can be disabled
# if the application developer is interested in all
# instrumentation events.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_FLAGS {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument common scheduler operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the scheduling code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_SCHED {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SCHED
    #     CYGPKG_KERNEL_SCHED == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument thread operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the code that manipulates threads.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_THREAD {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_THREADS
    #     CYGPKG_KERNEL_THREADS == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument interrupt-related operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the interrupt handling code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_INTR {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_INTERRUPTS
    #     CYGPKG_KERNEL_INTERRUPTS == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument mutex operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the mutex code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_MUTEX {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument condition variable operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the condition variable code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_CONDVAR {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument binary semaphore operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the binary semaphore code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_BINSEM {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument counting semaphore operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the counting semaphore code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_CNTSEM {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument message box operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the message box code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_MBOXT {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument event flag operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the event flag code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_FLAG {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument clock operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the real-time clock code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_CLOCK {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument alarm-related operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the code related to alarm operations.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_ALARM {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument SMP-related operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the code related to SMP operations.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_SMP {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument multi-level queue scheduler operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the code for the multi-level queue scheduler.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_MLQ {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGSEM_KERNEL_SCHED_MLQUEUE
    #     CYGSEM_KERNEL_SCHED_MLQUEUE == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument bitmap scheduler operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the code for the bitmap scheduler.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_BITMAP {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGSEM_KERNEL_SCHED_BITMAP
    #     CYGSEM_KERNEL_SCHED_BITMAP == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Support application-level instrumentation
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not application-level instrumentation gets
# compiled in.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_USER {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Provide user-friendly instrumentation messages
# Include code which will convert the instrument type field 
# into a more human understandable string
#
cdl_component CYGDBG_KERNEL_INSTRUMENT_MSGS {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Rebuild the header file
# Make (using a shell script) include/cyg/kernel/instrument_desc.h in
# your build tree; this is normally simply copied from the repository.
# If you make a permanent change to include/instrmnt.h, such that
# instrument_desc.h needs updating, it's up to you to first delete the
# master file
# ECOS_REPOSITORY/kernel/VERSION/include/instrument_desc.h
# in your source repository, make the new version by enabling this
# option then copy the new file
# back from your build place to its source in
# ECOS_REPOSITORY/kernel/VERSION/include/instrument_desc.h
# and/or commit this to any version control system that you use.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_MSGS_BUILD_HEADERFILE {
    # This option is not active
    # The parent CYGDBG_KERNEL_INSTRUMENT_MSGS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Build the host tool to print out a dump
# Generate a host program which can dump the instrumentation
# data in a human readable format. You have to somehow get the
# instrumentation buffer into a file on the host. 'Exercise for
# the reader' as university lecturers tend to say.
#
cdl_component CYGDBG_KERNEL_INSTRUMENT_BUILD_HOST_DUMP {
    # This option is not active
    # The parent CYGDBG_KERNEL_INSTRUMENT_MSGS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# <
# Source-level debugging support
# If the source level debugger gdb is to be used for debugging
# application code then it may be necessary to configure in support
# for this in the kernel.
#
cdl_component CYGPKG_KERNEL_DEBUG {
    # There is no associated value.
};

# >
# Include GDB multi-threading debug support
# This option enables some extra kernel code which is needed
# to support multi-threaded source level debugging.
#
cdl_option CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGVAR_KERNEL_THREADS_LIST
    #     CYGVAR_KERNEL_THREADS_LIST == 1
    #   --> 1
    # Requires: CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
    #     CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
    #     ActiveIf:  CYGSEM_HAL_ROM_MONITOR || CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT 
};

# <
# Kernel APIs
# The eCos kernel is implemented in C++, so a C++ interface
# to the kernel is always available. There is also an optional
# C API. Additional API's may be provided in future versions.
#
cdl_component CYGPKG_KERNEL_API {
    # There is no associated value.
};

# >
# Provide C API
# The eCos kernel is implemented in C++, but there is an
# optional C API for use by application code. This C API can be
# disabled if the application code does not invoke the kernel
# directly, but instead uses higher level code such as the
# uITRON compatibility layer.
#
cdl_option CYGFUN_KERNEL_API_C {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGPKG_KERNEL_TESTS
    #     Calculated:  
    #                     "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2" 
    #                     . ((CYGFUN_KERNEL_API_C) ? " tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0" : "")
    #                     . ((!CYGPKG_INFRA_DEBUG && !CYGPKG_KERNEL_INSTRUMENT && CYGFUN_KERNEL_API_C) ? " tests/dhrystone" : "")
    #                     . ((CYGPKG_KERNEL_SMP_SUPPORT && CYGFUN_KERNEL_API_C) ? " tests/smp" : "")
    #                     . ((!CYGINT_HAL_TESTS_NO_CACHES && CYGFUN_KERNEL_API_C) ? " tests/kcache1 tests/kcache2" : "")
    #                 
    # option CYGPKG_KERNEL_TESTS
    #     Calculated:  
    #                     "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2" 
    #                     . ((CYGFUN_KERNEL_API_C) ? " tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0" : "")
    #                     . ((!CYGPKG_INFRA_DEBUG && !CYGPKG_KERNEL_INSTRUMENT && CYGFUN_KERNEL_API_C) ? " tests/dhrystone" : "")
    #                     . ((CYGPKG_KERNEL_SMP_SUPPORT && CYGFUN_KERNEL_API_C) ? " tests/smp" : "")
    #                     . ((!CYGINT_HAL_TESTS_NO_CACHES && CYGFUN_KERNEL_API_C) ? " tests/kcache1 tests/kcache2" : "")
    #                 
    # option CYGPKG_KERNEL_TESTS
    #     Calculated:  
    #                     "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2" 
    #                     . ((CYGFUN_KERNEL_API_C) ? " tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0" : "")
    #                     . ((!CYGPKG_INFRA_DEBUG && !CYGPKG_KERNEL_INSTRUMENT && CYGFUN_KERNEL_API_C) ? " tests/dhrystone" : "")
    #                     . ((CYGPKG_KERNEL_SMP_SUPPORT && CYGFUN_KERNEL_API_C) ? " tests/smp" : "")
    #                     . ((!CYGINT_HAL_TESTS_NO_CACHES && CYGFUN_KERNEL_API_C) ? " tests/kcache1 tests/kcache2" : "")
    #                 
    # option CYGPKG_KERNEL_TESTS
    #     Calculated:  
    #                     "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2" 
    #                     . ((CYGFUN_KERNEL_API_C) ? " tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0" : "")
    #                     . ((!CYGPKG_INFRA_DEBUG && !CYGPKG_KERNEL_INSTRUMENT && CYGFUN_KERNEL_API_C) ? " tests/dhrystone" : "")
    #                     . ((CYGPKG_KERNEL_SMP_SUPPORT && CYGFUN_KERNEL_API_C) ? " tests/smp" : "")
    #                     . ((!CYGINT_HAL_TESTS_NO_CACHES && CYGFUN_KERNEL_API_C) ? " tests/kcache1 tests/kcache2" : "")
    #                 
    # option CYGFUN_MEMALLOC_KAPI
    #     DefaultValue: CYGFUN_KERNEL_API_C
};

# <
# Kernel build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_KERNEL_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the eCos kernel. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_KERNEL_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the eCos kernel. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_KERNEL_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Kernel tests
# This option specifies the set of tests for the eCos kernel.
#
cdl_option CYGPKG_KERNEL_TESTS {
    # Calculated value:  
    #                     "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2" 
    #                     . ((CYGFUN_KERNEL_API_C) ? " tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0" : "")
    #                     . ((!CYGPKG_INFRA_DEBUG && !CYGPKG_KERNEL_INSTRUMENT && CYGFUN_KERNEL_API_C) ? " tests/dhrystone" : "")
    #                     . ((CYGPKG_KERNEL_SMP_SUPPORT && CYGFUN_KERNEL_API_C) ? " tests/smp" : "")
    #                     . ((!CYGINT_HAL_TESTS_NO_CACHES && CYGFUN_KERNEL_API_C) ? " tests/kcache1 tests/kcache2" : "")
    #                 
    #     CYGFUN_KERNEL_API_C == 1
    #     CYGPKG_INFRA_DEBUG == 0
    #     CYGPKG_KERNEL_INSTRUMENT == 0
    #     CYGFUN_KERNEL_API_C == 1
    #     CYGPKG_KERNEL_SMP_SUPPORT == 0
    #     CYGFUN_KERNEL_API_C == 1
    #     CYGINT_HAL_TESTS_NO_CACHES == 0
    #     CYGFUN_KERNEL_API_C == 1
    # Flavor: data
    # Current_value: tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/bin_sem3 tests/clock0 tests/clock1 tests/clockcnv tests/clocktruth tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kill tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/release tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kflag0 tests/kflag1 tests/kintr0 tests/klock tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/kmutex3 tests/kmutex4 tests/ksched1 tests/ksem0 tests/ksem1 tests/kthread0 tests/kthread1 tests/stress_threads tests/thread_gdb tests/timeslice tests/timeslice2 tests/tm_basic tests/fptest tests/kalarm0 tests/dhrystone tests/kcache1 tests/kcache2
};

# <
# <
# Dynamic memory allocation
# doc: ref/memalloc.html
# This package provides memory allocator infrastructure required for
# dynamic memory allocators, including the ISO standard malloc
# interface. It also contains some sample implementations.
#
cdl_package CYGPKG_MEMALLOC {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
};

# >
# Memory allocator implementations
# This component contains configuration options related to the 
# various memory allocators available.
#
cdl_component CYGPKG_MEMALLOC_ALLOCATORS {
    # There is no associated value.
};

# >
# Fixed block allocator
# This component contains configuration options related to the 
# fixed block memory allocator.
#
cdl_component CYGPKG_MEMALLOC_ALLOCATOR_FIXED {
    # There is no associated value.
};

# >
# Make thread safe
# With this option enabled, this allocator will be
# made thread-safe. Additionally allocation functions
# are made available that allow a thread to wait
# until memory is available.
#
cdl_option CYGSEM_MEMALLOC_ALLOCATOR_FIXED_THREADAWARE {
    # ActiveIf constraint: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Simple variable block allocator
# This component contains configuration options related to the 
# simple variable block memory allocator. This allocator is not
# very fast, and in particular does not scale well with large
# numbers of allocations. It is however very compact in terms of
# code size and does not have very much overhead per allocation.
#
cdl_component CYGPKG_MEMALLOC_ALLOCATOR_VARIABLE {
    # There is no associated value.
};

# >
# Make thread safe
# With this option enabled, this allocator will be
# made thread-safe. Additionally allocation functions
# are added that allow a thread to wait until memory
# are made available that allow a thread to wait
# until memory is available.
#
cdl_option CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_THREADAWARE {
    # ActiveIf constraint: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Coalesce memory
# The variable-block memory allocator can perform coalescing
# of memory whenever the application code releases memory back
# to the pool. This coalescing reduces the possibility of
# memory fragmentation problems, but involves extra code and
# processor cycles.
#
cdl_option CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGIMP_MEMALLOC_MALLOC_VARIABLE_SIMPLE
    #     Requires: CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE
};

# <
# Doug Lea's malloc
# This component contains configuration options related to the 
# port of Doug Lea's memory allocator, normally known as
# dlmalloc. dlmalloc has a reputation for being both fast
# and space-conserving, as well as resisting fragmentation well.
# It is a common choice for a general purpose allocator and
# has been used in both newlib and Linux glibc.
#
cdl_component CYGPKG_MEMALLOC_ALLOCATOR_DLMALLOC {
    # There is no associated value.
};

# >
# Debug build
# Doug Lea's malloc implementation has substantial amounts
# of internal checking in order to verify the operation
# and consistency of the allocator. However this imposes
# substantial overhead on each operation. Therefore this
# checking may be individually disabled.
#
cdl_option CYGDBG_MEMALLOC_ALLOCATOR_DLMALLOC_DEBUG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  0 != CYGDBG_USE_ASSERTS 
    #     CYGDBG_USE_ASSERTS == 0
    #   --> 0
    # Requires: CYGDBG_USE_ASSERTS
    #     CYGDBG_USE_ASSERTS == 0
    #   --> 0
};

# Make thread safe
# With this option enabled, this allocator will be
# made thread-safe. Additionally allocation functions
# are made available that allow a thread to wait
# until memory is available.
#
cdl_option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_THREADAWARE {
    # ActiveIf constraint: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1
};

# Support more than one instance
# Having this option disabled allows important
# implementation structures to be declared as a single
# static instance, allowing faster access. However this
# would fail if there is more than one instance of
# the dlmalloc allocator class. Therefore this option can
# be enabled if multiple instances are required. Note: as
# a special case, if this allocator is used as the
# implementation of malloc, and it can be determined there
# is more than one malloc pool, then this option will be
# silently enabled.
#
cdl_option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_SAFE_MULTIPLE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Use system memmove() and memset()
# This may be used to control whether memset() and memmove()
# are used within the implementation. The alternative is
# to use some macro equivalents, which have been reported
# to be faster in some circumstances. The use of "MEMCPY"
# in the CDL option name is an anachronism and only
# present for backwards compatibility.
#
cdl_option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_USE_MEMCPY {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  (0 != CYGPKG_ISOINFRA) && (0 != CYGINT_ISO_STRING_MEMFUNCS) 
    #     CYGPKG_ISOINFRA == current
    #     CYGINT_ISO_STRING_MEMFUNCS == 1
    #   --> 1
    # Requires: CYGPKG_ISOINFRA
    #     CYGPKG_ISOINFRA == current
    #   --> 1
    # Requires: CYGINT_ISO_STRING_MEMFUNCS
    #     CYGINT_ISO_STRING_MEMFUNCS == 1
    #   --> 1
};

# Minimum alignment of allocated blocks
# This option controls the minimum alignment that the
# allocated memory blocks are aligned on, specified as
# 2^N. Note that using large mininum alignments can lead
# to excessive memory wastage.
#
cdl_option CYGNUM_MEMALLOC_ALLOCATOR_DLMALLOC_ALIGNMENT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 3
    # value_source default
    # Default value: 3
    # Legal values: 3 to 10
};

# <
# Variable block allocator with separate metadata
# This component contains configuration options related to the 
# variable block memory allocator with separate metadata.
#
cdl_component CYGPKG_MEMALLOC_ALLOCATOR_SEPMETA {
    # There is no associated value.
};

# >
# Make thread safe
# With this option enabled, this allocator will be
# made thread-safe. Additionally allocation functions
# are made available that allow a thread to wait
# until memory is available.
#
cdl_option CYGSEM_MEMALLOC_ALLOCATOR_SEPMETA_THREADAWARE {
    # ActiveIf constraint: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# <
# Kernel C API support for memory allocation
# This option must be enabled to provide the extensions required
# to support integration into the kernel C API.
#
cdl_option CYGFUN_MEMALLOC_KAPI {
    # ActiveIf constraint: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: CYGFUN_KERNEL_API_C
    #     CYGFUN_KERNEL_API_C == 1
    #   --> 1
};

# malloc(0) returns NULL
# This option controls the behavior of malloc(0) ( or calloc with
# either argument 0 ). It is permitted by the standard to return
# either a NULL pointer or a unique pointer. Enabling this option
# forces a NULL pointer to be returned.
#
cdl_option CYGSEM_MEMALLOC_MALLOC_ZERO_RETURNS_NULL {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Breakpoint site when running out of memory
# Whenever the system runs out of memory, it invokes this function
# before either going to sleep waiting for memory to become 
# available or returning failure.
#
cdl_option CYGSEM_MEMALLOC_INVOKE_OUT_OF_MEMORY {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# malloc() and supporting allocators
# This component enables support for dynamic memory
# allocation as supplied by the functions malloc(),
# free(), calloc() and realloc(). As these
# functions are often used, but can have quite an
# overhead, disabling them here can ensure they
# cannot even be used accidentally when static
# allocation is preferred. Within this component are
# various allocators that can be selected for use
# as the underlying implementation of the dynamic
# allocation functions.
#
cdl_component CYGPKG_MEMALLOC_MALLOC_ALLOCATORS {
    # ActiveIf constraint: CYGPKG_ISOINFRA
    #     CYGPKG_ISOINFRA == current
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Use external heap definition
# This option allows other components in the
# system to override the default system
# provision of heap memory pools. This should
# be set to a header which provides the equivalent
# definitions to <pkgconf/heaps.hxx>.
#
cdl_component CYGBLD_MEMALLOC_MALLOC_EXTERNAL_HEAP_H {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Use external implementation of joining multiple heaps
# The default implementation of joining multiple heaps
# is fine for the case where there are multiple disjoint
# memory regions of the same type. However, in a system
# there might be e.g. a small amount of internal SRAM and
# a large amount of external DRAM. The SRAM is faster and
# the DRAM is slower. An application can implement some 
# heuristic to choose which pool to allocate from. This
# heuristic can be highly application specific.
#
cdl_component CYGBLD_MEMALLOC_MALLOC_EXTERNAL_JOIN_H {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# malloc() allocator implementations
#
cdl_interface CYGINT_MEMALLOC_MALLOC_ALLOCATORS {
    # Implemented by CYGIMP_MEMALLOC_MALLOC_VARIABLE_SIMPLE, active, disabled
    # Implemented by CYGIMP_MEMALLOC_MALLOC_DLMALLOC, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires:  CYGINT_MEMALLOC_MALLOC_ALLOCATORS == 1 
    #     CYGINT_MEMALLOC_MALLOC_ALLOCATORS == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_MEMALLOC_MALLOC_ALLOCATORS
    #     Requires:  CYGINT_MEMALLOC_MALLOC_ALLOCATORS == 1 
};

# malloc() implementation instantiation data
# Memory allocator implementations that are capable of being
# used underneath malloc() must be instantiated. The code
# to do this is set in this option. It is only intended to
# be set by the implementation, not the user.
#
cdl_option CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value <cyg/memalloc/dlmalloc.hxx>
    # value_source default
    # Default value: <cyg/memalloc/dlmalloc.hxx>

    # The following properties are affected by this value
    # option CYGIMP_MEMALLOC_MALLOC_VARIABLE_SIMPLE
    #     Requires:  CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER ==  "<cyg/memalloc/memvar.hxx>" 
    # option CYGIMP_MEMALLOC_MALLOC_DLMALLOC
    #     Requires:  CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER ==  "<cyg/memalloc/dlmalloc.hxx>" 
};

# Simple variable block implementation
# This causes malloc() to use the simple
# variable block allocator.
#
cdl_option CYGIMP_MEMALLOC_MALLOC_VARIABLE_SIMPLE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER ==  "<cyg/memalloc/memvar.hxx>" 
    #     CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER == <cyg/memalloc/dlmalloc.hxx>
    #   --> 0
    # Requires: CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE
    #     CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE == 1
    #   --> 1
};

# Doug Lea's malloc implementation
# This causes malloc() to use a version of Doug Lea's
# malloc (dlmalloc) as the underlying implementation.
#
cdl_option CYGIMP_MEMALLOC_MALLOC_DLMALLOC {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires:  CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER ==  "<cyg/memalloc/dlmalloc.hxx>" 
    #     CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER == <cyg/memalloc/dlmalloc.hxx>
    #   --> 1
};

# <
# Size of the fallback dynamic memory pool in bytes
# If *no* heaps are configured in your memory layout,
# dynamic memory allocation by
# malloc() and calloc() must be from a fixed-size,
# contiguous memory pool (note here that it is the
# pool that is of a fixed size, but malloc() is still
# able to allocate variable sized chunks of memory
# from it). This option is the size
# of that pool, in bytes. Note that not all of
# this is available for programs to
# use - some is needed for internal information
# about memory regions, and some may be lost to
# ensure that memory allocation only returns
# memory aligned on word (or double word)
# boundaries - a very common architecture
# constraint.
#
cdl_option CYGNUM_MEMALLOC_FALLBACK_MALLOC_POOL_SIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 16384
    # value_source default
    # Default value: 16384
    # Legal values: 32 to 0x7fffffff
};

# Common memory allocator package build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_MEMALLOC_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building this package. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_MEMALLOC_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building this package. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_MEMALLOC_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Tests
# This option specifies the set of tests for this package.
#
cdl_option CYGPKG_MEMALLOC_TESTS {
    # Calculated value:  "tests/dlmalloc1 tests/dlmalloc2 tests/heaptest tests/kmemfix1 tests/kmemvar1 tests/malloc1 tests/malloc2 tests/malloc3 tests/malloc4 tests/memfix1 tests/memfix2 tests/memvar1 tests/memvar2 tests/realloc tests/sepmeta1 tests/sepmeta2" 
    # Flavor: data
    # Current_value: tests/dlmalloc1 tests/dlmalloc2 tests/heaptest tests/kmemfix1 tests/kmemvar1 tests/malloc1 tests/malloc2 tests/malloc3 tests/malloc4 tests/memfix1 tests/memfix2 tests/memvar1 tests/memvar2 tests/realloc tests/sepmeta1 tests/sepmeta2
};

# <
# <
# Common error code support
# This package contains the common list of error and
# status codes. It is held centrally to allow
# packages to interchange error codes and status
# codes in a common way, rather than each package
# having its own conventions for error/status
# reporting. The error codes are modelled on the
# POSIX style naming e.g. EINVAL etc. This package
# also provides the standard strerror() function to
# convert error codes to textual representation, as
# well as an implementation of the errno idiom.
#
cdl_package CYGPKG_ERROR {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires:  CYGBLD_ISO_ERRNO_CODES_HEADER == "<cyg/error/codes.h>" 
    #     CYGBLD_ISO_ERRNO_CODES_HEADER == <cyg/error/codes.h>
    #   --> 1

    # The following properties are affected by this value
    # package CYGPKG_IO_SERIAL_MICROBLAZE_UARTLITE
    #     Requires: CYGPKG_ERROR
    # package CYGPKG_IO
    #     Requires: CYGPKG_ERROR
};

# >
# errno variable
# This package controls the behaviour of the
# errno variable (or more strictly, expression)
# from <errno.h>.
#
cdl_component CYGPKG_ERROR_ERRNO {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires:  CYGBLD_ISO_ERRNO_HEADER == "<cyg/error/errno.h>" 
    #     CYGBLD_ISO_ERRNO_HEADER == <cyg/error/errno.h>
    #   --> 1
};

# >
# Per-thread errno
# This option controls whether the standard error
# code reporting variable errno is a per-thread
# variable, rather than global.
#
cdl_option CYGSEM_ERROR_PER_THREAD_ERRNO {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGVAR_KERNEL_THREADS_DATA
    #     CYGVAR_KERNEL_THREADS_DATA == 1
    #   --> 1
};

# Tracing level
# Trace verbosity level for debugging the errno
# retrieval mechanism in errno.cxx. Increase this
# value to get additional trace output.
#
cdl_option CYGNUM_ERROR_ERRNO_TRACE_LEVEL {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Legal values: 0 to 1
};

# <
# strerror function
# This package controls the presence and behaviour of the
# strerror() function from <string.h>
#
cdl_option CYGPKG_ERROR_STRERROR {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires:  CYGBLD_ISO_STRERROR_HEADER == "<cyg/error/strerror.h>" 
    #     CYGBLD_ISO_STRERROR_HEADER == <cyg/error/strerror.h>
    #   --> 1
};

# Error package build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_ERROR_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the error package. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_ERROR_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the error package. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_ERROR_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# <
# <
# ISO C and POSIX infrastructure
# eCos supports implementations of ISO C libraries and POSIX
# implementations. This package provides infrastructure used by
# all such implementations.
#
cdl_package CYGPKG_ISOINFRA {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_USE_MEMCPY
    #     Requires: CYGPKG_ISOINFRA
    # option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_USE_MEMCPY
    #     DefaultValue:  (0 != CYGPKG_ISOINFRA) && (0 != CYGINT_ISO_STRING_MEMFUNCS) 
    # component CYGPKG_MEMALLOC_MALLOC_ALLOCATORS
    #     ActiveIf: CYGPKG_ISOINFRA
    # package CYGPKG_LIBC_STRING
    #     Requires: CYGPKG_ISOINFRA
};

# >
# Startup and termination
#
cdl_component CYGPKG_ISO_STARTUP {
    # There is no associated value.
};

# >
# main() startup implementations
# Implementations of this interface arrange for a user-supplied
# main() to be called in an ISO compatible environment.
#
cdl_interface CYGINT_ISO_MAIN_STARTUP {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_MAIN_STARTUP 
    #     CYGINT_ISO_MAIN_STARTUP == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_MAIN_STARTUP
    #     Requires:  1 >= CYGINT_ISO_MAIN_STARTUP 
};

# environ implementations
# Implementations of this interface provide the environ
# variable required by POSIX.
#
cdl_interface CYGINT_ISO_ENVIRON {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_ENVIRON 
    #     CYGINT_ISO_ENVIRON == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_ENVIRON
    #     Requires:  1 >= CYGINT_ISO_ENVIRON 
};

# <
# ctype.h functions
#
cdl_component CYGPKG_ISO_CTYPE_H {
    # There is no associated value.
};

# >
# Number of implementations of ctype functions
#
cdl_interface CYGINT_ISO_CTYPE {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_CTYPE 
    #     CYGINT_ISO_CTYPE == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_CTYPE
    #     Requires:  1 >= CYGINT_ISO_CTYPE 
    # option CYGFUN_LIBC_STRING_BSD_FUNCS
    #     Requires: CYGINT_ISO_CTYPE
};

# Ctype implementation header
#
cdl_option CYGBLD_ISO_CTYPE_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# Error handling
#
cdl_component CYGPKG_ISO_ERRNO {
    # There is no associated value.
};

# >
# Number of implementations of error codes
#
cdl_interface CYGINT_ISO_ERRNO_CODES {
    # Implemented by CYGPKG_ERROR, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires:  1 >= CYGINT_ISO_ERRNO_CODES 
    #     CYGINT_ISO_ERRNO_CODES == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_ERRNO_CODES
    #     Requires:  1 >= CYGINT_ISO_ERRNO_CODES 
    # package CYGPKG_NET_LWIP
    #     Requires: CYGINT_ISO_ERRNO_CODES
};

# Error codes implementation header
#
cdl_option CYGBLD_ISO_ERRNO_CODES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # The inferred value should not be edited directly.
    inferred_value 1 <cyg/error/codes.h>
    # value_source inferred
    # Default value: 0 0

    # The following properties are affected by this value
    # package CYGPKG_ERROR
    #     Requires:  CYGBLD_ISO_ERRNO_CODES_HEADER == "<cyg/error/codes.h>" 
};

# Number of implementations of errno variable
#
cdl_interface CYGINT_ISO_ERRNO {
    # Implemented by CYGPKG_ERROR_ERRNO, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires:  1 >= CYGINT_ISO_ERRNO 
    #     CYGINT_ISO_ERRNO == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_ERRNO
    #     Requires:  1 >= CYGINT_ISO_ERRNO 
};

# errno variable implementation header
#
cdl_option CYGBLD_ISO_ERRNO_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # The inferred value should not be edited directly.
    inferred_value 1 <cyg/error/errno.h>
    # value_source inferred
    # Default value: 0 0

    # The following properties are affected by this value
    # component CYGPKG_ERROR_ERRNO
    #     Requires:  CYGBLD_ISO_ERRNO_HEADER == "<cyg/error/errno.h>" 
};

# <
# Locale-related functions
#
cdl_component CYGPKG_ISO_LOCALE {
    # There is no associated value.
};

# >
# Number of implementations of locale functions
#
cdl_interface CYGINT_ISO_LOCALE {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_LOCALE 
    #     CYGINT_ISO_LOCALE == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_LOCALE
    #     Requires:  1 >= CYGINT_ISO_LOCALE 
};

# Locale implementation header
#
cdl_option CYGBLD_ISO_LOCALE_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# Standard I/O-related functionality
#
cdl_component CYGPKG_ISO_STDIO {
    # There is no associated value.
};

# >
# Number of implementations of stdio file types
#
cdl_interface CYGINT_ISO_STDIO_FILETYPES {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_STDIO_FILETYPES 
    #     CYGINT_ISO_STDIO_FILETYPES == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDIO_FILETYPES
    #     Requires:  1 >= CYGINT_ISO_STDIO_FILETYPES 
};

# Stdio file types implementation header
#
cdl_option CYGBLD_ISO_STDIO_FILETYPES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Stdio standard streams implementations
#
cdl_interface CYGINT_ISO_STDIO_STREAMS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_STDIO_STREAMS 
    #     CYGINT_ISO_STDIO_STREAMS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDIO_STREAMS
    #     Requires:  1 >= CYGINT_ISO_STDIO_STREAMS 
};

# Stdio standard streams implementation header
# This header file must define stdin, stdout
# and stderr.
#
cdl_option CYGBLD_ISO_STDIO_STREAMS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of stdio file operations
#
cdl_interface CYGINT_ISO_STDIO_FILEOPS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_STDIO_FILEOPS 
    #     CYGINT_ISO_STDIO_FILEOPS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDIO_FILEOPS
    #     Requires:  1 >= CYGINT_ISO_STDIO_FILEOPS 
};

# Stdio file operations implementation header
# This header controls the file system operations on a file
# such as remove(), rename(), tmpfile(), tmpnam() and associated
# constants.
#
cdl_option CYGBLD_ISO_STDIO_FILEOPS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of stdio file access  functionals
#
cdl_interface CYGINT_ISO_STDIO_FILEACCESS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_STDIO_FILEACCESS 
    #     CYGINT_ISO_STDIO_FILEACCESS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDIO_FILEACCESS
    #     Requires:  1 >= CYGINT_ISO_STDIO_FILEACCESS 
};

# Stdio file access implementation header
# This header controls the file access operations
# such as fclose(), fflush(), fopen(), freopen(), setbuf(),
# setvbuf(), and associated constants.
#
cdl_option CYGBLD_ISO_STDIO_FILEACCESS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of stdio formatted I/O
#
cdl_interface CYGINT_ISO_STDIO_FORMATTED_IO {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_STDIO_FORMATTED_IO 
    #     CYGINT_ISO_STDIO_FORMATTED_IO == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDIO_FORMATTED_IO
    #     Requires:  1 >= CYGINT_ISO_STDIO_FORMATTED_IO 
};

# Stdio formatted I/O implementation header
#
cdl_option CYGBLD_ISO_STDIO_FORMATTED_IO_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of stdio character I/O
#
cdl_interface CYGINT_ISO_STDIO_CHAR_IO {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_STDIO_CHAR_IO 
    #     CYGINT_ISO_STDIO_CHAR_IO == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDIO_CHAR_IO
    #     Requires:  1 >= CYGINT_ISO_STDIO_CHAR_IO 
};

# Stdio character I/O implementation header
#
cdl_option CYGBLD_ISO_STDIO_CHAR_IO_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of stdio direct I/O
#
cdl_interface CYGINT_ISO_STDIO_DIRECT_IO {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_STDIO_DIRECT_IO 
    #     CYGINT_ISO_STDIO_DIRECT_IO == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDIO_DIRECT_IO
    #     Requires:  1 >= CYGINT_ISO_STDIO_DIRECT_IO 
};

# Stdio direct I/O implementation header
#
cdl_option CYGBLD_ISO_STDIO_DIRECT_IO_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of stdio file positioning
#
cdl_interface CYGINT_ISO_STDIO_FILEPOS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_STDIO_FILEPOS 
    #     CYGINT_ISO_STDIO_FILEPOS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDIO_FILEPOS
    #     Requires:  1 >= CYGINT_ISO_STDIO_FILEPOS 
};

# Stdio file positioning implementation header
#
cdl_option CYGBLD_ISO_STDIO_FILEPOS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of stdio error handling
#
cdl_interface CYGINT_ISO_STDIO_ERROR {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_STDIO_ERROR 
    #     CYGINT_ISO_STDIO_ERROR == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDIO_ERROR
    #     Requires:  1 >= CYGINT_ISO_STDIO_ERROR 
};

# Stdio error handling implementation header
#
cdl_option CYGBLD_ISO_STDIO_ERROR_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# POSIX fd-related function implementations
#
cdl_interface CYGINT_ISO_STDIO_POSIX_FDFUNCS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >=  CYGINT_ISO_STDIO_POSIX_FDFUNCS 
    #     CYGINT_ISO_STDIO_POSIX_FDFUNCS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDIO_POSIX_FDFUNCS
    #     Requires:  1 >=  CYGINT_ISO_STDIO_POSIX_FDFUNCS 
};

# POSIX fd-related function implementation header
#
cdl_option CYGBLD_ISO_STDIO_POSIX_FDFUNCS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# Standard general utility functions
#
cdl_component CYGPKG_ISO_STDLIB {
    # There is no associated value.
};

# >
# String conversion function implementations
#
cdl_interface CYGINT_ISO_STDLIB_STRCONV {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_STDLIB_STRCONV 
    #     CYGINT_ISO_STDLIB_STRCONV == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDLIB_STRCONV
    #     Requires:  1 >= CYGINT_ISO_STDLIB_STRCONV 
};

# String conversion function implementation header
#
cdl_option CYGBLD_ISO_STDLIB_STRCONV_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# String to FP conversion function implementations
#
cdl_interface CYGINT_ISO_STDLIB_STRCONV_FLOAT {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_STDLIB_STRCONV_FLOAT 
    #     CYGINT_ISO_STDLIB_STRCONV_FLOAT == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDLIB_STRCONV_FLOAT
    #     Requires:  1 >= CYGINT_ISO_STDLIB_STRCONV_FLOAT 
};

# String to FP conversion function implementation header
#
cdl_option CYGBLD_ISO_STDLIB_STRCONV_FLOAT_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Random number generator implementations
#
cdl_interface CYGINT_ISO_RAND {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_RAND 
    #     CYGINT_ISO_RAND == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_RAND
    #     Requires:  1 >= CYGINT_ISO_RAND 
};

# Random number generator implementation header
#
cdl_option CYGBLD_ISO_RAND_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Malloc implementations
#
cdl_interface CYGINT_ISO_MALLOC {
    # Implemented by CYGPKG_MEMALLOC_MALLOC_ALLOCATORS, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires:  1 >= CYGINT_ISO_MALLOC 
    #     CYGINT_ISO_MALLOC == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_MALLOC
    #     Requires:  1 >= CYGINT_ISO_MALLOC 
    # option CYGFUN_LIBC_STRING_STRDUP
    #     ActiveIf: CYGINT_ISO_MALLOC
};

# Malloc implementation header
#
cdl_option CYGBLD_ISO_MALLOC_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Mallinfo() implementations
#
cdl_interface CYGINT_ISO_MALLINFO {
    # Implemented by CYGPKG_MEMALLOC_MALLOC_ALLOCATORS, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires:  1 >= CYGINT_ISO_MALLINFO 
    #     CYGINT_ISO_MALLINFO == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_MALLINFO
    #     Requires:  1 >= CYGINT_ISO_MALLINFO 
};

# Mallinfo() implementation header
#
cdl_option CYGBLD_ISO_MALLINFO_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Program exit functionality implementations
#
cdl_interface CYGINT_ISO_EXIT {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_EXIT 
    #     CYGINT_ISO_EXIT == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_EXIT
    #     Requires:  1 >= CYGINT_ISO_EXIT 
    # option CYGFUN_INFRA_DUMMY_ABORT
    #     Requires: !CYGINT_ISO_EXIT
    # option CYGFUN_INFRA_DUMMY_ABORT
    #     DefaultValue:  CYGINT_ISO_EXIT == 0 
};

# Program exit functionality implementation header
#
cdl_option CYGBLD_ISO_EXIT_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Program environment implementations
#
cdl_interface CYGINT_ISO_STDLIB_ENVIRON {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_STDLIB_ENVIRON 
    #     CYGINT_ISO_STDLIB_ENVIRON == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDLIB_ENVIRON
    #     Requires:  1 >= CYGINT_ISO_STDLIB_ENVIRON 
};

# Program environment implementation header
#
cdl_option CYGBLD_ISO_STDLIB_ENVIRON_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# system() implementations
#
cdl_interface CYGINT_ISO_STDLIB_SYSTEM {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_STDLIB_SYSTEM 
    #     CYGINT_ISO_STDLIB_SYSTEM == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDLIB_SYSTEM
    #     Requires:  1 >= CYGINT_ISO_STDLIB_SYSTEM 
};

# system() implementation header
#
cdl_option CYGBLD_ISO_STDLIB_SYSTEM_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# bsearch() implementations
#
cdl_interface CYGINT_ISO_BSEARCH {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_BSEARCH 
    #     CYGINT_ISO_BSEARCH == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_BSEARCH
    #     Requires:  1 >= CYGINT_ISO_BSEARCH 
};

# bsearch() implementation header
#
cdl_option CYGBLD_ISO_BSEARCH_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# qsort() implementations
#
cdl_interface CYGINT_ISO_QSORT {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_STDLIB_QSORT 
    #     CYGINT_ISO_STDLIB_QSORT (unknown) == 0
    #   --> 1
};

# qsort() implementation header
#
cdl_option CYGBLD_ISO_QSORT_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# abs()/labs() implementations
#
cdl_interface CYGINT_ISO_ABS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_STDLIB_ABS 
    #     CYGINT_ISO_STDLIB_ABS (unknown) == 0
    #   --> 1
};

# abs()/labs() implementation header
#
cdl_option CYGBLD_ISO_STDLIB_ABS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# div()/ldiv() implementations
#
cdl_interface CYGINT_ISO_DIV {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_STDLIB_DIV 
    #     CYGINT_ISO_STDLIB_DIV (unknown) == 0
    #   --> 1
};

# div()/ldiv() implementation header
#
cdl_option CYGBLD_ISO_STDLIB_DIV_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Header defining the implementation's MB_CUR_MAX
#
cdl_option CYGBLD_ISO_STDLIB_MB_CUR_MAX_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Multibyte character implementations
#
cdl_interface CYGINT_ISO_STDLIB_MULTIBYTE {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_STDLIB_MULTIBYTE 
    #     CYGINT_ISO_STDLIB_MULTIBYTE == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STDLIB_MULTIBYTE
    #     Requires:  1 >= CYGINT_ISO_STDLIB_MULTIBYTE 
};

# Multibyte character implementation header
#
cdl_option CYGBLD_ISO_STDLIB_MULTIBYTE_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# String functions
#
cdl_component CYGPKG_ISO_STRING {
    # There is no associated value.
};

# >
# Number of implementations of strerror() function
#
cdl_interface CYGINT_ISO_STRERROR {
    # Implemented by CYGPKG_ERROR_STRERROR, active, enabled
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 1
    # Requires:  1 >= CYGINT_ISO_STRERROR 
    #     CYGINT_ISO_STRERROR == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STRERROR
    #     Requires:  1 >= CYGINT_ISO_STRERROR 
};

# strerror() implementation header
#
cdl_option CYGBLD_ISO_STRERROR_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # The inferred value should not be edited directly.
    inferred_value 1 <cyg/error/strerror.h>
    # value_source inferred
    # Default value: 0 0

    # The following properties are affected by this value
    # option CYGPKG_ERROR_STRERROR
    #     Requires:  CYGBLD_ISO_STRERROR_HEADER == "<cyg/error/strerror.h>" 
};

# memcpy() implementation header
#
cdl_option CYGBLD_ISO_MEMCPY_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# memset() implementation header
#
cdl_option CYGBLD_ISO_MEMSET_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of strtok_r() function
#
cdl_interface CYGINT_ISO_STRTOK_R {
    # Implemented by CYGPKG_LIBC_STRING, active, enabled
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 1
    # Requires:  1 >= CYGINT_ISO_STRTOK_R 
    #     CYGINT_ISO_STRTOK_R == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STRTOK_R
    #     Requires:  1 >= CYGINT_ISO_STRTOK_R 
};

# strtok_r() implementation header
#
cdl_option CYGBLD_ISO_STRTOK_R_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # The inferred value should not be edited directly.
    inferred_value 1 <cyg/libc/string/string.h>
    # value_source inferred
    # Default value: 0 0

    # The following properties are affected by this value
    # package CYGPKG_LIBC_STRING
    #     Requires:  CYGBLD_ISO_STRTOK_R_HEADER ==  "<cyg/libc/string/string.h>" 
};

# Number of implementations of locale-specific string  functions
# This covers locale-dependent string functions such as strcoll()
# and strxfrm().
#
cdl_interface CYGINT_ISO_STRING_LOCALE_FUNCS {
    # Implemented by CYGPKG_LIBC_STRING, active, enabled
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 1
    # Requires:  1 >= CYGINT_ISO_STRING_LOCALE_FUNCS 
    #     CYGINT_ISO_STRING_LOCALE_FUNCS == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STRING_LOCALE_FUNCS
    #     Requires:  1 >= CYGINT_ISO_STRING_LOCALE_FUNCS 
};

# Locale-specific string functions' implementation  header
# This covers locale-dependent string functions such as strcoll()
# and strxfrm().
#
cdl_option CYGBLD_ISO_STRING_LOCALE_FUNCS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # The inferred value should not be edited directly.
    inferred_value 1 <cyg/libc/string/string.h>
    # value_source inferred
    # Default value: 0 0

    # The following properties are affected by this value
    # package CYGPKG_LIBC_STRING
    #     Requires:  CYGBLD_ISO_STRING_LOCALE_FUNCS_HEADER ==  "<cyg/libc/string/string.h>" 
};

# Number of implementations of BSD string functions
#
cdl_interface CYGINT_ISO_STRING_BSD_FUNCS {
    # Implemented by CYGFUN_LIBC_STRING_BSD_FUNCS, active, disabled
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_STRING_BSD_FUNCS 
    #     CYGINT_ISO_STRING_BSD_FUNCS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STRING_BSD_FUNCS
    #     Requires:  1 >= CYGINT_ISO_STRING_BSD_FUNCS 
};

# BSD string functions' implementation header
#
cdl_option CYGBLD_ISO_STRING_BSD_FUNCS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # The inferred value should not be edited directly.
    inferred_value 1 <cyg/libc/string/bsdstring.h>
    # value_source inferred
    # Default value: 0 0

    # The following properties are affected by this value
    # option CYGFUN_LIBC_STRING_BSD_FUNCS
    #     Requires:  CYGBLD_ISO_STRING_BSD_FUNCS_HEADER ==  "<cyg/libc/string/bsdstring.h>" 
};

# Number of implementations of other mem*() functions
#
cdl_interface CYGINT_ISO_STRING_MEMFUNCS {
    # Implemented by CYGPKG_LIBC_STRING, active, enabled
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 1
    # Requires:  1 >= CYGINT_ISO_STRING_MEMFUNCS 
    #     CYGINT_ISO_STRING_MEMFUNCS == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STRING_MEMFUNCS
    #     Requires:  1 >= CYGINT_ISO_STRING_MEMFUNCS 
    # component CYGPKG_IO_ETH_DRIVERS_STAND_ALONE
    #     Requires: CYGINT_ISO_STRING_MEMFUNCS
    # option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_USE_MEMCPY
    #     Requires: CYGINT_ISO_STRING_MEMFUNCS
    # option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_USE_MEMCPY
    #     DefaultValue:  (0 != CYGPKG_ISOINFRA) && (0 != CYGINT_ISO_STRING_MEMFUNCS) 
};

# Other mem*() functions' implementation header
#
cdl_option CYGBLD_ISO_STRING_MEMFUNCS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # The inferred value should not be edited directly.
    inferred_value 1 <cyg/libc/string/string.h>
    # value_source inferred
    # Default value: 0 0

    # The following properties are affected by this value
    # package CYGPKG_LIBC_STRING
    #     Requires:  CYGBLD_ISO_STRING_MEMFUNCS_HEADER ==  "<cyg/libc/string/string.h>" 
};

# Number of implementations of other ISO C str*()  functions
# This covers the other str*() functions defined by ISO C.
#
cdl_interface CYGINT_ISO_STRING_STRFUNCS {
    # Implemented by CYGPKG_LIBC_STRING, active, enabled
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 1
    # Requires:  1 >= CYGINT_ISO_STRING_STRFUNCS 
    #     CYGINT_ISO_STRING_STRFUNCS == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_STRING_STRFUNCS
    #     Requires:  1 >= CYGINT_ISO_STRING_STRFUNCS 
    # component CYGPKG_IO_ETH_DRIVERS_NET
    #     Requires: CYGINT_ISO_STRING_STRFUNCS
    # option CYGFUN_INFRA_DUMMY_STRLEN
    #     Requires: !CYGINT_ISO_STRING_STRFUNCS
    # option CYGFUN_INFRA_DUMMY_STRLEN
    #     DefaultValue:  CYGINT_ISO_STRING_STRFUNCS == 0 
};

# Other ISO C str*() functions' implementation  header
# This covers the other str*() functions defined by ISO C.
#
cdl_option CYGBLD_ISO_STRING_STRFUNCS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # The inferred value should not be edited directly.
    inferred_value 1 <cyg/libc/string/string.h>
    # value_source inferred
    # Default value: 0 0

    # The following properties are affected by this value
    # package CYGPKG_LIBC_STRING
    #     Requires:  CYGBLD_ISO_STRING_STRFUNCS_HEADER ==  "<cyg/libc/string/string.h>" 
};

# <
# Clock and time functionality
#
cdl_component CYGPKG_ISO_TIME {
    # There is no associated value.
};

# >
# time_t implementation header
#
cdl_option CYGBLD_ISO_TIME_T_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# clock_t implementation header
#
cdl_option CYGBLD_ISO_CLOCK_T_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# struct timeval implementation header
#
cdl_option CYGBLD_ISO_STRUCTTIMEVAL_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# fnmatch implementation header
#
cdl_option CYGBLD_ISO_FNMATCH_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of POSIX timer types
#
cdl_interface CYGINT_ISO_POSIX_TIMER_TYPES {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_POSIX_TIMER_TYPES 
    #     CYGINT_ISO_POSIX_TIMER_TYPES == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_POSIX_TIMER_TYPES
    #     Requires:  1 >= CYGINT_ISO_POSIX_TIMER_TYPES 
};

# POSIX timer types implementation header
#
cdl_option CYGBLD_ISO_POSIX_TIMER_TYPES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of POSIX clock types
#
cdl_interface CYGINT_ISO_POSIX_CLOCK_TYPES {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_POSIX_CLOCK_TYPES 
    #     CYGINT_ISO_POSIX_CLOCK_TYPES == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_POSIX_CLOCK_TYPES
    #     Requires:  1 >= CYGINT_ISO_POSIX_CLOCK_TYPES 
};

# POSIX clock types implementation header
#
cdl_option CYGBLD_ISO_POSIX_CLOCK_TYPES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of ISO C types
#
cdl_interface CYGINT_ISO_C_TIME_TYPES {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_C_TIME_TYPES 
    #     CYGINT_ISO_C_TIME_TYPES == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_C_TIME_TYPES
    #     Requires:  1 >= CYGINT_ISO_C_TIME_TYPES 
};

# ISO C time types implementation header
#
cdl_option CYGBLD_ISO_C_TIME_TYPES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of POSIX timers
#
cdl_interface CYGINT_ISO_POSIX_TIMERS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_POSIX_TIMERS 
    #     CYGINT_ISO_POSIX_TIMERS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_POSIX_TIMERS
    #     Requires:  1 >= CYGINT_ISO_POSIX_TIMERS 
};

# POSIX timer implementation header
#
cdl_option CYGBLD_ISO_POSIX_TIMERS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of POSIX clocks
#
cdl_interface CYGINT_ISO_POSIX_CLOCKS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_POSIX_CLOCKS 
    #     CYGINT_ISO_POSIX_CLOCKS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_POSIX_CLOCKS
    #     Requires:  1 >= CYGINT_ISO_POSIX_CLOCKS 
};

# POSIX clocks implementation header
#
cdl_option CYGBLD_ISO_POSIX_CLOCKS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of ISO C clock functions
#
cdl_interface CYGINT_ISO_C_CLOCK_FUNCS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_C_CLOCK_FUNCS 
    #     CYGINT_ISO_C_CLOCK_FUNCS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_C_CLOCK_FUNCS
    #     Requires:  1 >= CYGINT_ISO_C_CLOCK_FUNCS 
};

# ISO C clock functions' implementation header
#
cdl_option CYGBLD_ISO_C_CLOCK_FUNCS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of implementations of tzset() function
#
cdl_interface CYGINT_ISO_TZSET {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_TZSET 
    #     CYGINT_ISO_TZSET == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_TZSET
    #     Requires:  1 >= CYGINT_ISO_TZSET 
};

# tzset() implementation header
#
cdl_option CYGBLD_ISO_TZSET_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# Signal functionality
#
cdl_component CYGPKG_ISO_SIGNAL {
    # There is no associated value.
};

# >
# Number of implementations of signal numbers
#
cdl_interface CYGINT_ISO_SIGNAL_NUMBERS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_SIGNAL_NUMBERS 
    #     CYGINT_ISO_SIGNAL_NUMBERS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_SIGNAL_NUMBERS
    #     Requires:  1 >= CYGINT_ISO_SIGNAL_NUMBERS 
};

# Signal numbering implementation header
# This header provides the mapping of signal
# names (e.g. SIGBUS) to numbers.
#
cdl_option CYGBLD_ISO_SIGNAL_NUMBERS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Number of signal implementations
#
cdl_interface CYGINT_ISO_SIGNAL_IMPL {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_SIGNAL_IMPL 
    #     CYGINT_ISO_SIGNAL_IMPL == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_SIGNAL_IMPL
    #     Requires:  1 >= CYGINT_ISO_SIGNAL_IMPL 
};

# Signals implementation header
#
cdl_option CYGBLD_ISO_SIGNAL_IMPL_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# POSIX real time signals feature test macro
# This defines the POSIX feature test macro
# that indicates that the POSIX real time signals
# are present.
#
cdl_interface CYGINT_POSIX_REALTIME_SIGNALS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_POSIX_REALTIME_SIGNALS 
    #     CYGINT_POSIX_REALTIME_SIGNALS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_POSIX_REALTIME_SIGNALS
    #     Requires:  1 >= CYGINT_POSIX_REALTIME_SIGNALS 
};

# <
# Non-local jumps functionality
#
cdl_component CYGPKG_ISO_SETJMP {
    # There is no associated value.
};

# >
# setjmp() / longjmp() implementations
#
cdl_interface CYGINT_ISO_SETJMP {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_SETJMP 
    #     CYGINT_ISO_SETJMP == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_SETJMP
    #     Requires:  1 >= CYGINT_ISO_SETJMP 
};

# setjmp() / longjmp() implementation header
#
cdl_option CYGBLD_ISO_SETJMP_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# sigsetjmp() / siglongjmp() implementations
#
cdl_interface CYGINT_ISO_SIGSETJMP {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_SIGSETJMP 
    #     CYGINT_ISO_SIGSETJMP == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_SIGSETJMP
    #     Requires:  1 >= CYGINT_ISO_SIGSETJMP 
};

# sigsetjmp() / siglongjmp() implementation header
#
cdl_option CYGBLD_ISO_SIGSETJMP_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# Assertions implementation header
#
cdl_option CYGBLD_ISO_ASSERT_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# POSIX file control
# This covers the POSIX file control definitions,
# normally found in <fcntl.h>
#
cdl_component CYGPKG_ISO_POSIX_FCNTL {
    # There is no associated value.
};

# >
# POSIX open flags implementation header
#
cdl_option CYGBLD_ISO_OFLAG_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# POSIX fcntl() implementations
#
cdl_interface CYGINT_ISO_FCNTL {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_FCNTL 
    #     CYGINT_ISO_FCNTL == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_FCNTL
    #     Requires:  1 >= CYGINT_ISO_FCNTL 
};

# POSIX fcntl() implementation header
#
cdl_option CYGBLD_ISO_FCNTL_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# POSIX file open implementations
#
cdl_interface CYGINT_ISO_OPEN {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_OPEN 
    #     CYGINT_ISO_OPEN == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_OPEN
    #     Requires:  1 >= CYGINT_ISO_OPEN 
};

# POSIX file open implementation header
#
cdl_option CYGBLD_ISO_OPEN_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# <sys/stat.h> definitions implementation header
#
cdl_option CYGBLD_ISO_STAT_DEFS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# POSIX directory reading implementation
#
cdl_interface CYGINT_ISO_DIRENT {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_DIRENT 
    #     CYGINT_ISO_DIRENT == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_DIRENT
    #     Requires:  1 >= CYGINT_ISO_DIRENT 
};

# <dirent.h> definitions implementation header
#
cdl_option CYGBLD_ISO_DIRENT_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# POSIX <sys/types.h> contents
# This covers the types required by POSIX to be in
# <sys/types.h>
#
cdl_component CYGPKG_ISO_POSIX_TYPES {
    # There is no associated value.
};

# >
# POSIX thread types implementations
#
cdl_interface CYGINT_ISO_PTHREADTYPES {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_PTHREADTYPES 
    #     CYGINT_ISO_PTHREADTYPES == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_PTHREADTYPES
    #     Requires:  1 >= CYGINT_ISO_PTHREADTYPES 
    # interface CYGINT_ISO_PMUTEXTYPES
    #     Requires:  1 >= CYGINT_ISO_PTHREADTYPES 
};

# POSIX thread types implementation header
#
cdl_option CYGBLD_ISO_PTHREADTYPES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# POSIX mutex types implementations
#
cdl_interface CYGINT_ISO_PMUTEXTYPES {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_PTHREADTYPES 
    #     CYGINT_ISO_PTHREADTYPES == 0
    #   --> 1
};

# POSIX mutex types implementation header
#
cdl_option CYGBLD_ISO_PMUTEXTYPES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# ssize_t implementation header
#
cdl_option CYGBLD_ISO_SSIZE_T_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Filesystem types implementation header
#
cdl_option CYGBLD_ISO_FSTYPES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# gid_t, pid_t, uid_t implementation header
#
cdl_option CYGBLD_ISO_SCHEDTYPES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# Non-POSIX <sys/types.h> contents
# This covers the extra types required by non-POSIX
# packages to be in <sys/types.h>. These would normally
# only be visible if _POSIX_SOURCE is not defined.
#
cdl_component CYGPKG_ISO_EXTRA_TYPES {
    # There is no associated value.
};

# >
# BSD compatible types
#
cdl_interface CYGINT_ISO_BSDTYPES {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_BSDTYPES 
    #     CYGINT_ISO_BSDTYPES == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_BSDTYPES
    #     Requires:  1 >= CYGINT_ISO_BSDTYPES 
};

# BSD types header
#
cdl_option CYGBLD_ISO_BSDTYPES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# Utsname structure
#
cdl_component CYGPKG_ISO_UTSNAME {
    # There is no associated value.
};

# >
# Utsname header
#
cdl_option CYGBLD_ISO_UTSNAME_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# POSIX scheduler
#
cdl_component CYGPKG_ISO_SCHED {
    # There is no associated value.
};

# >
# POSIX scheduler implementations
#
cdl_interface CYGINT_ISO_SCHED_IMPL {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_SCHED_IMPL 
    #     CYGINT_ISO_SCHED_IMPL == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_SCHED_IMPL
    #     Requires:  1 >= CYGINT_ISO_SCHED_IMPL 
};

# POSIX scheduler implementation header
#
cdl_option CYGBLD_ISO_SCHED_IMPL_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# POSIX semaphores
#
cdl_component CYGPKG_ISO_SEMAPHORES {
    # There is no associated value.
};

# >
# POSIX semaphore implementations
#
cdl_interface CYGINT_ISO_SEMAPHORES {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_SEMAPHORES 
    #     CYGINT_ISO_SEMAPHORES == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_SEMAPHORES
    #     Requires:  1 >= CYGINT_ISO_SEMAPHORES 
};

# POSIX semaphore implementation header
#
cdl_option CYGBLD_ISO_SEMAPHORES_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# POSIX message queues
#
cdl_component CYGPKG_ISO_MQUEUE {
    # There is no associated value.
};

# >
# Implementations
#
cdl_interface CYGINT_ISO_MQUEUE {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_MQUEUE 
    #     CYGINT_ISO_MQUEUE == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_MQUEUE
    #     Requires:  1 >= CYGINT_ISO_MQUEUE 
    # option CYGNUM_ISO_MQUEUE_OPEN_MAX
    #     ActiveIf: CYGINT_ISO_MQUEUE
    # option CYGNUM_ISO_MQUEUE_PRIO_MAX
    #     ActiveIf: CYGINT_ISO_MQUEUE
};

# Implementation header
#
cdl_option CYGBLD_ISO_MQUEUE_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Maximum number of open message queues
#
cdl_option CYGNUM_ISO_MQUEUE_OPEN_MAX {
    # This option is not active
    # ActiveIf constraint: CYGINT_ISO_MQUEUE
    #     CYGINT_ISO_MQUEUE == 0
    #   --> 0

    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value:  CYGNUM_POSIX_MQUEUE_OPEN_MAX > 0 ? CYGNUM_POSIX_MQUEUE_OPEN_MAX : 0 
    #     CYGNUM_POSIX_MQUEUE_OPEN_MAX (unknown) == 0
    #     CYGNUM_POSIX_MQUEUE_OPEN_MAX (unknown) == 0
    #   --> 0 0
};

# Maximum number of message priorities
#
cdl_option CYGNUM_ISO_MQUEUE_PRIO_MAX {
    # This option is not active
    # ActiveIf constraint: CYGINT_ISO_MQUEUE
    #     CYGINT_ISO_MQUEUE == 0
    #   --> 0

    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 1 65535
    # value_source default
    # Default value: 1 65535
};

# <
# POSIX threads
#
cdl_component CYGPKG_ISO_PTHREAD {
    # There is no associated value.
};

# >
# POSIX pthread implementations
#
cdl_interface CYGINT_ISO_PTHREAD_IMPL {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_PTHREAD_IMPL 
    #     CYGINT_ISO_PTHREAD_IMPL == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_PTHREAD_IMPL
    #     Requires:  1 >= CYGINT_ISO_PTHREAD_IMPL 
};

# POSIX pthread implementation header
#
cdl_option CYGBLD_ISO_PTHREAD_IMPL_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# POSIX mutex/cond var implementations
#
cdl_interface CYGINT_ISO_PTHREAD_MUTEX {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_PTHREAD_MUTEX 
    #     CYGINT_ISO_PTHREAD_MUTEX == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_PTHREAD_MUTEX
    #     Requires:  1 >= CYGINT_ISO_PTHREAD_MUTEX 
};

# POSIX mutex/cond var implementation header
#
cdl_option CYGBLD_ISO_PTHREAD_MUTEX_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# Limits
#
cdl_component CYGPKG_ISO_LIMITS {
    # There is no associated value.
};

# >
# POSIX pthread limits implementations
#
cdl_interface CYGINT_ISO_POSIX_LIMITS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_POSIX_LIMITS 
    #     CYGINT_ISO_POSIX_LIMITS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_POSIX_LIMITS
    #     Requires:  1 >= CYGINT_ISO_POSIX_LIMITS 
};

# POSIX pthread limits implementation header
#
cdl_option CYGBLD_ISO_POSIX_LIMITS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# OPEN_MAX implementation header
#
cdl_option CYGBLD_ISO_OPEN_MAX_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# LINK_MAX implementation header
#
cdl_option CYGBLD_ISO_LINK_MAX_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# NAME_MAX implementation header
#
cdl_option CYGBLD_ISO_NAME_MAX_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# PATH_MAX implementation header
#
cdl_option CYGBLD_ISO_PATH_MAX_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# POSIX termios
#
cdl_component CYGPKG_ISO_TERMIOS {
    # There is no associated value.
};

# >
# POSIX termios implementations
#
cdl_interface CYGINT_ISO_TERMIOS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_TERMIOS 
    #     CYGINT_ISO_TERMIOS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_TERMIOS
    #     Requires:  1 >= CYGINT_ISO_TERMIOS 
};

# POSIX termios implementation header
#
cdl_option CYGBLD_ISO_TERMIOS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# Dynamic load API
#
cdl_component CYGPKG_ISO_DLFCN {
    # There is no associated value.
};

# >
# Dynamic load implementations
#
cdl_interface CYGINT_ISO_DLFCN {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  1 >= CYGINT_ISO_DLFCN 
    #     CYGINT_ISO_DLFCN == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_DLFCN
    #     Requires:  1 >= CYGINT_ISO_DLFCN 
};

# Dynamic load implementation header
#
cdl_option CYGBLD_ISO_DLFCN_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# UNIX standard functions
#
cdl_component CYGPKG_ISO_UNISTD {
    # There is no associated value.
};

# >
# POSIX timer operations implementations
#
cdl_interface CYGINT_ISO_POSIX_TIMER_OPS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_POSIX_TIMER_OPS 
    #     CYGINT_ISO_POSIX_TIMER_OPS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_POSIX_TIMER_OPS
    #     Requires:  1 >= CYGINT_ISO_POSIX_TIMER_OPS 
};

# POSIX timer operations implementation header
#
cdl_option CYGBLD_ISO_POSIX_TIMER_OPS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# POSIX sleep() implementations
#
cdl_interface CYGINT_ISO_POSIX_SLEEP {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_POSIX_SLEEP 
    #     CYGINT_ISO_POSIX_SLEEP == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_POSIX_SLEEP
    #     Requires:  1 >= CYGINT_ISO_POSIX_SLEEP 
};

# POSIX sleep() implementation header
#
cdl_option CYGBLD_ISO_POSIX_SLEEP_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# select()/poll() functions
#
cdl_component CYGPKG_ISO_SELECT {
    # There is no associated value.
};

# >
# select() implementations
#
cdl_interface CYGINT_ISO_SELECT {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_SELECT 
    #     CYGINT_ISO_SELECT == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_SELECT
    #     Requires:  1 >= CYGINT_ISO_SELECT 
};

# select() implementation header
#
cdl_option CYGBLD_ISO_SELECT_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# poll() implementations
#
cdl_interface CYGINT_ISO_POLL {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 0 0
    # Requires:  1 >= CYGINT_ISO_POLL 
    #     CYGINT_ISO_POLL == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_POLL
    #     Requires:  1 >= CYGINT_ISO_POLL 
};

# poll() implementation header
#
cdl_option CYGBLD_ISO_POLL_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# NetDB utility functions
#
cdl_component CYGPKG_ISO_NETDB {
    # There is no associated value.
};

# >
# DNS implementations
#
cdl_interface CYGINT_ISO_DNS {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: bool
    # Current value: 0
    # Requires:  1 >= CYGINT_ISO_DNS 
    #     CYGINT_ISO_DNS == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_DNS
    #     Requires:  1 >= CYGINT_ISO_DNS 
};

# DNS implementation header
#
cdl_option CYGBLD_ISO_DNS_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Protocol network database implementations
#
cdl_interface CYGINT_ISO_NETDB_PROTO {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: bool
    # Current value: 0
    # Requires:  1 >= CYGINT_ISO_NETDB_PROTO 
    #     CYGINT_ISO_NETDB_PROTO == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_NETDB_PROTO
    #     Requires:  1 >= CYGINT_ISO_NETDB_PROTO 
};

# Protocol network database implementation header
#
cdl_option CYGBLD_ISO_NETDB_PROTO_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# Services network database implementations
#
cdl_interface CYGINT_ISO_NETDB_SERV {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: bool
    # Current value: 0
    # Requires:  1 >= CYGINT_ISO_NETDB_SERV 
    #     CYGINT_ISO_NETDB_SERV == 0
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_ISO_NETDB_SERV
    #     Requires:  1 >= CYGINT_ISO_NETDB_SERV 
};

# Services network database implementation header
#
cdl_option CYGBLD_ISO_NETDB_SERV_HEADER {
    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 0 0
    # value_source default
    # Default value: 0 0
};

# <
# Build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_ISOINFRA_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the ISO C and POSIX infrastructure package.
# These flags are used in addition to the set of global flags.
#
cdl_option CYGPKG_ISOINFRA_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the ISO C and POSIX infrastructure package.
# These flags are removed from the set of global flags
# if present.
#
cdl_option CYGPKG_ISOINFRA_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# <
# <
# lwIP networking stack
# The lightweight TCP/IP stack.
#
cdl_package CYGPKG_NET_LWIP {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires: CYGINT_ISO_ERRNO_CODES
    #     CYGINT_ISO_ERRNO_CODES == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGPKG_IO_ETH_DRIVERS_STAND_ALONE
    #     ActiveIf:  !CYGPKG_NET && !CYGPKG_NET_LWIP 
    # component CYGPKG_IO_ETH_DRIVERS_LWIP
    #     ActiveIf: CYGPKG_NET_LWIP
};

# >
# Enabled lwIP modes
# This interface is used to force mutually exclusive selection of
# the available lwIP modes.
#
cdl_interface CYGINT_LWIP_MODES {
    # Implemented by CYGFUN_LWIP_MODE_SIMPLE, active, enabled
    # Implemented by CYGFUN_LWIP_MODE_SEQUENTIAL, active, disabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires: CYGINT_LWIP_MODES == 1
    #     CYGINT_LWIP_MODES == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_LWIP_MODES
    #     Requires: CYGINT_LWIP_MODES == 1
};

# Simple mode
# lwIP stack is configured to run in a single thread. Use this mode
# if lwIP should run with a minimum of resources. Note that you can
# only use the event based APIs in this mode.
#
cdl_option CYGFUN_LWIP_MODE_SIMPLE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Sequential mode
# lwIP stack is configured to run in multiple threads. Use this mode
# if you can spend some more resources on lwIP and you want to use
# the networking stack from within other threads using the more
# convenient netcomm and socket APIs.
#
cdl_option CYGFUN_LWIP_MODE_SEQUENTIAL {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # component CYGPKG_LWIP_NETCONN_API
    #     ActiveIf: CYGFUN_LWIP_MODE_SEQUENTIAL
    # component CYGPKG_LWIP_NETCONN_API
    #     Requires: CYGFUN_LWIP_MODE_SEQUENTIAL
    # component CYGPKG_LWIP_SOCKET_API
    #     ActiveIf: CYGFUN_LWIP_MODE_SEQUENTIAL
    # component CYGPKG_LWIP_SOCKET_API
    #     Requires: CYGFUN_LWIP_MODE_SEQUENTIAL
    # component CYGPKG_LWIP_THREADS
    #     ActiveIf: CYGFUN_LWIP_MODE_SEQUENTIAL
};

# Items requiring lwIP serial operations
# Items requiring use of the lwIP serial operations code should
# implement this interface.
#
cdl_interface CYGINT_LWIP_SIO_REQUIRED {
    # Implemented by CYGPKG_LWIP_SLIP, active, disabled
    # Implemented by CYGFUN_LWIP_PPPOS_SUPPORT, inactive, disabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0

    # The following properties are affected by this value
    # option CYGFUN_LWIP_SIO
    #     Calculated:  CYGINT_LWIP_SIO_REQUIRED > 0 
};

# Serial operations support
#
cdl_option CYGFUN_LWIP_SIO {
    # Calculated value:  CYGINT_LWIP_SIO_REQUIRED > 0 
    #     CYGINT_LWIP_SIO_REQUIRED == 0
    # Flavor: bool
    # Current value: 0
    # Requires: CYGPKG_IO_SERIAL
    #     CYGPKG_IO_SERIAL (unknown) == 0
    #   --> 0
};

# APIs
# Configuration for Application-Programming-Interfaces.
#
cdl_component CYGPKG_LWIP_APIS {
    # There is no associated value.
};

# >
# RAW support
# Enable application layer to hook into the IP layer itself.
#
cdl_component CYGPKG_LWIP_RAW {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# RAW Time-To-Live
# Default value for Time-To-Live used by RAW packets.
#
cdl_option CYGNUM_LWIP_RAW_TTL {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255
    # value_source default
    # Default value:  CYGNUM_LWIP_IP_DEFAULT_TTL 
    #     CYGNUM_LWIP_IP_DEFAULT_TTL == 255
    #   --> 255
};

# <
# Netif support
# Support for the netif API.
#
cdl_component CYGPKG_LWIP_NETIF_API {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Netconn support
# Support for the netconn API. Requires the "Sequential" mode.
#
cdl_component CYGPKG_LWIP_NETCONN_API {
    # This option is not active
    # ActiveIf constraint: CYGFUN_LWIP_MODE_SEQUENTIAL
    #     CYGFUN_LWIP_MODE_SEQUENTIAL == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGFUN_LWIP_MODE_SEQUENTIAL
    #     CYGFUN_LWIP_MODE_SEQUENTIAL == 0
    #   --> 0

    # The following properties are affected by this value
    # component CYGPKG_LWIP_SOCKET_API
    #     Requires: CYGPKG_LWIP_NETCONN_API
};

# Socket support
# Support for the socket API. Requires the "Sequential" mode.
#
cdl_component CYGPKG_LWIP_SOCKET_API {
    # This option is not active
    # ActiveIf constraint: CYGFUN_LWIP_MODE_SEQUENTIAL
    #     CYGFUN_LWIP_MODE_SEQUENTIAL == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGFUN_LWIP_MODE_SEQUENTIAL
    #     CYGFUN_LWIP_MODE_SEQUENTIAL == 0
    #   --> 0
    # Requires: CYGPKG_LWIP_NETCONN_API
    #     CYGPKG_LWIP_NETCONN_API == 0
    #   --> 0
};

# >
# BSD-style sockets
# Enable BSD-style sockets functions names.
#
cdl_option CYGFUN_LWIP_COMPAT_SOCKETS {
    # This option is not active
    # The parent CYGPKG_LWIP_SOCKET_API is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# POSIX-style sockets
# Enable POSIX-style sockets functions names. Disable this
# option if you use a POSIX operating system that uses the
# same names (read, write & close).
#
cdl_option CYGFUN_LWIP_POSIX_SOCKETS_IO_NAMES {
    # This option is not active
    # The parent CYGPKG_LWIP_SOCKET_API is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Keepalive options
# Enable TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT options
# processing. Note that TCP_KEEPIDLE and TCP_KEEPINTVL have
# to be set in seconds.
#
cdl_option CYGFUN_LWIP_TCP_KEEPALIVE {
    # This option is not active
    # The parent CYGPKG_LWIP_SOCKET_API is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# SO_RCVTIMEO option
# Enable SO_RCVTIMEO processing.
#
cdl_option CYGFUN_LWIP_SO_RCVTIMEO {
    # This option is not active
    # The parent CYGPKG_LWIP_SOCKET_API is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# SO_RCVBUF option
# Enable SO_RCVBUF processing.
#
cdl_option CYGFUN_LWIP_SO_RCVBUF {
    # This option is not active
    # The parent CYGPKG_LWIP_SOCKET_API is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# <
# Protocols
# Configuration options for protocols.
#
cdl_component CYGPKG_LWIP_PROTOCOLS {
    # There is no associated value.
};

# >
# ARP support
# Support for ARP functionality.
#
cdl_component CYGPKG_LWIP_ARP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGFUN_LWIP_DHCP_DOES_ARP_CHECK
    #     Requires: CYGPKG_LWIP_ARP
    # component CYGPKG_LWIP_AUTOIP
    #     Requires: CYGPKG_LWIP_ARP
    # component CYGPKG_LWIP_ETH
    #     Requires: CYGPKG_LWIP_ARP
    # option CYGNUM_LWIP_MEMP_NUM_CORE_SYS_TIMEOUT
    #     Calculated:  CYGPKG_LWIP_TCP + CYGFUN_LWIP_IP_REASSEMBLY +
    #                                   CYGPKG_LWIP_ARP + (CYGPKG_LWIP_DHCP * 2) +
    #                                   CYGPKG_LWIP_AUTOIP + CYGPKG_LWIP_IGMP +
    #                                   CYGPKG_LWIP_DNS + CYGPKG_LWIP_PPP 
};

# >
# ARP table size
# Number of active MAC-IP address pairs cached.
#
cdl_option CYGNUM_LWIP_ARP_TABLE_SIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 10
    # value_source default
    # Default value: 10
};

# ARP queueing
# Outgoing packets are queued during hardware address
# resolution.
#
cdl_option CYGFUN_LWIP_ARP_QUEUEING {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_MEMP_NUM_ARP_QUEUE
    #     ActiveIf:  CYGFUN_LWIP_ARP_QUEUEING 
};

# Trust IP/MAC
# Incoming IP packets cause the ARP table to be updated with
# the source MAC and IP addresses supplied in the packet. You
# may want to disable this if you do not trust LAN peers to
# have the correct addresses, or as a limited approach to
# attempt to handle spoofing. If disabled, lwIP will need to
# make a new ARP request if the peer is not already in the
# ARP table, adding a little latency.
#
cdl_option CYGFUN_LWIP_ETHARP_TRUST_IP_MAC {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# IP options
# Configuration options for IP protocol.
#
cdl_component CYGPKG_LWIP_IP {
    # There is no associated value.

    # The following properties are affected by this value
    # component CYGPKG_LWIP_UDP
    #     Requires: CYGPKG_LWIP_IP
    # component CYGPKG_LWIP_TCP
    #     Requires: CYGPKG_LWIP_IP
};

# >
# Support IP forwarding
# Enables the ability to forward IP packets across network
# interfaces. If you are going to run lwIP on a device with
# only one network interface, define this to 0.
#
cdl_option CYGFUN_LWIP_IP_FORWARD {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Allow IP options
# Defines the behavior for IP options:
# 0 = All packets with IP options are dropped.
# 1 = IP options are allowed (but not parsed).
#
cdl_option CYGFUN_LWIP_IP_OPTIONS_ALLOWED {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Support IP reassembly
# Reassemble incoming fragmented IP packets. Note that this
# option does not affect outgoing packet sizes, which can be
# controlled via CYGFUN_LWIP_IP_FRAG.
#
cdl_option CYGFUN_LWIP_IP_REASSEMBLY {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_MEMP_NUM_CORE_SYS_TIMEOUT
    #     Calculated:  CYGPKG_LWIP_TCP + CYGFUN_LWIP_IP_REASSEMBLY +
    #                                   CYGPKG_LWIP_ARP + (CYGPKG_LWIP_DHCP * 2) +
    #                                   CYGPKG_LWIP_AUTOIP + CYGPKG_LWIP_IGMP +
    #                                   CYGPKG_LWIP_DNS + CYGPKG_LWIP_PPP 
    # option CYGVAR_LWIP_IPFARG_STATS
    #     ActiveIf:  CYGFUN_LWIP_IP_REASSEMBLY ||
    #                                   CYGFUN_LWIP_IP_FRAG 
};

# Support IP fragmentation
# Fragment outgoing IP packets if their size exceeds MTU.
# Note that this option does not affect incoming packet
# sizes, which can be controlled via
# CYGFUN_LWIP_IP_REASSEMBLY.
#
cdl_option CYGFUN_LWIP_IP_FRAG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGVAR_LWIP_IPFARG_STATS
    #     ActiveIf:  CYGFUN_LWIP_IP_REASSEMBLY ||
    #                                   CYGFUN_LWIP_IP_FRAG 
};

# Max reassembly time
# Maximum time (in multiples of IP_TMR_INTERVAL - so seconds,
# normally) a fragmented IP packet waits for all fragments to
# arrive. If not all fragments arrived in this time, the
# whole packet is discarded.
#
cdl_option CYGNUM_LWIP_IP_REASS_MAXAGE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 3
    # value_source default
    # Default value: 3
};

# Max reassembly time
# Total maximum amount of pbufs waiting to be reassembled.
# Since the received pbufs are enqueued, be sure to configure
# CYGNUM_LWIP_PBUF_BOOL_SIZE > CYGNUM_LWIP_IP_REASS_MAX_PBUFS
# so that the stack is still able to receive packets even if
# the maximum amount of fragments is enqueued for reassembly!
#
cdl_option CYGNUM_LWIP_IP_REASS_MAX_PBUFS {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 10
    # value_source default
    # Default value: 10
    # Requires:  CYGNUM_LWIP_PBUF_BOOL_SIZE <
    #                                       CYGNUM_LWIP_IP_REASS_MAX_PBUFS 
    #     CYGNUM_LWIP_PBUF_BOOL_SIZE (unknown) == 0
    #     CYGNUM_LWIP_IP_REASS_MAX_PBUFS == 10
    #   --> 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_IP_REASS_MAX_PBUFS
    #     Requires:  CYGNUM_LWIP_PBUF_BOOL_SIZE <
    #                                       CYGNUM_LWIP_IP_REASS_MAX_PBUFS 
};

# Use static buffer for IP fragmentation
# Use a static MTU-sized buffer for IP fragmentation.
# Otherwise pbufs are allocated and reference the original
# packet data to be fragmented.
#
cdl_option CYGFUN_LWIP_IP_FRAG_USES_STATIC_BUF {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_IP_FRAG_MAX_MTU
    #     ActiveIf:  CYGFUN_LWIP_IP_FRAG_USES_STATIC_BUF 
};

# Max MTU size
# Assumed max MTU on any interface for IP frag buffer.
#
cdl_option CYGNUM_LWIP_IP_FRAG_MAX_MTU {
    # ActiveIf constraint:  CYGFUN_LWIP_IP_FRAG_USES_STATIC_BUF 
    #     CYGFUN_LWIP_IP_FRAG_USES_STATIC_BUF == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1500
    # value_source default
    # Default value: 1500
};

# Default Time-To-Live
# Default value for Time-To-Live used by transport layers.
#
cdl_option CYGNUM_LWIP_IP_DEFAULT_TTL {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255
    # value_source default
    # Default value: 255

    # The following properties are affected by this value
    # option CYGNUM_LWIP_RAW_TTL
    #     DefaultValue:  CYGNUM_LWIP_IP_DEFAULT_TTL 
    # option CYGNUM_LWIP_ICMP_TTL
    #     DefaultValue:  CYGNUM_LWIP_IP_DEFAULT_TTL 
    # option CYGNUM_LWIP_UDP_TTL
    #     DefaultValue:  CYGNUM_LWIP_IP_DEFAULT_TTL 
    # option CYGNUM_LWIP_TCP_TTL
    #     DefaultValue:  CYGNUM_LWIP_IP_DEFAULT_TTL 
};

# Support broadcast filter
# Use the SOF_BROADCAST field to enable broadcast filter
# per pcb on udp and raw send operations. To enable
# broadcast filter on recv operations, you also have to set
# IP_SOF_BROADCAST_RECV=1.
#
cdl_component CYGFUN_LWIP_IP_SOF_BROADCAST {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGFUN_LWIP_IP_SOF_BROADCAST_RECV
    #     ActiveIf: CYGFUN_LWIP_IP_SOF_BROADCAST
};

# >
# Receive support
# Enable the broadcast filter on recv operations.
#
cdl_option CYGFUN_LWIP_IP_SOF_BROADCAST_RECV {
    # This option is not active
    # The parent CYGFUN_LWIP_IP_SOF_BROADCAST is disabled
    # ActiveIf constraint: CYGFUN_LWIP_IP_SOF_BROADCAST
    #     CYGFUN_LWIP_IP_SOF_BROADCAST == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# <
# ICMP support
# Support for ICMP functionality. Be careful, disabling this
# makes your product non-compliant to RFC1122.
#
cdl_component CYGPKG_LWIP_ICMP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGVAR_LWIP_ICMP_STATS
    #     ActiveIf:  CYGPKG_LWIP_ICMP 
};

# >
# ICMP Time-To-Live
# Default value for Time-To-Live used by ICMP packets.
#
cdl_option CYGNUM_LWIP_ICMP_TTL {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255
    # value_source default
    # Default value:  CYGNUM_LWIP_IP_DEFAULT_TTL 
    #     CYGNUM_LWIP_IP_DEFAULT_TTL == 255
    #   --> 255
};

# Respond broadcast pings
# Respond to broadcast pings (default is unicast only).
#
cdl_option CYGFUN_LWIP_BROADCAST_PING {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Respond multicast pings
# Respond to multicast pings (default is unicast only).
#
cdl_option CYGFUN_LWIP_MULTICAST_PING {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# IGMP support
# Support for IGMP functionality.
#
cdl_component CYGPKG_LWIP_IGMP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_MEMP_NUM_IGMP_GROUP
    #     ActiveIf:  CYGPKG_LWIP_IGMP 
    # option CYGNUM_LWIP_MEMP_NUM_CORE_SYS_TIMEOUT
    #     Calculated:  CYGPKG_LWIP_TCP + CYGFUN_LWIP_IP_REASSEMBLY +
    #                                   CYGPKG_LWIP_ARP + (CYGPKG_LWIP_DHCP * 2) +
    #                                   CYGPKG_LWIP_AUTOIP + CYGPKG_LWIP_IGMP +
    #                                   CYGPKG_LWIP_DNS + CYGPKG_LWIP_PPP 
    # option CYGVAR_LWIP_IGMP_STATS
    #     ActiveIf:  CYGPKG_LWIP_IGMP 
};

# UDP support
# Support for UDP functionality.
#
cdl_component CYGPKG_LWIP_UDP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGPKG_LWIP_IP
    #     CYGPKG_LWIP_IP == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGPKG_LWIP_DHCP
    #     Requires: CYGPKG_LWIP_UDP
    # component CYGPKG_LWIP_AUTOIP
    #     Requires: CYGPKG_LWIP_UDP
    # component CYGPKG_LWIP_SNMP
    #     Requires: CYGPKG_LWIP_UDP
    # component CYGPKG_LWIP_DNS
    #     Requires: CYGPKG_LWIP_UDP
    # option CYGVAR_LWIP_UDP_STATS
    #     ActiveIf:  CYGPKG_LWIP_UDP 
};

# >
# UDP lite
# Enable UDP lite.
#
cdl_option CYGFUN_LWIP_UDPLITE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# UDP Time-To-Live
# Default value for Time-To-Live used by UDP packets.
#
cdl_option CYGNUM_LWIP_UDP_TTL {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255
    # value_source default
    # Default value:  CYGNUM_LWIP_IP_DEFAULT_TTL 
    #     CYGNUM_LWIP_IP_DEFAULT_TTL == 255
    #   --> 255
};

# <
# TCP support
# Support for TCP functionality.
#
cdl_component CYGPKG_LWIP_TCP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGPKG_LWIP_IP
    #     CYGPKG_LWIP_IP == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_MEMP_NUM_TCP_PCB
    #     ActiveIf:  CYGPKG_LWIP_TCP 
    # option CYGNUM_LWIP_MEMP_NUM_TCP_PCB_LISTEN
    #     ActiveIf:  CYGPKG_LWIP_TCP 
    # option CYGNUM_LWIP_MEMP_NUM_TCP_SEG
    #     ActiveIf:  CYGPKG_LWIP_TCP 
    # option CYGNUM_LWIP_MEMP_NUM_CORE_SYS_TIMEOUT
    #     Calculated:  CYGPKG_LWIP_TCP + CYGFUN_LWIP_IP_REASSEMBLY +
    #                                   CYGPKG_LWIP_ARP + (CYGPKG_LWIP_DHCP * 2) +
    #                                   CYGPKG_LWIP_AUTOIP + CYGPKG_LWIP_IGMP +
    #                                   CYGPKG_LWIP_DNS + CYGPKG_LWIP_PPP 
    # option CYGVAR_LWIP_TCP_STATS
    #     ActiveIf:  CYGPKG_LWIP_TCP 
};

# >
# TCP Time-To-Live
# Default value for Time-To-Live used by TCP packets.
#
cdl_option CYGNUM_LWIP_TCP_TTL {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255
    # value_source default
    # Default value:  CYGNUM_LWIP_IP_DEFAULT_TTL 
    #     CYGNUM_LWIP_IP_DEFAULT_TTL == 255
    #   --> 255
};

# Receive window
# The size of a TCP window. This must be at least
# (2 * TCP_MSS) for things to work well.
#
cdl_option CYGNUM_LWIP_TCP_WND {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 2144
    # value_source default
    # Default value:  CYGNUM_LWIP_TCP_MSS * 4 
    #     CYGNUM_LWIP_TCP_MSS == 536
    #   --> 2144
    # Requires:  CYGNUM_LWIP_TCP_WND >=
    #                                       CYGNUM_LWIP_TCP_MSS * 2 
    #     CYGNUM_LWIP_TCP_WND == 2144
    #     CYGNUM_LWIP_TCP_MSS == 536
    #   --> 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_TCP_WND
    #     Requires:  CYGNUM_LWIP_TCP_WND >=
    #                                       CYGNUM_LWIP_TCP_MSS * 2 
    # option CYGNUM_LWIP_TCP_WND_UPDATE_THRESHOLD
    #     DefaultValue:  CYGNUM_LWIP_TCP_WND / 4 
};

# Segment retransmissions
# Maximum number of retransmissions of data segments.
#
cdl_option CYGNUM_LWIP_TCP_MAXRTX {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 12
    # value_source default
    # Default value: 12
};

# Syn retransmissions
# Maximum number of retransmissions of SYN segments.
#
cdl_option CYGNUM_LWIP_TCP_SYNMAXRTX {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 6
    # value_source default
    # Default value: 6
};

# Queue segments
# TCP will queue segments that arrive out of order. Define
# to 0 if your device is low on memory.
#
cdl_option CYGFUN_LWIP_TCP_QUEUE_OOSEQ {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Maximum segment size
# TCP Maximum segment size. (default is 128, a *very*
# conservative default.) For the receive side, this MSS is
# advertised to the remote side when opening a connection.
# For the transmit size, this MSS sets an upper limit on the
# MSS advertised by the remote host.
#
cdl_option CYGNUM_LWIP_TCP_MSS {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 536
    # value_source default
    # Default value: 536

    # The following properties are affected by this value
    # option CYGNUM_LWIP_TCP_WND
    #     DefaultValue:  CYGNUM_LWIP_TCP_MSS * 4 
    # option CYGNUM_LWIP_TCP_WND
    #     Requires:  CYGNUM_LWIP_TCP_WND >=
    #                                       CYGNUM_LWIP_TCP_MSS * 2 
    # option CYGNUM_LWIP_TCP_SND_BUF
    #     DefaultValue: CYGNUM_LWIP_TCP_SND_QUEUELEN * CYGNUM_LWIP_TCP_MSS / 4
    # option CYGNUM_LWIP_TCP_SND_BUF
    #     Requires:  CYGNUM_LWIP_TCP_SND_BUF * 2 <
    #                                       CYGNUM_LWIP_TCP_SND_QUEUELEN * CYGNUM_LWIP_TCP_MSS 
    # option CYGNUM_LWIP_PBUF_POOL_BUFSIZE
    #     DefaultValue:  CYGNUM_LWIP_TCP_MSS + 40 + CYGNUM_LWIP_PBUF_LINK_HLEN 
};

# Calculate effective MSS
# "The maximum size of a segment that TCP really sends, the
# 'effective send MSS,' MUST be the smaller of the send MSS
# (which reflects the available reassembly buffer size at the
# remote host) and the largest size permitted by the IP
# layer" (RFC 1122) Setting this to 1 enables code that
# checks TCP_MSS against the MTU of the netif used for a
# connection and limits the MSS if it would be too big
# otherwise.
#
cdl_option CYGFUN_LWIP_TCP_CALCULATE_EFF_SEND_MSS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Sender buffer space
# TCP sender buffer space (bytes).
#
cdl_option CYGNUM_LWIP_TCP_SND_BUF {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1072
    # value_source default
    # Default value: CYGNUM_LWIP_TCP_SND_QUEUELEN * CYGNUM_LWIP_TCP_MSS / 4
    #     CYGNUM_LWIP_TCP_SND_QUEUELEN == 8
    #     CYGNUM_LWIP_TCP_MSS == 536
    #   --> 1072
    # Requires:  CYGNUM_LWIP_TCP_SND_BUF * 2 <
    #                                       CYGNUM_LWIP_TCP_SND_QUEUELEN * CYGNUM_LWIP_TCP_MSS 
    #     CYGNUM_LWIP_TCP_SND_BUF == 1072
    #     CYGNUM_LWIP_TCP_SND_QUEUELEN == 8
    #     CYGNUM_LWIP_TCP_MSS == 536
    #   --> 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_TCP_SND_BUF
    #     Requires:  CYGNUM_LWIP_TCP_SND_BUF * 2 <
    #                                       CYGNUM_LWIP_TCP_SND_QUEUELEN * CYGNUM_LWIP_TCP_MSS 
    # option CYGNUM_LWIP_TCP_SNDLOWAT
    #     DefaultValue:  CYGNUM_LWIP_TCP_SND_BUF / 2 
};

# Sender pbufs
# TCP sender buffer space (pbufs). This must be at least as
# much as (2 * TCP_SND_BUF/TCP_MSS) for things to work.
#
cdl_option CYGNUM_LWIP_TCP_SND_QUEUELEN {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8

    # The following properties are affected by this value
    # option CYGNUM_LWIP_TCP_SND_BUF
    #     DefaultValue: CYGNUM_LWIP_TCP_SND_QUEUELEN * CYGNUM_LWIP_TCP_MSS / 4
    # option CYGNUM_LWIP_TCP_SND_BUF
    #     Requires:  CYGNUM_LWIP_TCP_SND_BUF * 2 <
    #                                       CYGNUM_LWIP_TCP_SND_QUEUELEN * CYGNUM_LWIP_TCP_MSS 
};

# TCP writeable space
# TCP writable space (bytes). This must be less than or equal
# to TCP_SND_BUF. It is the amount of space which must be
# available in the TCP snd_buf for select to return writable.
#
cdl_option CYGNUM_LWIP_TCP_SNDLOWAT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 536
    # value_source default
    # Default value:  CYGNUM_LWIP_TCP_SND_BUF / 2 
    #     CYGNUM_LWIP_TCP_SND_BUF == 1072
    #   --> 536
};

# Listen backlog
# Enable the backlog option for tcp listen pcb.
#
cdl_option CYGFUN_LWIP_TCP_LISTEN_BACKLOG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGNUM_LWIP_TCP_DEFAULT_LISTEN_BACKLOG
    #     ActiveIf:  CYGFUN_LWIP_TCP_LISTEN_BACKLOG 
};

# Maximum listen backlog
# The maximum allowed backlog for TCP listen netconns.
#
cdl_option CYGNUM_LWIP_TCP_DEFAULT_LISTEN_BACKLOG {
    # This option is not active
    # ActiveIf constraint:  CYGFUN_LWIP_TCP_LISTEN_BACKLOG 
    #     CYGFUN_LWIP_TCP_LISTEN_BACKLOG == 0
    #   --> 0

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255
    # value_source default
    # Default value: 255
    # Legal values:  1 to 255 
};

# TCP timestamp
# Support the TCP timestamp option.
#
cdl_option CYGFUN_LWIP_TCP_TIMESTAMPS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Update threshold
# Difference in window to trigger an explicit window update.
#
cdl_option CYGNUM_LWIP_TCP_WND_UPDATE_THRESHOLD {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGNUM_LWIP_TCP_WND / 4 
    #     CYGNUM_LWIP_TCP_WND == 2144
    #   --> 1
};

# Event API
# The user defines lwip_tcp_event() to receive all events
# (accept, sent, etc) that happen in the system.
#
cdl_option CYGFUN_LWIP_EVENT_API {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  !CYGFUN_LWIP_CALLBACK_API 
    #     CYGFUN_LWIP_CALLBACK_API == 1
    #   --> 0

    # The following properties are affected by this value
    # option CYGFUN_LWIP_CALLBACK_API
    #     Requires:  !CYGFUN_LWIP_EVENT_API 
};

# Callback API
# The PCB callback function is called directly for the event.
#
cdl_option CYGFUN_LWIP_CALLBACK_API {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires:  !CYGFUN_LWIP_EVENT_API 
    #     CYGFUN_LWIP_EVENT_API == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGFUN_LWIP_EVENT_API
    #     Requires:  !CYGFUN_LWIP_CALLBACK_API 
};

# <
# DHCP support
# Support for DHCP functionality.
#
cdl_component CYGPKG_LWIP_DHCP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGPKG_LWIP_UDP
    #     CYGPKG_LWIP_UDP == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGFUN_LWIP_DHCP_AUTOIP_COOP
    #     Requires: CYGPKG_LWIP_DHCP
    # option CYGDAT_LWIP_ETH0_DHCP
    #     Requires: CYGPKG_LWIP_DHCP
    # option CYGDAT_LWIP_ETH1_DHCP
    #     Requires: CYGPKG_LWIP_DHCP
    # option CYGDAT_LWIP_ETH2_DHCP
    #     Requires: CYGPKG_LWIP_DHCP
    # option CYGDAT_LWIP_ETH3_DHCP
    #     Requires: CYGPKG_LWIP_DHCP
    # option CYGNUM_LWIP_MEMP_NUM_CORE_SYS_TIMEOUT
    #     Calculated:  CYGPKG_LWIP_TCP + CYGFUN_LWIP_IP_REASSEMBLY +
    #                                   CYGPKG_LWIP_ARP + (CYGPKG_LWIP_DHCP * 2) +
    #                                   CYGPKG_LWIP_AUTOIP + CYGPKG_LWIP_IGMP +
    #                                   CYGPKG_LWIP_DNS + CYGPKG_LWIP_PPP 
};

# >
# Check offered address
# Do an ARP check on the offered address.
#
cdl_option CYGFUN_LWIP_DHCP_DOES_ARP_CHECK {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGPKG_LWIP_ARP
    #     CYGPKG_LWIP_ARP == 1
    #   --> 1
};

# <
# AUTOIP support
# Support for AUTOIP functionality.
#
cdl_component CYGPKG_LWIP_AUTOIP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGPKG_LWIP_UDP
    #     CYGPKG_LWIP_UDP == 1
    #   --> 1
    # Requires: CYGPKG_LWIP_ARP
    #     CYGPKG_LWIP_ARP == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_MEMP_NUM_CORE_SYS_TIMEOUT
    #     Calculated:  CYGPKG_LWIP_TCP + CYGFUN_LWIP_IP_REASSEMBLY +
    #                                   CYGPKG_LWIP_ARP + (CYGPKG_LWIP_DHCP * 2) +
    #                                   CYGPKG_LWIP_AUTOIP + CYGPKG_LWIP_IGMP +
    #                                   CYGPKG_LWIP_DNS + CYGPKG_LWIP_PPP 
};

# >
# Simultaneous AUTOIP/DHCP
# Allow DHCP and AUTOIP to be both enabled on the same
# interface at the same time.
#
cdl_option CYGFUN_LWIP_DHCP_AUTOIP_COOP {
    # This option is not active
    # The parent CYGPKG_LWIP_AUTOIP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGPKG_LWIP_DHCP
    #     CYGPKG_LWIP_DHCP == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_DHCP_AUTOIP_COOP_TRIES
    #     Requires: CYGFUN_LWIP_DHCP_AUTOIP_COOP
};

# DHCP retries before AUTOIP
# Set to the number of DHCP DISCOVER probes that should be
# sent before falling back on AUTOIP. This can be set as low
# as 1 to get an AutoIP address very quickly, but you should
# be prepared to handle a changing IP address when DHCP
# overrides AutoIP.
#
cdl_option CYGNUM_LWIP_DHCP_AUTOIP_COOP_TRIES {
    # This option is not active
    # The parent CYGPKG_LWIP_AUTOIP is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 9
    # value_source default
    # Default value: 9
    # Legal values:  1 to 10000 
    # Requires: CYGFUN_LWIP_DHCP_AUTOIP_COOP
    #     CYGFUN_LWIP_DHCP_AUTOIP_COOP == 0
    #   --> 0
};

# <
# SNMP support
# Support for SNMP functionality.
#
cdl_component CYGPKG_LWIP_SNMP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGPKG_LWIP_UDP
    #     CYGPKG_LWIP_UDP == 1
    #   --> 1
};

# >
# Concurrent requests
# Number of concurrent requests the module will allow. At
# least one request buffer is required.
#
cdl_option CYGNUM_LWIP_SNMP_CONCURRENT_REQUESTS {
    # This option is not active
    # The parent CYGPKG_LWIP_SNMP is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Trap destinations
# Number of trap destinations. At least one trap destination
# is required.
#
cdl_option CYGNUM_LWIP_SNMP_TRAP_DESTINATIONS {
    # This option is not active
    # The parent CYGPKG_LWIP_SNMP is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Private MIB
#
cdl_option CYGFUN_LWIP_SNMP_PRIVATE_MIB {
    # This option is not active
    # The parent CYGPKG_LWIP_SNMP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Safe requests
# Only allow SNMP write actions that are 'safe' (e.g.
# disabling netifs is not a safe action and disabled when
# SNMP_SAFE_REQUESTS = 1). Unsafe requests are disabled by
# default!
#
cdl_option CYGFUN_LWIP_SNMP_SAFE_REQUESTS {
    # This option is not active
    # The parent CYGPKG_LWIP_SNMP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# DNS support
# Support for DNS functionality.
#
cdl_component CYGPKG_LWIP_DNS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGPKG_LWIP_UDP
    #     CYGPKG_LWIP_UDP == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_MEMP_NUM_CORE_SYS_TIMEOUT
    #     Calculated:  CYGPKG_LWIP_TCP + CYGFUN_LWIP_IP_REASSEMBLY +
    #                                   CYGPKG_LWIP_ARP + (CYGPKG_LWIP_DHCP * 2) +
    #                                   CYGPKG_LWIP_AUTOIP + CYGPKG_LWIP_IGMP +
    #                                   CYGPKG_LWIP_DNS + CYGPKG_LWIP_PPP 
};

# >
# Table size
# DNS maximum number of entries to maintain locally.
#
cdl_option CYGNUM_LWIP_DNS_TABLE_SIZE {
    # This option is not active
    # The parent CYGPKG_LWIP_DNS is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 4
    # value_source default
    # Default value: 4
};

# Host name size
# DNS maximum host name length supported in the name table.
#
cdl_option CYGNUM_LWIP_DNS_MAX_NAME_LENGTH {
    # This option is not active
    # The parent CYGPKG_LWIP_DNS is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 256
    # value_source default
    # Default value: 256
};

# DNS servers
# The maximum of DNS servers.
#
cdl_option CYGNUM_LWIP_DNS_MAX_SERVERS {
    # This option is not active
    # The parent CYGPKG_LWIP_DNS is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 2
    # value_source default
    # Default value: 2
};

# Name checking
# DNS do a name checking between the query and the response.
#
cdl_option CYGFUN_LWIP_DNS_DOES_NAME_CHECK {
    # This option is not active
    # The parent CYGPKG_LWIP_DNS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Static buffer
# DNS use a local buffer if DNS_USES_STATIC_BUF=0, a static
# one if DNS_USES_STATIC_BUF=1, or a dynamic one if
# DNS_USES_STATIC_BUF=2. The buffer will be of size
# DNS_MSG_SIZE.
#
cdl_option CYGNUM_LWIP_DNS_USES_STATIC_BUF {
    # This option is not active
    # The parent CYGPKG_LWIP_DNS is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Legal values:  0 to 2 
};

# Message size
# DNS message max. size. Default value is RFC compliant.
#
cdl_option CYGNUM_LWIP_DNS_MSG_SIZE {
    # This option is not active
    # The parent CYGPKG_LWIP_DNS is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 512
    # value_source default
    # Default value: 512
};

# Local host list
# Support for a local host-to-address list.
#
cdl_component CYGPKG_LWIP_DNS_LOCAL_HOSTLIST {
    # This option is not active
    # The parent CYGPKG_LWIP_DNS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Host list
# An array of structs name/address, where address is an
# u32_t in network byte order.
#
cdl_option CYGDAT_LWIP_DNS_LOCAL_HOSTLIST_INIT {
    # This option is not active
    # The parent CYGPKG_LWIP_DNS_LOCAL_HOSTLIST is not active
    # The parent CYGPKG_LWIP_DNS_LOCAL_HOSTLIST is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "{{\"host1\", 0x123}, {\"host2\", 0x234}}"
    # value_source default
    # Default value: "{{\"host1\", 0x123}, {\"host2\", 0x234}}"
};

# Dynamic host list
# If this is turned on, the local host-list can be
# dynamically changed at runtime.
#
cdl_option CYGFUN_LWIP_DNS_LOCAL_HOSTLIST_IS_DYNAMIC {
    # This option is not active
    # The parent CYGPKG_LWIP_DNS_LOCAL_HOSTLIST is not active
    # The parent CYGPKG_LWIP_DNS_LOCAL_HOSTLIST is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# <
# <
# Interfaces
# Configuration options for support of different network interface
# devices.
#
cdl_component CYGPKG_LWIP_INTERFACES {
    # There is no associated value.
};

# >
# Items claiming default network interface status
# Items which claim that a specific networking interface should
# be the default interface should implement this CDL interface.
# Only one networking interface can claim default networking
# interface status.
#
cdl_interface CYGPKG_LWIP_NETIF_DEFAULT {
    # Implemented by CYGDAT_LWIP_ETH0_DEFAULT, active, enabled
    # Implemented by CYGDAT_LWIP_ETH1_DEFAULT, inactive, disabled
    # Implemented by CYGDAT_LWIP_ETH2_DEFAULT, inactive, disabled
    # Implemented by CYGDAT_LWIP_ETH3_DEFAULT, inactive, disabled
    # Implemented by CYGDAT_LWIP_LOOPIF_DEFAULT, inactive, disabled
    # Implemented by CYGDAT_LWIP_SLIPIF_DEFAULT, inactive, disabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires:  CYGPKG_LWIP_NETIF_DEFAULT <= 1 
    #     CYGPKG_LWIP_NETIF_DEFAULT == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGPKG_LWIP_NETIF_DEFAULT
    #     Requires:  CYGPKG_LWIP_NETIF_DEFAULT <= 1 
};

# Netif options
# Configuration options for netif.
#
cdl_component CYGPKG_LWIP_NETIF {
    # There is no associated value.
};

# >
# Hostname support
# Adds a 'hostname' field to the netif structure and enables
# support for retrieving the hostname via DHCP.
#
cdl_option CYGIMP_LWIP_NETIF_HOSTNAME {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Status callback
# Support a callback function whenever an interface changes
# its up/down status (i.e., due to DHCP IP acquistion).
#
cdl_option CYGFUN_LWIP_NETIF_STATUS_CALLBACK {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGFUN_LWIP_SHOW_NETIF_CONFIG
    #     Requires: CYGFUN_LWIP_NETIF_STATUS_CALLBACK
};

# Link callback
# Support a callback function from an interface whenever the
# link changes (i.e., link down).
#
cdl_option CYGFUN_LWIP_NETIF_LINK_CALLBACK {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Cache link-layer-address hints
# Cache link-layer-address hints (e.g. table indices) in
# struct netif. TCP and UDP can make use of this to prevent
# scanning the ARP table for every sent packet. While this is
# faster for big ARP tables or many concurrent connections,
# it might be counterproductive if you have a tiny ARP table
# or if there never are concurrent connections.
#
cdl_option CYGIMP_LWIP_NETIF_HWADDRHINT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Loopback support
# Support sending packets with a destination IP address equal
# to the netif IP address, looping them back up the stack.
#
cdl_component CYGIMP_LWIP_NETIF_LOOPBACK {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# PBUF queue length
# Maximum number of pbufs on queue for loopback sending
# for each netif (0 = disabled).
#
cdl_option CYGNUM_LWIP_NETIF_LOOPBACK_MAX_PBUFS {
    # This option is not active
    # The parent CYGIMP_LWIP_NETIF_LOOPBACK is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# <
# Ethernet support
# Support for ethernet devices
#
cdl_component CYGPKG_LWIP_ETH {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: CYGPKG_IO_ETH_DRIVERS
    #     CYGPKG_IO_ETH_DRIVERS == current
    #   --> 1
    # Requires: CYGPKG_IO
    #     CYGPKG_IO == current
    #   --> 1
    # Requires: CYGPKG_IO_ETH_DRIVERS
    #     CYGPKG_IO_ETH_DRIVERS == current
    #   --> 1
    # Requires: CYGPKG_LWIP_ARP
    #     CYGPKG_LWIP_ARP == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_PBUF_LINK_HLEN
    #     DefaultValue:  (CYGPKG_LWIP_ETH) ? 14 : 0 
    # option CYGNUM_LWIP_PBUF_LINK_HLEN
    #     Requires:  CYGNUM_LWIP_PBUF_LINK_HLEN >= 
    #                                   (CYGPKG_LWIP_ETH) ? 14 : 0 
    # component CYGPKG_LWIP_THREAD_ETH
    #     ActiveIf:  CYGPKG_LWIP_ETH 
};

# >
# eth0 configuration
# Static configuration of the ethernet device
# eth0.
#
cdl_component CYGPKG_LWIP_ETH0_CONF {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Default netif
# Use this interface as the default network
# interface.
#
cdl_option CYGDAT_LWIP_ETH0_DEFAULT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Use DHCP
# Use DHCP to discover the IP address for this
# interface.
#
cdl_option CYGDAT_LWIP_ETH0_DHCP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGPKG_LWIP_DHCP
    #     CYGPKG_LWIP_DHCP == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGPKG_LWIP_ETH0_NETCONF
    #     ActiveIf: CYGDAT_LWIP_ETH0_DHCP == 0
};

# Network configuration
# See suboptions to define IP address, netmask and
# gateway.
#
cdl_component CYGPKG_LWIP_ETH0_NETCONF {
    # This option is not active
    # ActiveIf constraint: CYGDAT_LWIP_ETH0_DHCP == 0
    #     CYGDAT_LWIP_ETH0_DHCP == 1
    #   --> 0

    # There is no associated value.
};

# >
# Address
# The IP address of this device.
#
cdl_option CYGDAT_LWIP_ETH0_NETCONF_ADDR {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH0_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 192,168,1,222
    # value_source default
    # Default value: 192,168,1,222
};

# Netmask
# The netmask of the local network.
#
cdl_option CYGDAT_LWIP_ETH0_NETCONF_NETMASK {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH0_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255,255,255,0
    # value_source default
    # Default value: 255,255,255,0
};

# Gateway
# The IP address of the gateway.
#
cdl_option CYGDAT_LWIP_ETH0_NETCONF_GATEWAY {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH0_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 192,168,1,1
    # value_source default
    # Default value: 192,168,1,1
};

# <
# <
# eth1 configuration
# Static configuration of the ethernet device
# eth1.
#
cdl_component CYGPKG_LWIP_ETH1_CONF {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Default netif
# Use this interface as the default network
# interface.
#
cdl_option CYGDAT_LWIP_ETH1_DEFAULT {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH1_CONF is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Use DHCP
# Use DHCP to discover the IP address for this
# interface.
#
cdl_option CYGDAT_LWIP_ETH1_DHCP {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH1_CONF is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGPKG_LWIP_DHCP
    #     CYGPKG_LWIP_DHCP == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGPKG_LWIP_ETH1_NETCONF
    #     ActiveIf: CYGDAT_LWIP_ETH1_DHCP == 0
};

# Network configuration
# See suboptions to define IP address, netmask and
# gateway.
#
cdl_component CYGPKG_LWIP_ETH1_NETCONF {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH1_CONF is disabled
    # ActiveIf constraint: CYGDAT_LWIP_ETH1_DHCP == 0
    #     CYGDAT_LWIP_ETH1_DHCP == 0
    #   --> 1

    # There is no associated value.
};

# >
# Address
# The IP address of this device.
#
cdl_option CYGDAT_LWIP_ETH1_NETCONF_ADDR {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH1_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 192,168,1,222
    # value_source default
    # Default value: 192,168,1,222
};

# Netmask
# The netmask of the local network.
#
cdl_option CYGDAT_LWIP_ETH1_NETCONF_NETMASK {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH1_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255,255,255,0
    # value_source default
    # Default value: 255,255,255,0
};

# Gateway
# The IP address of the gateway.
#
cdl_option CYGDAT_LWIP_ETH1_NETCONF_GATEWAY {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH1_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 192,168,1,1
    # value_source default
    # Default value: 192,168,1,1
};

# <
# <
# eth2 configuration
# Static configuration of the ethernet device
# eth2.
#
cdl_component CYGPKG_LWIP_ETH2_CONF {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Default netif
# Use this interface as the default network
# interface.
#
cdl_option CYGDAT_LWIP_ETH2_DEFAULT {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH2_CONF is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Use DHCP
# Use DHCP to discover the IP address for this
# interface.
#
cdl_option CYGDAT_LWIP_ETH2_DHCP {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH2_CONF is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGPKG_LWIP_DHCP
    #     CYGPKG_LWIP_DHCP == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGPKG_LWIP_ETH2_NETCONF
    #     ActiveIf: CYGDAT_LWIP_ETH2_DHCP == 0
};

# Network configuration
# See suboptions to define IP address, netmask and
# gateway.
#
cdl_component CYGPKG_LWIP_ETH2_NETCONF {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH2_CONF is disabled
    # ActiveIf constraint: CYGDAT_LWIP_ETH2_DHCP == 0
    #     CYGDAT_LWIP_ETH2_DHCP == 0
    #   --> 1

    # There is no associated value.
};

# >
# Address
# The IP address of this device.
#
cdl_option CYGDAT_LWIP_ETH2_NETCONF_ADDR {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH2_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 192,168,1,222
    # value_source default
    # Default value: 192,168,1,222
};

# Netmask
# The netmask of the local network.
#
cdl_option CYGDAT_LWIP_ETH2_NETCONF_NETMASK {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH2_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255,255,255,0
    # value_source default
    # Default value: 255,255,255,0
};

# Gateway
# The IP address of the gateway.
#
cdl_option CYGDAT_LWIP_ETH2_NETCONF_GATEWAY {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH2_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 192,168,1,1
    # value_source default
    # Default value: 192,168,1,1
};

# <
# <
# eth3 configuration
# Static configuration of the ethernet device
# eth3.
#
cdl_component CYGPKG_LWIP_ETH3_CONF {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Default netif
# Use this interface as the default network
# interface.
#
cdl_option CYGDAT_LWIP_ETH3_DEFAULT {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH3_CONF is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Use DHCP
# Use DHCP to discover the IP address for this
# interface.
#
cdl_option CYGDAT_LWIP_ETH3_DHCP {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH3_CONF is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGPKG_LWIP_DHCP
    #     CYGPKG_LWIP_DHCP == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGPKG_LWIP_ETH3_NETCONF
    #     ActiveIf: CYGDAT_LWIP_ETH3_DHCP == 0
};

# Network configuration
# See suboptions to define IP address, netmask and
# gateway.
#
cdl_component CYGPKG_LWIP_ETH3_NETCONF {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH3_CONF is disabled
    # ActiveIf constraint: CYGDAT_LWIP_ETH3_DHCP == 0
    #     CYGDAT_LWIP_ETH3_DHCP == 0
    #   --> 1

    # There is no associated value.
};

# >
# Address
# The IP address of this device.
#
cdl_option CYGDAT_LWIP_ETH3_NETCONF_ADDR {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH3_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 192,168,1,222
    # value_source default
    # Default value: 192,168,1,222
};

# Netmask
# The netmask of the local network.
#
cdl_option CYGDAT_LWIP_ETH3_NETCONF_NETMASK {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH3_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255,255,255,0
    # value_source default
    # Default value: 255,255,255,0
};

# Gateway
# The IP address of the gateway.
#
cdl_option CYGDAT_LWIP_ETH3_NETCONF_GATEWAY {
    # This option is not active
    # The parent CYGPKG_LWIP_ETH3_NETCONF is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 192,168,1,1
    # value_source default
    # Default value: 192,168,1,1
};

# <
# <
# <
# Loop interface support
# Support loop interface.
#
cdl_component CYGPKG_LWIP_LOOPIF {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Default instance
# When enabled, a default loop interface is automatically
# set up.
#
cdl_component CYGIMP_LWIP_LOOPIF_INSTANCE {
    # This option is not active
    # The parent CYGPKG_LWIP_LOOPIF is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Default netif
# Use this interface as the default network interface.
#
cdl_option CYGDAT_LWIP_LOOPIF_DEFAULT {
    # This option is not active
    # The parent CYGIMP_LWIP_LOOPIF_INSTANCE is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Address
# The IP address of this device.
#
cdl_option CYGDAT_LWIP_LOOPIF_ADDR {
    # This option is not active
    # The parent CYGIMP_LWIP_LOOPIF_INSTANCE is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 127,0,0,1
    # value_source default
    # Default value: 127,0,0,1
};

# Netmask
# The netmask of the local network.
#
cdl_option CYGDAT_LWIP_LOOPIF_NETMASK {
    # This option is not active
    # The parent CYGIMP_LWIP_LOOPIF_INSTANCE is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255,255,255,0
    # value_source default
    # Default value: 255,255,255,0
};

# Gateway
# The IP address of the gateway.
#
cdl_option CYGDAT_LWIP_LOOPIF_GATEWAY {
    # This option is not active
    # The parent CYGIMP_LWIP_LOOPIF_INSTANCE is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 127,0,0,1
    # value_source default
    # Default value: 127,0,0,1
};

# <
# <
# SLIP support
# Support SLIP functionality.
#
cdl_component CYGPKG_LWIP_SLIP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # component CYGPKG_LWIP_THREAD_SLIP
    #     ActiveIf:  CYGPKG_LWIP_SLIP 
};

# >
# Serial device
# Serial port to use for SLIP.
#
cdl_option CYGDAT_LWIP_SLIPIF_DEV {
    # This option is not active
    # The parent CYGPKG_LWIP_SLIP is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"/dev/ser0\""
    # value_source default
    # Default value: "\"/dev/ser0\""
};

# Default instance
# When enabled, a default loop interface is automatically
# set up.
#
cdl_component CYGIMP_LWIP_SLIPIF_INSTANCE {
    # This option is not active
    # The parent CYGPKG_LWIP_SLIP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Default netif
# Use this interface as the default network interface.
#
cdl_option CYGDAT_LWIP_SLIPIF_DEFAULT {
    # This option is not active
    # The parent CYGIMP_LWIP_SLIPIF_INSTANCE is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Address
# The IP address of this device.
#
cdl_option CYGDAT_LWIP_SLIPIF_ADDR {
    # This option is not active
    # The parent CYGIMP_LWIP_SLIPIF_INSTANCE is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 172,16,1,1
    # value_source default
    # Default value: 172,16,1,1
};

# Netmask
# The netmask of the local network.
#
cdl_option CYGDAT_LWIP_SLIPIF_NETMASK {
    # This option is not active
    # The parent CYGIMP_LWIP_SLIPIF_INSTANCE is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 255,255,255,0
    # value_source default
    # Default value: 255,255,255,0
};

# Gateway
# The IP address of the gateway.
#
cdl_option CYGDAT_LWIP_SLIPIF_GATEWAY {
    # This option is not active
    # The parent CYGIMP_LWIP_SLIPIF_INSTANCE is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 172,16,1,2
    # value_source default
    # Default value: 172,16,1,2
};

# <
# <
# PPP support (experimental)
# Support PPP functionality. Current PPP support is marked
# experimental as it is subject to change for alignment to the
# PPP API of the upcoming lwIP 1.4.x releases.
#
cdl_component CYGPKG_LWIP_PPP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGNUM_LWIP_MEMP_NUM_CORE_SYS_TIMEOUT
    #     Calculated:  CYGPKG_LWIP_TCP + CYGFUN_LWIP_IP_REASSEMBLY +
    #                                   CYGPKG_LWIP_ARP + (CYGPKG_LWIP_DHCP * 2) +
    #                                   CYGPKG_LWIP_AUTOIP + CYGPKG_LWIP_IGMP +
    #                                   CYGPKG_LWIP_DNS + CYGPKG_LWIP_PPP 
};

# >
# PPPoE support
# Enable PPP Over Ethernet.
#
cdl_option CYGFUN_LWIP_PPPOE_SUPPORT {
    # This option is not active
    # The parent CYGPKG_LWIP_PPP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# PPPoS support
# Enable PPP Over Serial.
#
cdl_option CYGFUN_LWIP_PPPOS_SUPPORT {
    # This option is not active
    # The parent CYGPKG_LWIP_PPP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGDAT_LWIP_PPPOS_DEV
    #     ActiveIf:  CYGFUN_LWIP_PPPOS_SUPPORT 
    # component CYGPKG_LWIP_THREAD_PPPOS
    #     ActiveIf:  CYGFUN_LWIP_PPPOS_SUPPORT 
};

# Serial device
# Serial port to use for PPPoS.
#
cdl_option CYGDAT_LWIP_PPPOS_DEV {
    # This option is not active
    # The parent CYGPKG_LWIP_PPP is disabled
    # ActiveIf constraint:  CYGFUN_LWIP_PPPOS_SUPPORT 
    #     CYGFUN_LWIP_PPPOS_SUPPORT == 0
    #   --> 0

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"/dev/ser0\""
    # value_source default
    # Default value: "\"/dev/ser0\""
};

# Max sessions
# Max PPP sessions.
#
cdl_option CYGNUM_LWIP_NUM_PPP {
    # This option is not active
    # The parent CYGPKG_LWIP_PPP is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_MEM_SIZE
    #     DefaultValue:  1600 + ((CYGNUM_LWIP_NUM_PPP * 2) * 1504) 
};

# PAP support
# Enable PAP support.
#
cdl_option CYGFUN_LWIP_PAP_SUPPORT {
    # This option is not active
    # The parent CYGPKG_LWIP_PPP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# CHAP support
# Enable CHAP support.
#
cdl_option CYGFUN_LWIP_CHAP_SUPPORT {
    # This option is not active
    # The parent CYGPKG_LWIP_PPP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# VJ support
# Support VJ header compression.
#
cdl_option CYGFUN_LWIP_VJ_SUPPORT {
    # This option is not active
    # The parent CYGPKG_LWIP_PPP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# MD5 support
# Support MD5 (see also CHAP).
#
cdl_option CYGFUN_LWIP_MD5_SUPPORT {
    # This option is not active
    # The parent CYGPKG_LWIP_PPP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Recording support
# Support for dumping incoming/outgoing records.
#
cdl_option CYGFUN_LWIP_RECORD_SUPPORT {
    # This option is not active
    # The parent CYGPKG_LWIP_PPP is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# <
# Memory options
# Tunables for various aspects of memory usage throughout the stack.
#
cdl_component CYGPKG_LWIP_MEM_OPTIONS {
    # There is no associated value.
};

# >
# Use malloc for internal allocations
# Use malloc/free/realloc provided by the C-library instead of
# the lwip internal allocator. Can save code size if you already
# use it.
#
cdl_option CYGIMP_LWIP_MEM_LIBC_MALLOC {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  CYGINT_ISO_MEMALLOC != 0 
    #     CYGINT_ISO_MEMALLOC (unknown) == 0
    #   --> 0
};

# Use malloc for pool allocations
# Use mem_malloc/mem_free instead of the lwip pool allocator.
# Especially useful with MEM_LIBC_MALLOC but handle with care
# regarding execution speed and usage from interrupts!
#
cdl_option CYGIMP_LWIP_MEMP_MEM_MALLOC {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Memory alignment
# Should be set to the alignment of the CPU.
#
cdl_option CYGNUM_LWIP_MEM_ALIGNMENT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 4
    # value_source default
    # Default value: 4
};

# Memory size
# The size of the heap memory. If the application will send a lot
# of data that needs to be copied, this should be set high.
#
cdl_option CYGNUM_LWIP_MEM_SIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1600
    # value_source default
    # Default value:  1600 + ((CYGNUM_LWIP_NUM_PPP * 2) * 1504) 
    #     CYGNUM_LWIP_NUM_PPP == 0
    #   --> 1600
};

# Memory pool overflow protection
# Memory pool overflow protection reserves a configurable amount
# of bytes before and after each memp element in every pool and
# fills it with a prominent default value.
# MEMP_OVERFLOW_CHECK == 0 no checking,
# MEMP_OVERFLOW_CHECK == 1 checks each element when it is freed,
# MEMP_OVERFLOW_CHECK >= 2 checks each element in every pool
# every time memp_malloc() or memp_free() is called
# (useful but slow!)
#
cdl_option CYGDBG_LWIP_MEMP_OVERFLOW_CHECK {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Memory pool sanity check
# Run a sanity check after each memp_free() to make sure that
# there are no cycles in the linked lists.
#
cdl_option CYGDBG_LWIP_MEMP_SANITY_CHECK {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Number of memp struct pbufs
# The number of memp struct pbufs (used for PBUF_ROM and
# PBUF_REF). If the application sends a lot of data out of ROM
# (or other static memory), this should be set high.
#
cdl_option CYGNUM_LWIP_MEMP_NUM_PBUF {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 16
    # value_source default
    # Default value: 16
};

# Simultaneous active TCP connections
# The number of simulatenously active TCP connections.
#
cdl_option CYGNUM_LWIP_MEMP_NUM_TCP_PCB {
    # ActiveIf constraint:  CYGPKG_LWIP_TCP 
    #     CYGPKG_LWIP_TCP == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 5
    # value_source default
    # Default value: 5
};

# Listening TCP connections
# The number of listening TCP connections.
#
cdl_option CYGNUM_LWIP_MEMP_NUM_TCP_PCB_LISTEN {
    # ActiveIf constraint:  CYGPKG_LWIP_TCP 
    #     CYGPKG_LWIP_TCP == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8
};

# Simultaneous queued TCP segments
# The number of simultaneously queued TCP segments.
#
cdl_option CYGNUM_LWIP_MEMP_NUM_TCP_SEG {
    # ActiveIf constraint:  CYGPKG_LWIP_TCP 
    #     CYGPKG_LWIP_TCP == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 16
    # value_source default
    # Default value: 16
};

# Simultaneous queued IP packets for reassembly
# The number of simultaneously IP packets queued for reassembly
# (whole packets, not fragments!).
#
cdl_option CYGNUM_LWIP_MEMP_NUM_REASSDATA {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 5
    # value_source default
    # Default value: 5
};

# Simultaneous queued ARP requests
# The number of simulateously queued outgoing packets (pbufs)
# that are waiting for an ARP request (to resolve their
# destination address) to finish.
#
cdl_option CYGNUM_LWIP_MEMP_NUM_ARP_QUEUE {
    # ActiveIf constraint:  CYGFUN_LWIP_ARP_QUEUEING 
    #     CYGFUN_LWIP_ARP_QUEUEING == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 30
    # value_source default
    # Default value: 30
};

# Multicast groups
# The number of multicast groups whose network interfaces can be
# members et the same time (one per netif - allsystems group -,
# plus one per netif membership).
#
cdl_option CYGNUM_LWIP_MEMP_NUM_IGMP_GROUP {
    # ActiveIf constraint:  CYGPKG_LWIP_IGMP 
    #     CYGPKG_LWIP_IGMP == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8
};

# Simultaneous active timeouts by core modules
# The number of simulateously active timeouts used by the lwIP
# core modules.
#
cdl_option CYGNUM_LWIP_MEMP_NUM_CORE_SYS_TIMEOUT {
    # Calculated value:  CYGPKG_LWIP_TCP + CYGFUN_LWIP_IP_REASSEMBLY +
    #                                   CYGPKG_LWIP_ARP + (CYGPKG_LWIP_DHCP * 2) +
    #                                   CYGPKG_LWIP_AUTOIP + CYGPKG_LWIP_IGMP +
    #                                   CYGPKG_LWIP_DNS + CYGPKG_LWIP_PPP 
    #     CYGPKG_LWIP_TCP == 1
    #     CYGFUN_LWIP_IP_REASSEMBLY == 1
    #     CYGPKG_LWIP_ARP == 1
    #     CYGPKG_LWIP_DHCP == 1
    #     CYGPKG_LWIP_AUTOIP == 0
    #     CYGPKG_LWIP_IGMP == 1
    #     CYGPKG_LWIP_DNS == 0
    #     CYGPKG_LWIP_PPP == 0
    # Flavor: data
    # Current_value: 6
};

# Simultaneous active timeouts by user modules
# The number of simulateously active timeouts used by user
# modules.
#
cdl_option CYGNUM_LWIP_MEMP_NUM_USER_SYS_TIMEOUT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Struct netbufs
# The number of struct netbufs. (only needed if you use the
# sequential API, like api_lib.c)
#
cdl_option CYGNUM_LWIP_MEMP_NUM_NETBUF {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 2
    # value_source default
    # Default value: 2
};

# Struct netconns
# The number of struct netconns. (only needed if you use the
# sequential API, like api_lib.c)
#
cdl_option CYGNUM_LWIP_MEMP_NUM_NETCONN {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 4
    # value_source default
    # Default value: 4
};

# Struct tcpip_msg
# The number of struct tcpip_msg, which are used for
# callback/timeout API communication. (only needed if you use
# tcpip.c)
#
cdl_option CYGNUM_LWIP_MEMP_NUM_TCPIP_MSG_API {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8
};

# Incoming struct tcpip_msg
# The number of struct tcpip_msg, which are used for incoming
# packets. (only needed if you use tcpip.c)
#
cdl_option CYGNUM_LWIP_MEMP_NUM_TCPIP_MSG_INPKT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8
};

# Pbuf pool buffers
# The number of buffers in the pbuf pool.
#
cdl_option CYGNUM_LWIP_PBUF_POOL_SIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 16
    # value_source default
    # Default value: 16
};

# Size of variable memory pool
# Memory required to hold semaphore, mbox and thread structures
# is allocated from this memory pool.
#
cdl_option CYGNUM_LWIP_VARMEMPOOL_SIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 2048
    # value_source default
    # Default value: 2048
};

# Allocation for a link level header
# The number of bytes that should be allocated for a link level
# header. The default is 14, the standard value for Ethernet.
#
cdl_option CYGNUM_LWIP_PBUF_LINK_HLEN {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 14
    # value_source default
    # Default value:  (CYGPKG_LWIP_ETH) ? 14 : 0 
    #     CYGPKG_LWIP_ETH == 1
    #   --> 14
    # Requires:  CYGNUM_LWIP_PBUF_LINK_HLEN >= 
    #                                   (CYGPKG_LWIP_ETH) ? 14 : 0 
    #     CYGNUM_LWIP_PBUF_LINK_HLEN == 14
    #     CYGPKG_LWIP_ETH == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGNUM_LWIP_PBUF_LINK_HLEN
    #     Requires:  CYGNUM_LWIP_PBUF_LINK_HLEN >= 
    #                                   (CYGPKG_LWIP_ETH) ? 14 : 0 
    # option CYGNUM_LWIP_PBUF_POOL_BUFSIZE
    #     DefaultValue:  CYGNUM_LWIP_TCP_MSS + 40 + CYGNUM_LWIP_PBUF_LINK_HLEN 
};

# PBUF buffer size
# The size of each pbuf in the pbuf pool. The default is designed
# to accomodate single full size TCP frame in one pbuf, including
# TCP_MSS, IP header, and link header.
#
cdl_option CYGNUM_LWIP_PBUF_POOL_BUFSIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 590
    # value_source default
    # Default value:  CYGNUM_LWIP_TCP_MSS + 40 + CYGNUM_LWIP_PBUF_LINK_HLEN 
    #     CYGNUM_LWIP_TCP_MSS == 536
    #     CYGNUM_LWIP_PBUF_LINK_HLEN == 14
    #   --> 590
};

# <
# Thread options
#
cdl_component CYGPKG_LWIP_THREADS {
    # This option is not active
    # ActiveIf constraint: CYGFUN_LWIP_MODE_SEQUENTIAL
    #     CYGFUN_LWIP_MODE_SEQUENTIAL == 0
    #   --> 0

    # There is no associated value.
};

# >
# TCP/IP thread
# The TCP/IP thread is handling the central message queue in the
# lwIP stack. The name is misleading, as it does not only handle
# TCP/IP, but all of the stack.
#
cdl_component CYGPKG_LWIP_THREAD_TCPIP {
    # This option is not active
    # The parent CYGPKG_LWIP_THREADS is not active

    # There is no associated value.
};

# >
# Stack size
#
cdl_option CYGNUM_LWIP_THREAD_TCPIP_STACKSIZE {
    # This option is not active
    # The parent CYGPKG_LWIP_THREAD_TCPIP is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1024
    # value_source default
    # Default value: 1024
};

# Thread priority
#
cdl_option CYGNUM_LWIP_THREAD_TCPIP_PRIORITY {
    # This option is not active
    # The parent CYGPKG_LWIP_THREAD_TCPIP is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8
};

# <
# Ethernet thread
# The ethernet thread is responsible for receiving data packets
# from ethernet devices and queueing them to be processed in the
# TCP/IP thread.
#
cdl_component CYGPKG_LWIP_THREAD_ETH {
    # This option is not active
    # The parent CYGPKG_LWIP_THREADS is not active
    # ActiveIf constraint:  CYGPKG_LWIP_ETH 
    #     CYGPKG_LWIP_ETH == 1
    #   --> 1

    # There is no associated value.
};

# >
# Stack size
#
cdl_option CYGNUM_LWIP_THREAD_ETH_STACKSIZE {
    # This option is not active
    # The parent CYGPKG_LWIP_THREAD_ETH is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1024
    # value_source default
    # Default value: 1024
};

# Thread priority
#
cdl_option CYGNUM_LWIP_THREAD_ETH_PRIORITY {
    # This option is not active
    # The parent CYGPKG_LWIP_THREAD_ETH is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 4
    # value_source default
    # Default value: 4
};

# <
# SLIP thread
# The SLIP thread is responsible for reading data from the SLIP
# serial device and queue them to be processed in the TCP/IP
# thread.
#
cdl_component CYGPKG_LWIP_THREAD_SLIP {
    # This option is not active
    # The parent CYGPKG_LWIP_THREADS is not active
    # ActiveIf constraint:  CYGPKG_LWIP_SLIP 
    #     CYGPKG_LWIP_SLIP == 0
    #   --> 0

    # There is no associated value.
};

# >
# Stack size
#
cdl_option CYGNUM_LWIP_THREAD_SLIP_STACKSIZE {
    # This option is not active
    # The parent CYGPKG_LWIP_THREAD_SLIP is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1024
    # value_source default
    # Default value: 1024
};

# Thread priority
#
cdl_option CYGNUM_LWIP_THREAD_SLIP_PRIORITY {
    # This option is not active
    # The parent CYGPKG_LWIP_THREAD_SLIP is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8
};

# <
# PPPoS thread
# The PPPoS thread is responsible for reading data from the PPP
# serial device and queue them to be processed in the TCP/IP
# thread.
#
cdl_component CYGPKG_LWIP_THREAD_PPPOS {
    # This option is not active
    # The parent CYGPKG_LWIP_THREADS is not active
    # ActiveIf constraint:  CYGFUN_LWIP_PPPOS_SUPPORT 
    #     CYGFUN_LWIP_PPPOS_SUPPORT == 0
    #   --> 0

    # There is no associated value.
};

# >
# Stack size
#
cdl_option CYGNUM_LWIP_THREAD_PPPOS_STACKSIZE {
    # This option is not active
    # The parent CYGPKG_LWIP_THREAD_PPPOS is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1024
    # value_source default
    # Default value: 1024
};

# Thread priority
#
cdl_option CYGNUM_LWIP_THREAD_PPPOS_PRIORITY {
    # This option is not active
    # The parent CYGPKG_LWIP_THREAD_PPPOS is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8
};

# <
# <
# Checksum generation/checking
# Options for checksum generation and checking.
#
cdl_component CYGPKG_LWIP_CHECKSUMS {
    # There is no associated value.
};

# >
# Generate IP checksums
# Generate checksums in software for outgoing IP packets.
#
cdl_option CYGIMP_LWIP_CHECKSUM_GEN_IP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Generate UDP checksums
# Generate checksums in software for outgoing UDP packets.
#
cdl_option CYGIMP_LWIP_CHECKSUM_GEN_UDP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Generate TCP checksums
# Generate checksums in software for outgoing TCP packets.
#
cdl_option CYGIMP_LWIP_CHECKSUM_GEN_TCP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Check IP checksums
# Check checksums in software for incoming IP packets.
#
cdl_option CYGIMP_LWIP_CHECKSUM_CHECK_IP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Check UDP checksums
# Check checksums in software for incoming UDP packets.
#
cdl_option CYGIMP_LWIP_CHECKSUM_CHECK_UDP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Check TCP checksums
# Check checksums in software for incoming TCP packets.
#
cdl_option CYGIMP_LWIP_CHECKSUM_CHECK_TCP {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Traffic statistics
# Enable statistics collection in lwip_stats.
#
cdl_component CYGPKG_LWIP_STATS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Link stats
#
cdl_option CYGVAR_LWIP_LINK_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Etharp stats
#
cdl_option CYGVAR_LWIP_ETHARP_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# IP stats
#
cdl_option CYGVAR_LWIP_IP_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# IP fragmentation stats
#
cdl_option CYGVAR_LWIP_IPFARG_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled
    # ActiveIf constraint:  CYGFUN_LWIP_IP_REASSEMBLY ||
    #                                   CYGFUN_LWIP_IP_FRAG 
    #     CYGFUN_LWIP_IP_REASSEMBLY == 1
    #     CYGFUN_LWIP_IP_FRAG == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# ICMP stats
#
cdl_option CYGVAR_LWIP_ICMP_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled
    # ActiveIf constraint:  CYGPKG_LWIP_ICMP 
    #     CYGPKG_LWIP_ICMP == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# IGMP stats
#
cdl_option CYGVAR_LWIP_IGMP_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled
    # ActiveIf constraint:  CYGPKG_LWIP_IGMP 
    #     CYGPKG_LWIP_IGMP == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# UDP stats
#
cdl_option CYGVAR_LWIP_UDP_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled
    # ActiveIf constraint:  CYGPKG_LWIP_UDP 
    #     CYGPKG_LWIP_UDP == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# TCP stats
#
cdl_option CYGVAR_LWIP_TCP_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled
    # ActiveIf constraint:  CYGPKG_LWIP_TCP 
    #     CYGPKG_LWIP_TCP == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Memory stats
#
cdl_option CYGVAR_LWIP_MEM_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Memory pool stats
#
cdl_option CYGVAR_LWIP_MEMP_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# System stats
#
cdl_option CYGVAR_LWIP_SYS_STATS {
    # This option is not active
    # The parent CYGPKG_LWIP_STATS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Show netif configuration
# Shows the netif configuration on the diagnostic output.
#
cdl_option CYGFUN_LWIP_SHOW_NETIF_CONFIG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGFUN_LWIP_NETIF_STATUS_CALLBACK
    #     CYGFUN_LWIP_NETIF_STATUS_CALLBACK == 1
    #   --> 1
};

# Debugging
# Configuration options for debug output.
#
cdl_component CYGDBG_LWIP_DEBUG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Debug options
#
cdl_component CYGDBG_LWIP_DEBUG_OPTIONS {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # There is no associated value.
};

# >
# Log level
# Sets the minimum log level needed to for log output.
# 0 = Info, 1 = Warning, 2 = Serious, 3 = Severe
#
cdl_option CYGDBG_LWIP_DEBUG_LEVEL {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG_OPTIONS is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Legal values:  0 to 3 
};

# Trace messages
# Log state tracing messages (to follow module flow).
#
cdl_option CYGDBG_LWIP_DEBUG_TRACE {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG_OPTIONS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# State messages
# Log state debug messages (to follow module states).
#
cdl_option CYGDBG_LWIP_DEBUG_STATE {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG_OPTIONS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Fresh messages
# Log messages from newly added code, not thoroughly tested
# yet.
#
cdl_option CYGDBG_LWIP_DEBUG_FRESH {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG_OPTIONS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Etharp debugging
#
cdl_option CYGDBG_LWIP_DEBUG_ETHARP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Netif debugging
#
cdl_option CYGDBG_LWIP_DEBUG_NETIF {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# PBUF debugging
#
cdl_option CYGDBG_LWIP_DEBUG_PBUF {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# API debugging
#
cdl_option CYGDBG_LWIP_DEBUG_API {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Sockets debugging
#
cdl_option CYGDBG_LWIP_DEBUG_SOCKETS {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# ICMP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_ICMP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# IGMP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_IGMP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# IP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_IP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# RAW debugging
#
cdl_option CYGDBG_LWIP_DEBUG_RAW {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Memory debugging
#
cdl_option CYGDBG_LWIP_DEBUG_MEM {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# System debugging
#
cdl_option CYGDBG_LWIP_DEBUG_SYS {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# TCP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_TCP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# UDP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_UDP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# TCPIP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_TCPIP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# PPP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_PPP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# SLIP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_SLIP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# DHCP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_DHCP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# AUTOIP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_AUTOIP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# SNMP debugging
#
cdl_option CYGDBG_LWIP_DEBUG_SNMP {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# DNS debugging
#
cdl_option CYGDBG_LWIP_DEBUG_DNS {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# SIO debugging
#
cdl_option CYGDBG_LWIP_DEBUG_SIO {
    # This option is not active
    # The parent CYGDBG_LWIP_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# lwIP tests
# This option specifies the set of tests for lwIP. They show the
# usage of the raw, the sequential and the BSD socket compatible APIs
#
cdl_component CYGPKG_NET_LWIP_TESTS {
    # Calculated value:  "tests/httpd_sequential tests/httpd_simple " .
    #                               "tests/nc_test_slave tests/ppp " . 
    #                               "tests/socket tests/sys_timeout tests/tcpecho " .
    #                               "tests/udpecho" 
    # Flavor: data
    # Current_value: tests/httpd_sequential tests/httpd_simple tests/nc_test_slave tests/ppp tests/socket tests/sys_timeout tests/tcpecho tests/udpecho
};

# >
# PPP test options
#
cdl_component CYGPKG_NET_LWIP_PPP_TEST {
    # There is no associated value.
};

# >
# APN
# Access Point Name used to open PPP connection.
#
cdl_option CYGDAT_NET_LWIP_PPP_TEST_APN {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"gprs.swisscom.ch\""
    # value_source default
    # Default value: "\"gprs.swisscom.ch\""
};

# Number
# Dial number used to open PPP connection.
#
cdl_option CYGDAT_NET_LWIP_PPP_TEST_NUMBER {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"*99#\""
    # value_source default
    # Default value: "\"*99#\""
};

# Username
# Username used for PPP authentication.
#
cdl_option CYGDAT_NET_LWIP_PPP_TEST_USERNAME {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"gprs\""
    # value_source default
    # Default value: "\"gprs\""
};

# Password
# Password used for PPP authentication.
#
cdl_option CYGDAT_NET_LWIP_PPP_TEST_PASSWORD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"gprs\""
    # value_source default
    # Default value: "\"gprs\""
};

# Host to ping
# Hostname for DNS resolve and ping.
#
cdl_option CYGDAT_NET_LWIP_PPP_TEST_HOST {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"www.ping.ch\""
    # value_source default
    # Default value: "\"www.ping.ch\""
};

# <
# <
# lwIP build options
#
cdl_component CYGPKG_NET_LWIP_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for building the
# lwIP package. These flags are used in addition to the set of
# global flags.
#
cdl_option CYGPKG_NET_LWIP_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for building the
# lwIP package. These flags are removed from the set of global
# flags if present.
#
cdl_option CYGPKG_NET_LWIP_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# <
# <
# <

